{
 "DdeSetQualityOfService": "Type: HWND A handle to the DDE client window that specifies the source of WM_DDE_INITIATE messages a client will send to start DDE conversations.",
 "FreeDDElParam": "Type: UINT The posted DDE message.",
 "ImpersonateDdeClientWindow": "Type: HWND A handle to the DDE client window to be impersonated. The client window must have established a DDE conversation with the server window identified by the \t\t\t\t\thWndServer parameter.",
 "PackDDElParam": "Type: UINT The DDE message to be posted.",
 "ReuseDDElParam": "Type: LPARAM The \t\t\t\t\tlParam parameter of the posted DDE message being reused.",
 "UnpackDDElParam": "Type: UINT The posted DDE message.",
 "accept": "A descriptor that identifies a socket that has been placed in a listening state with the listen function. The connection is actually made with the socket that is returned by accept.",
 "AcceptEx": "A descriptor identifying a socket that has already been called with the listen function. A server application waits for attempts to connect on this socket.",
 "bind": "A descriptor identifying an unbound socket.",
 "closesocket": "A descriptor identifying the socket to close.",
 "connect": "A descriptor identifying an unconnected socket.",
 "ConnectEx": "A descriptor that identifies an unconnected, previously bound socket. See Remarks for more information.",
 "DisconnectEx": "A handle to a connected, connection-oriented socket.",
 "EnumProtocols": "A pointer to a null-terminated array of protocol identifiers. The EnumProtocols function retrieves information about the protocols specified by this array. If lpiProtocols is NULL, the function retrieves information about all available protocols. The following protocol identifier values are defined. ValueMeaning IPPROTO_TCP The Transmission Control Protocol (TCP), a connection-oriented stream protocol. IPPROTO_UDP The User Datagram Protocol (UDP), a connectionless datagram protocol. ISOPROTO_TP4 The ISO connection-oriented transport protocol. NSPROTO_IPX The Internet Packet Exchange (IPX) protocol, a connectionless datagram protocol. NSPROTO_SPX The Sequenced Packet Exchange (SPX) protocol, a connection-oriented stream protocol. NSPROTO_SPXII The Sequenced Packet Exchange (SPX) protocol version 2, a connection-oriented stream protocol.",
 "freeaddrinfo": "A pointer to the addrinfo structure or linked list of addrinfo structures to be freed. All dynamic storage pointed to within the addrinfo structure or structures is also freed.",
 "getaddrinfo": "A pointer to a NULL-terminated ANSI string that contains a host (node) name or a numeric host address string. For the Internet protocol, the numeric host address string is a dotted-decimal IPv4 address or an IPv6 hex address.",
 "FreeAddrInfoEx": "A pointer to the addrinfoex structure or linked list of addrinfoex structures to be freed. All dynamic storage pointed to within the addrinfoex structure or structures is also freed.",
 "GetAddrInfoEx": "A pointer to a NULL-terminated string containing a host (node) name or a numeric host address string. For the Internet protocol, the numeric host address string is a dotted-decimal IPv4 address or an IPv6 hex address.",
 "FreeAddrInfoW": "A pointer to the addrinfoW structure or linked list of addrinfoW structures to be freed. All dynamic storage pointed to within the addrinfoW structure or structures is also freed.",
 "GetAddrInfoW": "A pointer to a NULL-terminated Unicode string that contains a host (node) name or a numeric host address string. For the Internet protocol, the numeric host address string is a dotted-decimal IPv4 address or an IPv6 hex address.",
 "gai_strerror": "Error code from the list of available getaddrinfo error codes. For a complete listing of error codes, see the getaddrinfo function.",
 "GetAcceptExSockaddrs": "A pointer to a buffer that receives the first block of data sent on a connection resulting from an AcceptEx call. Must be the same lpOutputBuffer parameter that was passed to the AcceptEx \t\t\t function.",
 "GetAddressByName": "The namespace, or set of default namespaces, that the operating system should query for network address information. Use one of the following constants to specify a namespace. ValueMeaning NS_DEFAULT A set of default namespaces. The function queries each namespace within this set. The set of default namespaces typically includes all the namespaces installed on the system. System administrators, however, can exclude particular namespaces from the set. This is the value that most applications should use for dwNameSpace. NS_DNS The Domain Name System (DNS) used in the Internet for host name resolution. NS_NETBT The NetBIOS over TCP/IP layer. All operating systems register their computer names with NetBIOS. This namespace is used to convert a computer name to an IP address that uses this registration. Note that NS_NETBT can access a WINS server to perform the resolution. NS_SAP The NetWare Service Advertising Protocol. This can access the NetWare bindery if appropriate. NS_SAP is a dynamic namespace that allows registration of services. NS_TCPIP_HOSTS Lookup value in the <systemroot>\\system32\\drivers\\etc\\hosts file. NS_TCPIP_LOCAL Local TCP/IP name resolution mechanisms, including comparisons against the local host name and looks up host names and IP addresses in cache of host to IP address mappings. Most calls to GetAddressByName should use the special value NS_DEFAULT. This lets a client get by with no knowledge of which namespaces are available on an internetwork. The system administrator determines namespace access. Namespaces can come and go without the client having to be aware of the changes.",
 "GetAddrInfoExCancel": "The handle of the asynchronous operation to cancel. This is the handle returned in the lpNameHandle parameter by the GetAddrInfoEx function.",
 "GetAddrInfoExOverlappedResult": "A pointer to an OVERLAPPED structure for the asynchronous operation.",
 "gethostbyaddr": "A pointer to an address in network byte order.",
 "gethostbyname": "A pointer to the null-terminated name of the host to resolve.",
 "gethostname": "A pointer to a buffer that receives the local host name.",
 "GetHostNameW": "A pointer to a buffer that receives the local host name as a null-terminated Unicode string.",
 "getipv4sourcefilter": "A descriptor that identifies a multicast socket.",
 "GetNameByType": "A pointer to a globally unique identifier (GUID) that specifies the type of the network service. The Svcguid.h header file includes definitions of several GUID service types, and macros for working with them. The Svcguid.h header file is not automatically included by the Winsock2.h header file.",
 "getnameinfo": "A pointer to a socket address structure that contains the address and port number of the socket. For IPv4, the sa parameter points to a sockaddr_in structure. For IPv6, the sa parameter points to a sockaddr_in6 structure.",
 "GetNameInfoW": "A pointer to a socket address structure containing the IP address and port number of the socket. For IPv4, the pSockaddr parameter points to a sockaddr_in structure. For IPv6, the pSockaddr parameter points to a sockaddr_in6 structure.",
 "getpeername": "A descriptor identifying a connected socket.",
 "getprotobyname": "Pointer to a null-terminated protocol name.",
 "getprotobynumber": "Protocol number, in host byte order.",
 "getservbyname": "A pointer to a null-terminated service name.",
 "getservbyport": "Port for a service, in network byte order.",
 "GetService": "The namespace, or a set of default namespaces, that the operating system should query for information about the specified network service. Use one of the following constants to specify a namespace. ValueMeaning NS_DEFAULT A set of default namespaces. The operating system queries each namespace within this set. The set of default namespaces typically includes all the namespaces installed on the system. System administrators, however, can exclude particular namespaces from the set. NS_DEFAULT is the value that most applications should use for dwNameSpace. NS_DNS The Domain Name System used in the Internet for host name resolution. NS_NETBT The NetBIOS over TCP/IP layer. All operating systems register their computer names with NetBIOS. This namespace is used to resolve a computer name into an IP address using this registration. Note that NS_NETBT can access a WINS server to perform the resolution. NS_SAP The NetWare Service Advertising Protocol. This can access the NetWare bindery if appropriate. NS_SAP is a dynamic namespace that allows registration of services. NS_TCPIP_HOSTS Looks up host names and IP addresses in the <systemroot>\\system32\\drivers\\etc\\hosts file. NS_TCPIP_LOCAL Local TCP/IP name resolution mechanisms, including comparisons against the local host name and looks up host names and IP addresses in cache of host to IP address mappings. Most calls to GetService should use the special value NS_DEFAULT. This lets a client get by without knowing available namespaces on an internetwork. The system administrator determines namespace access. Namespaces can come and go without the client having to be aware of the changes.",
 "getsockname": "Descriptor identifying a socket.",
 "getsockopt": "A descriptor identifying a socket.",
 "getsourcefilter": "A descriptor that identifies a multicast socket.",
 "GetTypeByName": "A pointer to a zero-terminated string that uniquely represents the name of the service. For example, \"MY SNA SERVER.\"",
 "htond": "A double that contains a number in host byte order.",
 "htonf": "A float that contains a number in host byte order.",
 "htonl": "A 32-bit number in host byte order.",
 "htonll": "A 64-bit unsigned number in host byte order.",
 "htons": "A 16-bit number in host byte order.",
 "inet_addr": "A NULL-terminated character string representing a number expressed in the Internet standard \".'' (dotted) notation.",
 "inet_ntoa": "An in_addr structure that represents an Internet host address.",
 "InetNtop": "The address family. Possible values for the address family are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. The values currently supported are AF_INET and AF_INET6. ValueMeaning AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns an IPv4 address string. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns an IPv6 address string.",
 "InetPton": "The address family. Possible values for the address family are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. The values currently supported are AF_INET and AF_INET6. ValueMeaning AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, the pszAddrString parameter must point to a text representation of an IPv4 address and the pAddrBuf parameter returns a pointer to an IN_ADDR structure that represents the IPv4 address. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, the pszAddrString parameter must point to a text representation of an IPv6 address and the pAddrBuf parameter returns a pointer to an IN6_ADDR structure that represents the IPv6 address.",
 "ioctlsocket": "A descriptor identifying a socket.",
 "listen": "A descriptor identifying a bound, unconnected socket.",
 "ntohd": "An unsigned __int64 number in TCP/IP network byte order.",
 "ntohf": "An unsigned __int32 number in TCP/IP network byte order.",
 "ntohl": "A 32-bit number in TCP/IP network byte order.",
 "ntohll": "An unsigned __int64 number in TCP/IP network byte order.",
 "ntohs": "A 16-bit number in TCP/IP network byte order.",
 "recv": "The descriptor that identifies a connected socket.",
 "recvfrom": "A descriptor identifying a bound socket.",
 "RIOCloseCompletionQueue": "A descriptor identifying an existing completion queue.",
 "RIOCreateCompletionQueue": "The size, in number of entries, of the completion queue to create.",
 "RIOCreateRequestQueue": "A descriptor that identifies the socket.",
 "RIODequeueCompletion": "A descriptor that identifies an I/O completion queue.",
 "RIODeregisterBuffer": "A descriptor identifying a registered buffer.",
 "RIONotify": "A descriptor that identifies an I/O completion queue.",
 "RIOReceive": "A descriptor that identifies a connected registered I/O TCP socket or a bound registered I/O UDP socket.",
 "RIOReceiveEx": "A descriptor that identifies a connected registered I/O UDP socket or a bound registered I/O UDP socket.",
 "RIORegisterBuffer": "A pointer to the beginning of the memory buffer to register.",
 "RIOResizeCompletionQueue": "A descriptor that identifies an existing I/O completion queue to resize.",
 "RIOResizeRequestQueue": "A descriptor that identifies an existing registered I/O socket descriptor (request queue) to resize.",
 "RIOSend": "A descriptor that identifies a connected registered I/O TCP socket or a bound registered I/O UDP socket.",
 "RIOSendEx": "A descriptor that identifies a connected registered I/O TCP socket or a bound registered I/O UDP socket.",
 "select": "Ignored. The nfds parameter is included only for compatibility with Berkeley sockets.",
 "send": "A descriptor identifying a connected socket.",
 "sendto": "A descriptor identifying a (possibly connected) socket.",
 "SetAddrInfoEx": "A pointer to a NULL-terminated string containing a name under which addresses are to be registered or deregistered. The interpretation of this parameter specific to the namespace provider.",
 "setipv4sourcefilter": "A descriptor that identifies a multicast socket.",
 "SetService": "The namespace, or a set of default namespaces, within which the function will operate. Use one of the following constants to specify a namespace. ValueMeaning NS_DEFAULT A set of default namespaces. The function queries each namespace within this set. The set of default namespaces typically includes all the namespaces installed on the system. System administrators, however, can exclude particular namespaces from the set. NS_DEFAULT is the value that most applications should use for dwNameSpace. NS_DNS The Domain Name System used in the Internet to resolve the name of the host. NS_NDS The NetWare 4 provider. NS_NETBT The NetBIOS over TCP/IP layer. All Windows systems register their computer names with NetBIOS. This namespace is used to convert a computer name to an IP address that uses this registration. NS_SAP The NetWare Service Advertising Protocol. This can access the NetWare bindery, if appropriate. NS_SAP is a dynamic namespace that enables the registration of services. NS_TCPIP_HOSTS Lookup value in the <systemroot>\\system32\\drivers\\etc\\posts file. NS_TCPIP_LOCAL Local TCP/IP name resolution mechanisms, including comparisons against the local host name and lookup value in the cache of host to IP address mappings.",
 "SetSocketMediaStreamingMode": "Indicates whether the network is to be used for transferring streaming media that requires quality of service. This ensures that sockets opened as low latency will get the right quality of service over 802.11 wireless networks.",
 "setsockopt": "A descriptor that identifies a socket.",
 "setsourcefilter": "A descriptor that identifies a multicast socket.",
 "shutdown": "A descriptor identifying a socket.",
 "socket": "The address family specification. Possible values for the address family are defined in the Winsock2.h header file. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and the possible values for the address family are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET or AF_INET6, which are the Internet address family formats for IPv4 and IPv6. Other options for address family (AF_NETBIOS for use with NetBIOS, for example) are supported if a Windows Sockets service provider for the address family is installed. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. The table below lists common values for address family although many other values are possible. AfMeaning AF_UNSPEC 0 The address family is unspecified. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. AF_IPX 6 The IPX/SPX address family. This address family is only supported if the NWLink IPX/SPX NetBIOS Compatible Transport protocol is installed. This address family is not supported on Windows Vista and later. AF_APPLETALK 16 The AppleTalk address family. This address family is only supported if the AppleTalk protocol is installed. This address family is not supported on Windows Vista and later. AF_NETBIOS 17 The NetBIOS address family. This address family is only supported if the Windows Sockets provider for NetBIOS is installed. The Windows Sockets provider for NetBIOS is supported on 32-bit versions of Windows. This provider is installed by default on 32-bit versions of Windows. The Windows Sockets provider for NetBIOS is not supported on 64-bit versions of windows including Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, or Windows XP. The Windows Sockets provider for NetBIOS only supports sockets where the type parameter is set to SOCK_DGRAM. The Windows Sockets provider for NetBIOS is not directly related to the NetBIOS programming interface. The NetBIOS programming interface is not supported on Windows Vista, Windows Server 2008, and later. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. AF_IRDA 26 The Infrared Data Association (IrDA) address family. This address family is only supported if the computer has an infrared port and driver installed. AF_BTH 32 The Bluetooth address family. This address family is supported on Windows XP with SP2 or later if the computer has a Bluetooth adapter and driver installed.",
 "TransmitFile": "A handle to a connected socket. The TransmitFile function will transmit the file data over this socket. The socket specified by the hSocket parameter must be a connection-oriented socket of type SOCK_STREAM, SOCK_SEQPACKET, or SOCK_RDM.",
 "TransmitPackets": "A handle to the connected socket to be used in the transmission. Although the socket does not need to be a connection-oriented circuit, the default destination/peer should have been established using the connect, WSAConnect, accept, WSAAccept, AcceptEx, or WSAJoinLeaf function.",
 "WSAAccept": "A descriptor that identifies a socket that is listening for connections after a call to the listen function.",
 "WSAAddressToString": "A pointer to the sockaddr structure to translate into a string.",
 "WSAAsyncGetHostByAddr": "Handle of the window that will receive a message when the asynchronous request completes.",
 "WSAAsyncGetHostByName": "Handle of the window that will receive a message when the asynchronous request completes.",
 "WSAAsyncGetProtoByName": "Handle of the window that will receive a message when the asynchronous request completes.",
 "WSAAsyncGetProtoByNumber": "Handle of the window that will receive a message when the asynchronous request completes.",
 "WSAAsyncGetServByName": "Handle of the window that should receive a message when the asynchronous request completes.",
 "WSAAsyncGetServByPort": "Handle of the window that should receive a message when the asynchronous request completes.",
 "WSAAsyncSelect": "A descriptor that identifies the socket for which event notification is required.",
 "WSACancelAsyncRequest": "Handle that specifies the asynchronous operation to be canceled.",
 "WSACleanup": null,
 "WSACloseEvent": "Object handle identifying the open event.",
 "WSAConnect": "A descriptor identifying an unconnected socket.",
 "WSAConnectByList": "A descriptor that identifies an unbound and unconnected socket. Note that unlike other Winsock calls to establish a connection (for example, WSAConnect), the WSAConnectByList function requires an unbound socket.",
 "WSAConnectByName": "A descriptor that identifies an unconnected socket. Note On Windows 7, Windows Server 2008 R2, and earlier, the WSAConnectByName function requires an unbound and unconnected socket. This differs from other Winsock calls to establish a connection (for example, WSAConnect).",
 "WSACreateEvent": null,
 "WSADeleteSocketPeerTargetName": "A descriptor identifying a socket on which the peer target name is being deleted.",
 "WSADuplicateSocket": "Descriptor identifying the local socket.",
 "WSAEnumNameSpaceProviders": "On input, the number of bytes contained in the buffer pointed to by lpnspBuffer. On output (if the function fails, and the error is WSAEFAULT), the minimum number of bytes to pass for the lpnspBuffer to retrieve all the requested information. The buffer passed to WSAEnumNameSpaceProviders must be sufficient to hold all of the namespace information.",
 "WSAEnumNameSpaceProvidersEx": "On input, the number of bytes contained in the buffer pointed to by lpnspBuffer. On output (if the function fails, and the error is WSAEFAULT), the minimum number of bytes to allocate for the lpnspBuffer buffer to allow it to retrieve all the requested information. The buffer passed to WSAEnumNameSpaceProvidersEx must be sufficient to hold all of the namespace information.",
 "WSAEnumNetworkEvents": "A descriptor identifying the socket.",
 "WSAEnumProtocols": "A NULLl-terminated array of iProtocol values. This parameter is optional; if lpiProtocols is NULL, information on all available protocols is returned. Otherwise, information is retrieved only for those protocols listed in the array.",
 "WSAEventSelect": "A descriptor identifying the socket.",
 "__WSAFDIsSet": "Descriptor identifying a socket.",
 "WSAGetLastError": null,
 "WSAGetOverlappedResult": "A descriptor identifying the socket. This is the same socket that was specified when the overlapped operation was started by a call to any of the Winsock functions that supports overlappped operations. These functions include AcceptEx, ConnectEx, DisconnectEx, TransmitFile, TransmitPackets, WSARecv, WSARecvFrom, WSARecvMsg, WSASend, WSASendMsg, WSASendTo, and WSAIoctl.",
 "WSAGetServiceClassInfo": "A pointer to a GUID that identifies a specific namespace provider.",
 "WSAGetServiceClassNameByClassId": "A pointer to the GUID for the service class.",
 "WSAHtonl": "A descriptor identifying a socket.",
 "WSAHtons": "A descriptor identifying a socket.",
 "WSAImpersonateSocketPeer": "Identifies the application socket.",
 "WSAInstallServiceClass": "Service class to namespace specific–type mapping information. ...",
 "WSAIoctl": "A descriptor identifying a socket.",
 "WSAJoinLeaf": "Descriptor identifying a multipoint socket.",
 "WSALookupServiceBegin": "A pointer to the search criteria. See the Remarks for details.",
 "WSALookupServiceEnd": "Handle previously obtained by calling WSALookupServiceBegin.",
 "WSALookupServiceNext": "A handle returned from the previous call to WSALookupServiceBegin.",
 "WSANSPIoctl": "The lookup handle returned from a previous call to the WSALookupServiceBegin function.",
 "WSANtohl": "A descriptor identifying a socket.",
 "WSANtohs": "A descriptor identifying a socket.",
 "WSAPoll": "An array of one or more POLLFD structures specifying the set of sockets for which status is requested. The array must contain at least one structure with a valid socket. Upon return, this parameter receives the updated sockets with the revents status flags member set on each one that matches the status query criteria.",
 "WSAProviderConfigChange": "Pointer to notification handle. If the notification handle is set to NULL (the handle value not the pointer itself), this function returns a notification handle in the location pointed to by lpNotificationHandle.",
 "WSAQuerySocketSecurity": "A descriptor identifying a socket for which security information is being queried.",
 "WSARecv": "A descriptor identifying a connected socket.",
 "WSARecvDisconnect": "A descriptor identifying a socket.",
 "WSARecvEx": "A descriptor that identifies a connected socket.",
 "WSARecvFrom": "A descriptor identifying a socket.",
 "WSARecvMsg": "A descriptor that identifies the socket.",
 "WSARemoveServiceClass": "Pointer to the GUID for the service class you want to remove.",
 "WSAResetEvent": "A handle that identifies an open event object handle.",
 "WSARevertImpersonation": null,
 "WSASend": "A descriptor that identifies a connected socket.",
 "WSASendDisconnect": "Descriptor identifying a socket.",
 "WSASendMsg": "A descriptor identifying the socket.",
 "WSASendTo": "A descriptor identifying a (possibly connected) socket.",
 "WSASetEvent": "Handle that identifies an open event object.",
 "WSASetLastError": "Integer that specifies the error code to be returned by a subsequent WSAGetLastError call.",
 "WSASetService": "A pointer to the service information for registration or deregistration.",
 "WSASetSocketPeerTargetName": "A descriptor identifying a socket on which the peer target name is being assigned.",
 "WSASetSocketSecurity": "A descriptor that identifies a socket on which security settings are being applied.",
 "WSASocket": "The address family specification. Possible values for the address family are defined in the Winsock2.h header file. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and the possible values for the address family are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET or AF_INET6, which are the Internet address family formats for IPv4 and IPv6. Other options for address family (AF_NETBIOS for use with NetBIOS, for example) are supported if a Windows Sockets service provider for the address family is installed. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. The table below lists common values for address family although many other values are possible. AfMeaning AF_UNSPEC 0 The address family is unspecified. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. AF_IPX 6 The IPX/SPX address family. This address family is only supported if the NWLink IPX/SPX NetBIOS Compatible Transport protocol is installed. This address family is not supported on Windows Vista and later. AF_APPLETALK 16 The AppleTalk address family. This address family is only supported if the AppleTalk protocol is installed. This address family is not supported on Windows Vista and later. AF_NETBIOS 17 The NetBIOS address family. This address family is only supported if the Windows Sockets provider for NetBIOS is installed. The Windows Sockets provider for NetBIOS is supported on 32-bit versions of Windows. This provider is installed by default on 32-bit versions of Windows. The Windows Sockets provider for NetBIOS is not supported on 64-bit versions of windows including Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, or Windows XP. The Windows Sockets provider for NetBIOS only supports sockets where the type parameter is set to SOCK_DGRAM. The Windows Sockets provider for NetBIOS is not directly related to the NetBIOS programming interface. The NetBIOS programming interface is not supported on Windows Vista, Windows Server 2008, and later. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. AF_IRDA 26 The Infrared Data Association (IrDA) address family. This address family is only supported if the computer has an infrared port and driver installed. AF_BTH 32 The Bluetooth address family. This address family is supported on Windows XP with SP2 or later if the computer has a Bluetooth adapter and driver installed.",
 "WSAStartup": "The highest version of Windows Sockets specification that the caller can use. The high-order byte specifies the minor version number; the low-order byte specifies the major version number.",
 "WSAStringToAddress": "A pointer to the zero-terminated string that contains the network address in standard text form to convert.",
 "WSAWaitForMultipleEvents": "The number of event object handles in the array pointed to by lphEvents. The maximum number of event object handles is WSA_MAXIMUM_WAIT_EVENTS. One or more events must be specified.",
 "CreateCaret": "Type: HWND A handle to the window that owns the caret.",
 "DestroyCaret": null,
 "GetCaretBlinkTime": null,
 "GetCaretPos": "Type: LPPOINT A pointer to the POINT structure that is to receive the client coordinates of the caret.",
 "HideCaret": "Type: HWND A handle to the window that owns the caret. If this parameter is NULL, HideCaret searches the current task for the window that owns the caret.",
 "SetCaretBlinkTime": "Type: UINT The new blink time, in milliseconds.",
 "SetCaretPos": "Type: int The new x-coordinate of the caret.",
 "ShowCaret": "Type: HWND A handle to the window that owns the caret. If this parameter is NULL, ShowCaret searches the current task for the window that owns the caret.",
 "WS_ABANDON_MESSAGE_CALLBACK": "Pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_ABORT_CHANNEL_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_ABORT_LISTENER_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_ACCEPT_CHANNEL_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_ASYNC_CALLBACK": "The result of the operation. If the operation fails and a WS_ERROR object is supplied, the object is filled with rich error information before the callback is invoked.",
 "WS_ASYNC_FUNCTION": "The result of the previous async operation.",
 "WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK": "State that was specified along with this callback in the WS_CUSTOM_CERT_CREDENTIAL.",
 "WS_CERTIFICATE_VALIDATION_CALLBACK": "A pointer to a CERT_CONTEXT structure that is associated with the connection. Applications must free this structure using CertFreeCertificateContext.",
 "WS_CLOSE_CHANNEL_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_CLOSE_LISTENER_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_CREATE_CHANNEL_CALLBACK": "The message exchange pattern of the channel. If the type of channel is not supported by the custom channel implementation, E_INVALIDARG should be returned.",
 "WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_CREATE_DECODER_CALLBACK": "The createContext that was specified in the WS_CHANNEL_DECODER used during channel creation.",
 "WS_CREATE_ENCODER_CALLBACK": "The createContext that was specified in the WS_CHANNEL_ENCODER used during channel creation.",
 "WS_CREATE_LISTENER_CALLBACK": "The type of channel the listener listens for.",
 "WS_DECODER_DECODE_CALLBACK": "The decoder instance returned by the WS_CREATE_DECODER_CALLBACK.",
 "WS_DECODER_END_CALLBACK": "The decoder instance returned by the WS_CREATE_DECODER_CALLBACK.",
 "WS_DECODER_GET_CONTENT_TYPE_CALLBACK": "The encoder instance returned by the WS_CREATE_DECODER_CALLBACK.",
 "WS_DECODER_START_CALLBACK": "The decoder instance returned by the WS_CREATE_DECODER_CALLBACK.",
 "WS_DURATION_COMPARISON_CALLBACK": "A pointer to a WS_DURATION structure representing the first duration to compare.",
 "WS_DYNAMIC_STRING_CALLBACK": "User-defined state that was passed to the function that accepted the WS_DYNAMIC_STRING_CALLBACK.",
 "WS_ENCODER_ENCODE_CALLBACK": "The encoder instance returned by the WS_CREATE_ENCODER_CALLBACK.",
 "WS_ENCODER_END_CALLBACK": "The encoder instance returned by the WS_CREATE_ENCODER_CALLBACK.",
 "WS_ENCODER_GET_CONTENT_TYPE_CALLBACK": "The encoder instance returned by the WS_CREATE_ENCODER_CALLBACK.",
 "WS_ENCODER_START_CALLBACK": "The encoder instance returned by the WS_CREATE_ENCODER_CALLBACK.",
 "WS_FREE_CHANNEL_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK. The callback should free this pointer.",
 "WS_FREE_DECODER_CALLBACK": "Frees an instance of an decoder.",
 "WS_FREE_ENCODER_CALLBACK": "Frees an instance of an encoder.",
 "WS_FREE_LISTENER_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK. The callback should free this pointer.",
 "WS_GET_CERT_CALLBACK": "State that was specified along with this callback in the certificate credential.",
 "WS_GET_CHANNEL_PROPERTY_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_GET_LISTENER_PROPERTY_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_HTTP_REDIRECT_CALLBACK": "The 'state' as specified as part of WS_HTTP_REDIRECT_CALLBACK_CONTEXT 'state' field.",
 "WS_IS_DEFAULT_VALUE_CALLBACK": "This is the value of the descriptionData field from WS_CUSTOM_TYPE_DESCRIPTION. The callback can use this to access any additional information about the type.",
 "WS_MESSAGE_DONE_CALLBACK": "A pointer to state information passed to the WsReadEnvelopeStart or WsWriteEnvelopeStart function. This parameter can be used to specify a pointer to user-defined data required by the callback.",
 "WS_OPEN_CHANNEL_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_OPEN_LISTENER_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_OPERATION_CANCEL_CALLBACK": "Specifies the reason for which the call back is called.",
 "WS_OPERATION_FREE_STATE_CALLBACK": "A reference to the application defined state registered with the callback.",
 "WS_PROXY_MESSAGE_CALLBACK": "The input or output message.",
 "WS_PULL_BYTES_CALLBACK": "The user-defined state that was passed to WsPullBytes.",
 "WS_PUSH_BYTES_CALLBACK": "A void pointer to the user-defined state that was passed to WsPushBytes.",
 "WS_READ_CALLBACK": "A void pointer to the user-defined state value that was passed to the function that accepted this callback.",
 "WS_READ_MESSAGE_END_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_READ_MESSAGE_START_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_READ_TYPE_CALLBACK": "A pointer to a WS_XML_READER handle that contains the type value.",
 "WS_RESET_CHANNEL_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_RESET_LISTENER_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_SERVICE_ACCEPT_CHANNEL_CALLBACK": "The operation context.",
 "WS_SERVICE_CLOSE_CHANNEL_CALLBACK": "The operation context.",
 "WS_SERVICE_MESSAGE_RECEIVE_CALLBACK": "The context within which this callback is being invoked.",
 "WS_SERVICE_SECURITY_CALLBACK": "The incoming message with headers only.",
 "WS_SERVICE_STUB_CALLBACK": "The context within which this callback is being invoked.",
 "WS_SET_CHANNEL_PROPERTY_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_SET_LISTENER_PROPERTY_CALLBACK": "The pointer to the state specific to this listener instance, as created by the WS_CREATE_LISTENER_CALLBACK.",
 "WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_VALIDATE_PASSWORD_CALLBACK": "The state to be passed back when invoking this callback.",
 "WS_VALIDATE_SAML_CALLBACK": "The state to be passed back when invoking this callback.",
 "WS_WRITE_CALLBACK": "A void pointer to the user-defined state value that was passed to the function that accepted this callback.",
 "WS_WRITE_MESSAGE_END_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_WRITE_MESSAGE_START_CALLBACK": "The pointer to the state specific to this channel instance, as created by the WS_CREATE_CHANNEL_CALLBACK.",
 "WS_WRITE_TYPE_CALLBACK": "A WS_XML_WRITER pointer to the writer that the value should be written to.",
 "CreateDirectory": "The path of the directory to be created. For the ANSI version of this function, there is a default string size limit for paths of 248 characters (MAX_PATH - enough room for a 8.3 filename). To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File Tip Starting with Windows 10, version 1607, for the unicode version of this function (CreateDirectoryW), you can opt-in to remove the 248 character limitation without prepending \"\\\\?\\\". The 255 character limit per path segment still applies. See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "CreateDirectoryEx": "The path of the directory to use as a template when creating the new directory. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (CreateDirectoryExW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". The 255 character limit per path segment still applies. See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "CreateDirectoryTransacted": "The path of the directory to use as a template when creating the new directory. This parameter can be NULL. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. The directory must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "FindCloseChangeNotification": "A handle to a change notification handle created by the FindFirstChangeNotification function.",
 "FindFirstChangeNotification": "The full path of the directory to be watched. This cannot be a relative path or an empty string. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File.",
 "FindNextChangeNotification": "A handle to a change notification handle created by the FindFirstChangeNotification function.",
 "GetCurrentDirectory": "The length of the buffer for the current directory string, in TCHARs. The buffer length must include room for a terminating null character.",
 "ReadDirectoryChangesW": "A handle to the directory to be monitored. This directory must be opened with the FILE_LIST_DIRECTORY access right.",
 "RemoveDirectory": "The path of the directory to be removed. This path must specify an empty directory, and the calling process must have delete access to the directory. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (RemoveDirectoryW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "RemoveDirectoryTransacted": "The path of the directory to be removed. The path must specify an empty directory, and the calling process must have delete access to the directory. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. The directory must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "SetCurrentDirectory": "The path to the new current directory. This parameter may specify a relative path or a full path. In either case, the full path of the specified directory is calculated and stored as the current directory. For more information, see File Names, Paths, and Namespaces. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. The final character before the null character must be a backslash ('\\'). If you do not specify the backslash, it will be added for you; therefore, specify MAX_PATH-2 characters for the path unless you include the trailing backslash, in which case, specify MAX_PATH-1 characters for the path. Tip Starting with Windows 10, version 1607, for the unicode version of this function (SetCurrentDirecotryW), you can opt-in to remove the MAX_PATH limitation. See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "A_SHAFinal": "The SHA context.",
 "A_SHAInit": "The SHA context.",
 "A_SHAUpdate": "The SHA context.",
 "CryptXmlCreateReference": "The handle of the XML signature.",
 "CryptXmlAddObject": "The handle of a Signature returned by the CryptXmlOpenToEncode function or the handle of a Reference returned by the CryptXmlCreateReference function with the CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT flag set.",
 "CryptXmlClose": "The handle of the cryptographic XML object to be closed.",
 "CryptXmlDigestReference": "The handle of a Reference element.",
 "CryptXmlDllCloseDigest pointer": "The handle of the hash object. This handle is obtained by calling the CryptXmlCreateDigest function. After the function has been called, the digest handle passed to this function is released and cannot be used again.",
 "CryptXmlDllCreateDigest pointer": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm to use to create the digest.",
 "CryptXmlDllCreateKey pointer": "A pointer to a CRYPT_XML_BLOB structure that contains the KeyValue element.",
 "CryptXmlDllDigestData pointer": "The handle of the hash object used to put data into the digest. This handle is obtained by calling the CryptXmlDllCreateDigest function.",
 "CryptXmlDllEncodeAlgorithm pointer": "A pointer to a CRYPT_XML_ALGORITHM_INFO structure.",
 "CryptXmlDllEncodeKeyValue pointer": "The handle of the key value to encode.",
 "CryptXmlDllFinalizeDigest pointer": "The handle of the hash object used to put data into the digest. This handle is obtained by calling the CryptXmlDllCreateDigest function.",
 "CryptXmlDllGetAlgorithmInfo pointer": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm.",
 "CryptXmlDllGetInterface pointer": "This parameter is reserved and must be set to zero.",
 "CryptXmlDllSignData pointer": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm.",
 "CryptXmlDllVerifySignature pointer": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm.",
 "CryptXmlEncode": "The handle of the object to be serialized. The handle can be of Signature, Object, or Reference types.",
 "CryptXmlGetAlgorithmInfo": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm about which to return information.",
 "CryptXmlGetDocContext": "The handle of the document context to retrieve.",
 "CryptXmlGetReference": "The handle of the Reference element to retrieve.",
 "CryptXmlGetSignature": "The handle of the Signature element.",
 "CryptXmlGetStatus": "A handle to a CRYPT_XML_SIGNATURE structure, an array of CRYPT_XML_SIGNATURE structures , a CRYPT_XML_REFERENCE structure, or a Manifest object about which to get status information.",
 "CryptXmlGetTransforms": "A pointer to a pointer to a CRYPT_XML_TRANSFORM_CHAIN_CONFIG structure to receive the returned transform information.",
 "CryptXmlImportPublicKey": "A DWORD value that controls which CryptXML extensions are loaded. This parameter can be one of the following values. ValueMeaning CRYPT_XML_FLAG_DISABLE_EXTENSIONS 0x10000000 Only default implementations for the signature and digest are used. When this flag is set, no other registered extensions are loaded.",
 "CryptXmlOpenToEncode": "The handle of the transform chain engine. If this parameter is NULL, then a default engine is used to apply transforms.",
 "CryptXmlOpenToDecode": "The handle of the transform chain engine. If this parameter is NULL, then a default engine will be used to apply transforms.",
 "CryptXmlSetHMACSecret": "The handle of the XML Signature element.",
 "CryptXmlSign": "The handle to a CRYPT_XML_SIGNATURE structure.",
 "CryptXmlVerifySignature": "The handle of a Signature element.",
 "PFN_CRYPT_XML_WRITE_CALLBACK": "A pointer to an argument that is passed to the callback function pointed to by the pfnWrite parameter of the CryptXmlDllEncodeAlgorithm function.",
 "PFN_CRYPT_XML_CREATE_TRANSFORM": "A CRYPT_XML_ALGORITHM structure that specifies the transform to apply.",
 "PFN_CRYPT_XML_DATA_PROVIDER_READ": "A pointer to an application defined argument that is passed to the calling function.",
 "PFN_CRYPT_XML_DATA_PROVIDER_CLOSE": "An application defined argument for the callback function.",
 "PFN_CRYPT_XML_ENUM_ALG_INFO": "A pointer to a CRYPT_XML_ALGORITHM_INFO structure.",
 "SignerFreeSignerContext": "A pointer to the SIGNER_CONTEXT structure to free.",
 "SignerSignEx": "Modifies the behavior of this function. If the file to be signed is a portable executable (PE) file, this can be zero or a combination of one or more of the following values. These identifiers are defined in Mssip.h. ValueMeaning SPC_EXC_PE_PAGE_HASHES_FLAG 0x10 Exclude page hashes when creating SIP indirect data for the PE file. This flag takes precedence over the SPC_INC_PE_PAGE_HASHES_FLAG flag. If neither the SPC_EXC_PE_PAGE_HASHES_FLAG or the SPC_INC_PE_PAGE_HASHES_FLAG flag is specified, the value set with the WintrustSetDefaultIncludePEPageHashes function is used for this setting. The default for this setting is to exclude page hashes when creating SIP indirect data for PE files. Windows Server 2003 and Windows XP: This value is not supported. SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG 0x20 This value is not supported. SPC_INC_PE_DEBUG_INFO_FLAG 0x40 This value is not supported. SPC_INC_PE_RESOURCES_FLAG 0x80 This value is not supported. SPC_INC_PE_PAGE_HASHES_FLAG 0x100 Include page hashes when creating SIP indirect data for the PE file. Windows Server 2003 and Windows XP: This value is not supported.",
 "SignError": null,
 "SignerSign": "A pointer to a SIGNER_SUBJECT_INFO structure that specifies the subject to sign.",
 "SignerSignEx2": "Modifies the behavior of this function. If the file to be signed is a portable executable (PE) file, this can be zero or a combination of one or more of the following values. ValueMeaning SPC_EXC_PE_PAGE_HASHES_FLAG 0x10 Exclude page hashes when creating SIP indirect data for the PE file. This flag takes precedence over the SPC_INC_PE_PAGE_HASHES_FLAG flag. If neither the SPC_EXC_PE_PAGE_HASHES_FLAG or the SPC_INC_PE_PAGE_HASHES_FLAG flag is specified, the value set with the WintrustSetDefaultIncludePEPageHashes function is used for this setting. The default for this setting is to exclude page hashes when creating SIP indirect data for PE files. This value is defined in the Mssip.h header file. Windows Server 2003 and Windows XP: This value is not supported. SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG 0x20 This value is not supported. SPC_INC_PE_DEBUG_INFO_FLAG 0x40 This value is not supported. SPC_INC_PE_RESOURCES_FLAG 0x80 This value is not supported. SPC_INC_PE_PAGE_HASHES_FLAG 0x100 Include page hashes when creating SIP indirect data for the PE file. Windows Server 2003 and Windows XP: This value is not supported. This value is defined in the Mssip.h header file. SIG_APPEND 0x1000 The signature will be nested. If you set this flag before any signature has been added, the generated signature will be added as the outer signature. If you do not set this flag, the generated signature replaces the outer signature, deleting all inner signatures.",
 "SignerTimeStamp": "The address of a SIGNER_SUBJECT_INFO structure that represents the subject to be time stamped.",
 "SignerTimeStampEx2": "Value that specifies the type of time stamp to generate. ...",
 "SignerTimeStampEx": "Reserved. This parameter must be set to zero.",
 "SignerTimeStampEx3": "Flag that specifies the type of time stamp to generate. ...",
 "CryptAcquireContext": "A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the CryptReleaseContext function.",
 "CryptContextAddRef": "HCRYPTPROV handle for which the reference count is being incremented. This handle must have already been created using CryptAcquireContext.",
 "CryptEnumProviders": "Index of the next provider to be enumerated.",
 "CryptEnumProviderTypes": "Index of the next provider type to be enumerated.",
 "CryptGetDefaultProvider": "The provider type for which the default CSP name is to be found. Defined provider types are as follows: PROV_RSA_FULL PROV_RSA_SIG PROV_DSS PROV_DSS_DH PROV_DH_SCHANNEL PROV_FORTEZZA PROV_MS_EXCHANGE PROV_RSA_SCHANNEL PROV_SSL",
 "CryptGetProvParam": "A handle of the CSP target of the query. This handle must have been created by using the CryptAcquireContext function.",
 "CryptInstallDefaultContext": "The handle of the cryptographic service provider to be used as the default context. This handle is obtained by using the CryptAcquireContext function.",
 "CryptReleaseContext": "Handle of a cryptographic service provider (CSP) created by a call to CryptAcquireContext.",
 "CryptSetProvider": "Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see Cryptographic Provider Names.",
 "CryptSetProviderEx": "The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see Cryptographic Provider Names.",
 "CryptSetProvParam": "The handle of a CSP for which to set values. This handle must have already been created by using the CryptAcquireContext function.",
 "CryptUninstallDefaultContext": "Handle of the context to be released.",
 "FreeCryptProvFromCertEx": "A value that specifies whether the provider handle was acquired from the certificate.",
 "CryptDeriveKey": "A HCRYPTPROV handle of a CSP created by a call to CryptAcquireContext.",
 "CryptDestroyKey": "The handle of the key to be destroyed.",
 "CryptDuplicateKey": "A handle to the key to be duplicated.",
 "CryptExportKey": "A handle to the key to be exported.",
 "CryptGenKey": "A handle to a cryptographic service provider (CSP) created by a call to \t\t\t\t\tCryptAcquireContext.",
 "CryptGenRandom": "Handle of a cryptographic service provider (CSP) created by a call to CryptAcquireContext.",
 "CryptGetKeyParam": "The handle of the key being queried.",
 "CryptGetUserKey": "HCRYPTPROV handle of a cryptographic service provider (CSP) created by a call to CryptAcquireContext.",
 "CryptImportKey": "The handle of a CSP obtained with the CryptAcquireContext function.",
 "CryptSetKeyParam": "A handle to the key for which values are to be set.",
 "CryptDecodeObject": "Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING Note Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.",
 "CryptDecodeObjectEx": "The type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING Note Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.",
 "CryptEncodeObject": "Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING Note Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.",
 "CryptEncodeObjectEx": "The certificate encoding type and message encoding type to use to encode the object. This parameter can be a combination of one or more of the following values. ValueMeaning PKCS_7_ASN_ENCODING 65536 (0x10000) Specifies PKCS 7 message encoding. X509_ASN_ENCODING 1 (0x1) Specifies X.509 certificate encoding.",
 "CryptEncrypt": "A handle to the encryption key. An application obtains this handle by using either the CryptGenKey or the CryptImportKey function. The key specifies the encryption algorithm used.",
 "CryptDecrypt": "A handle to the key to use for the decryption. An application obtains this handle by using either the CryptGenKey or CryptImportKey function. This key specifies the decryption algorithm to be used.",
 "CryptProtectData": "A pointer to a DATA_BLOB structure that contains the plaintext to be encrypted.",
 "CryptProtectMemory": "A pointer to the block of memory to encrypt. The cbData parameter specifies the number of bytes that will be encrypted. If the data contained in the memory space is smaller than the number of bytes specified, data outside of the intended block will be encrypted. If it is larger than cbData bytes, then only the first cbData bytes will be encrypted.",
 "CryptUnprotectData": "A pointer to a DATA_BLOB structure that holds the encrypted data. The DATA_BLOB structure's cbData member holds the length of the pbData member's byte string that contains the text to be encrypted.",
 "CryptUnprotectMemory": "A pointer to the block of memory to decrypt. The cbData parameter specifies the number of bytes that the function will attempt to decrypt. If the data contained in the memory space is smaller than the number of bytes specified, the function will attempt to decrypt data outside of the intended block. If it is larger than cbData bytes, then only the first cbData bytes will be decrypted.",
 "CryptCreateHash": "A handle to a CSP created by a call to CryptAcquireContext.",
 "CryptDestroyHash": "The handle of the hash object to be destroyed.",
 "CryptDuplicateHash": "Handle of the hash to be duplicated.",
 "CryptGetHashParam": "Handle of the hash object to be queried.",
 "CryptHashData": "Handle of the hash object.",
 "CryptHashSessionKey": "A handle to the hash object.",
 "CryptSetHashParam": "A handle to the hash object on which to set parameters.",
 "CryptSignHash": "Handle of the hash object to be signed.",
 "CryptUIWizDigitalSign": "Contains flags that modify the behavior of the function. This can be zero or the following value. ValueMeaning CRYPTUI_WIZ_NO_UI 0x0001 This function will sign the document based on the information in the CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure pointed to by the pDigitalSignInfo parameter without displaying any user interface. If this flag is not specified, this function will display a wizard to guide the user through the signing process.",
 "CryptUIWizFreeDigitalSignContext": "A pointer to the CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure to be freed.",
 "CryptVerifySignature": "A handle to the hash object to verify.",
 "PFNCFILTERPROC": "A pointer to a CERT_CONTEXT structure that contains the certificate to filter.",
 "CertAddStoreToCollection": "Handle of a certificate store.",
 "CertCloseStore": "Handle of the certificate store to be closed.",
 "CertControlStore": "Handle of the certificate store.",
 "CertDuplicateStore": "A handle of the certificate store for which the reference count is being incremented.",
 "CertEnumPhysicalStore": "If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in dwFlags, pvSystemStore points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure that indicates both the name and the location of the system store to be enumerated. Otherwise, pvSystemStore is a pointer to a Unicode string that names the system store whose physical stores are to be enumerated. For information about prefixing a ServiceName or ComputerName to the system store name, see CertRegisterSystemStore.",
 "CertEnumSystemStore": "Specifies the location of the system store. This parameter can be one of the following flags: CERT_SYSTEM_STORE_CURRENT_USER CERT_SYSTEM_STORE_CURRENT_SERVICE CERT_SYSTEM_STORE_LOCAL_MACHINE CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY CERT_SYSTEM_STORE_SERVICES CERT_SYSTEM_STORE_USERS CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE In addition, the CERT_SYSTEM_STORE_RELOCATE_FLAG can be combined, by using a bitwise-OR operation, with any of the high-word location flags.",
 "CertEnumSystemStoreLocation": "Reserved for future use; must be zero.",
 "CertGetStoreProperty": "A handle of an open certificate store.",
 "CertOpenStore": "A pointer to a null-terminated ANSI string that contains the store provider type. The following values represent the predefined store types. The store provider type determines the contents of the pvPara parameter and the use and meaning of the high word of the dwFlags parameter. Additional store providers can be installed or registered by using the CryptInstallOIDFunctionAddress or CryptRegisterOIDFunction function. For more information about adding store providers, see Extending CertOpenStore Functionality. ValueMeaning CERT_STORE_PROV_COLLECTION sz_CERT_STORE_PROV_COLLECTION Opens a store that will be a collection of other stores. Stores are added to or removed from the collection by using CertAddStoreToCollection and CertRemoveStoreFromCollection. When a store is added to a collection, all certificates, CRLs, and CTLs in that store become available to searches or enumerations of the collection store. The high word of dwFlags is set to zero. pvPara value: The pvPara parameter must be NULL. CERT_STORE_PROV_FILE Initializes the store with certificates, CRLs, and CTLs read from a specified open file. This provider expects the file to contain only a serialized store and not either PKCS #7 signed messages or a single encoded certificate. The file pointer must be positioned at the beginning of the serialized store information. After the data in the serialized store has been loaded into the certificate store, the file pointer is positioned at the beginning of any data that can follow the serialized store data in the file. If CERT_FILE_STORE_COMMIT_ENABLE is set in dwFlags, the file handle is duplicated and the store is always committed as a serialized store. The file is not closed when the store is closed. pvPara value: The pvPara parameter must contain a pointer to the handle of a file opened by using CreateFile. CERT_STORE_PROV_FILENAME_A Initializes the store with certificates, CRLs, and CTLs from a file. The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate. The dwEncodingType parameter must contain the encoding types to be used with both messages and certificates. If the file contains an X.509 encoded certificate, the open operation fails and a call to the GetLastError function will return ERROR_ACCESS_DENIED. If the CERT_FILE_STORE_COMMIT_ENABLE flag is set in dwFlags, the dwCreationDisposition value passed to CreateFile is as follows: If the CERT_STORE_CREATE_NEW_FLAG flag is set, CreateFile uses CREATE_NEW. If the CERT_STORE_OPEN_EXISTING_FLAG flag is set, CreateFile uses OPEN_EXISTING. For all other settings of dwFlags, CreateFile uses OPEN_ALWAYS. If dwFlags includes CERT_FILE_STORE_COMMIT_ENABLE, the file is committed as either a PKCS #7 or a serialized store depending on the file type opened. If the file was empty or if the file name has either a .p7c or .spc extension, the file is committed as a PKCS #7. Otherwise, the file is committed as a serialized store. pvPara value: The pvPara parameter must contain a pointer to null-terminated ANSI string that contains the name of an existing, unopened file. CERT_STORE_PROV_FILENAME(_W) sz_CERT_STORE_PROV_FILENAME(_W) Same as CERT_STORE_PROV_FILENAME_A. pvPara value: The pvPara parameter must contain a pointer to null-terminated Unicode string that contains the name of an existing, unopened file. CERT_STORE_PROV_LDAP(_W) sz_CERT_STORE_PROV_LDAP(_W) Initializes the store with certificates, CRLs, and CTLs from the results of an LDAP query. To perform write operations on the store, the query string must specify a BASE query with no filter and a single attribute. pvPara value: If the dwFlags parameter contains CERT_LDAP_STORE_OPENED_FLAG, set pvPara to the address of a CERT_LDAP_STORE_OPENED_PARA structure that specifies the established LDAP session to use. Otherwise, set pvPara to point to a null-terminated Unicode string that contains the LDAP query string. For more information about LDAP query strings, see LDAP Dialect. CERT_STORE_PROV_MEMORY sz_CERT_STORE_PROV_MEMORY Creates a certificate store in cached memory. No certificates, certificate revocation lists (CRLs), or certificate trust lists (CTLs) are initially loaded into the store. Typically used to create a temporary store. Any addition of certificates, CRLs, or CTLs or changes in properties of certificates, CRLs, or CTLs in a memory store are not automatically saved. They can be saved to a file or to a memory BLOB by using CertSaveStore. pvPara value: The pvPara parameter is not used. CERT_STORE_PROV_MSG Initializes the store with certificates, CRLs, and CTLs from the specified cryptographic message. The dwEncodingType parameter must contain the encoding types used with both messages and certificates. pvPara value: The pvPara parameter contains an HCRYPTMSG handle of the encoded message, returned by a call to CryptMsgOpenToDecode. CERT_STORE_PROV_PHYSICAL(_W) sz_CERT_STORE_PROV_PHYSICAL(_W) Initializes the store with certificates, CRLs, and CTLs from a specified physical store that is a member of a logical system store. Two names are separated with an intervening backslash (\\), for example \"Root\\.Default\". Here, \"Root\" is the name of the system store and \".Default\" is the name of the physical store. The system and physical store names cannot contain any backslashes. The high word of dwFlags indicates the system store location, usually CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic and see System Store Locations. Some physical store locations can be opened remotely. pvPara value: The pvPara parameter points to a null-terminated Unicode string that contains both the system store name and physical names. CERT_STORE_PROV_PKCS7 sz_CERT_STORE_PROV_PKCS7 Initializes the store with certificates, CRLs, and CTLs from an encoded PKCS #7 signed message. The dwEncodingType parameter must specify the encoding types to be used with both messages and certificates. pvPara value: The pvPara parameter points to a CRYPT_DATA_BLOB structure that represents the encoded message. CERT_STORE_PROV_PKCS12 sz_CERT_STORE_PROV_PKCS12 Initializes the store with the contents of a PKCS #12 packet. If the PKCS #12 packet is protected with a NULL or empty password, this function will succeed in opening the store. Beginning with Windows 8 and Windows Server 2012, if the password embedded in the PFX packet was protected to an Active Directory (AD) principal and the current user, as a member of that principal, has permission to decrypt the password, this function will succeed in opening the store. For more information, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function. You can protect PFX passwords to an AD principal beginning in Windows 8 and Windows Server 2012. pvPara value: The pvPara parameter points to a CRYPT_DATA_BLOB structure that represents the PKCS #12 packet. CERT_STORE_PROV_REG Initializes the store with certificates, CRLs, and CTLs from a registry subkey. This provider opens or creates the registry subkeys Certificates, CRLs, and CTLs under the key passed in pvPara. The input key is not closed by the provider. Before returning, the provider opens its own copy of the key passed in pvPara. If CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, registry subkeys are opened by using the RegOpenKey with KEY_READ_ACCESS. Otherwise, registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS. Any changes to the contents of the opened store are immediately persisted to the registry. However, if CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, any attempt to add to the contents of the store or to change a context's property results in an error with GetLastError returning the E_ACCESSDENIED code. pvPara value: The pvPara parameter contains the handle of an open registry key. CERT_STORE_PROV_SERIALIZED sz_CERT_STORE_PROV_SERIALIZED Initializes the store with certificates, CRLs, and CTLs from a memory location that contains a serialized store. pvPara value: The pvPara parameter points to a CRYPT_DATA_BLOB structure that contains the serialized memory BLOB. CERT_STORE_PROV_SMART_CARD(_W) sz_CERT_STORE_PROV_SMART_CARD(_W) Not currently used. CERT_STORE_PROV_SYSTEM_A Initializes the store with certificates, CRLs, and CTLs from the specified system store. The system store is a logical, collection store that consists of one or more physical stores. A physical store associated with a system store is registered with the CertRegisterPhysicalStore function. After the system store is opened, all of the physical stores that are associated with it are also opened by calls to CertOpenStore and are added to the system store collection by using the CertAddStoreToCollection function. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For details about registry locations, see dwFlags later in this topic and System Store Locations. Some system store locations can be opened remotely; for more information, see System Store Locations. pvPara value: The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\". CERT_STORE_PROV_SYSTEM(_W) sz_CERT_STORE_PROV_SYSTEM(_W) Same as CERT_STORE_PROV_SYSTEM_A. pvPara value: The pvPara parameter points to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\". CERT_STORE_PROV_SYSTEM_REGISTRY_A Initializes the store with certificates, CRLs, and CTLs from a physical registry store. The physical store is not opened as a collection store. Enumerations and searches go through only the certificates, CRLs, and CTLs in that one physical store. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic. Some system store locations can be open remotely; for more information, see System Store Locations. pvPara value: The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\". CERT_STORE_PROV_SYSTEM_REGISTRY(_W) sz_CERT_STORE_PROV_SYSTEM_REGISTRY(_W) Same as CERT_STORE_PROV_SYSTEM_REGISTRY_A. pvPara value: The pvPara parameter points to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\".",
 "CertOpenSystemStore": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: A handle of a cryptographic service provider (CSP). Set hProv to NULL to use the default CSP. If hProv is not NULL, it must be a CSP handle created by using the CryptAcquireContext function.This parameter's data type is HCRYPTPROV.",
 "CertRegisterPhysicalStore": "The system store collection to which the physical store is added. This parameter points either to a null-terminated Unicode string or to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on adding a ServiceName or ComputerName before the system store name string, see CertRegisterSystemStore.",
 "CertRegisterSystemStore": "Identifies the system store to be registered. If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the dwFlags parameter, pvSystemStore points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. Otherwise, it points to a null-terminated Unicode string that names the system store. With appropriate settings in dwFlags, the identified store can be a system store on a remote local computer. Stores on remote computers can be registered with the computer name as a prefix to the name of the system store. For example, a remote local computer store can be registered with pvSystemStore pointing to the string \"\\\\ComputerName\\Trust\" or \"ComputerName\\Trust\". Leading \"\\\\\" backslashes are optional before a ComputerName.",
 "CertRemoveStoreFromCollection": "A handle of the collection certificate store.",
 "CertSaveStore": "The handle of the certificate store to be saved.",
 "CertSetStoreProperty": "Handle for the certificate store.",
 "CertUnregisterPhysicalStore": "A pointer to an identifier of the system store collection from which the physical store is to be removed. It is either to a null-terminated Unicode string or to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on appending a ServiceName or ComputerName to the end of the system store name string, see CertRegisterSystemStore.",
 "CertUnregisterSystemStore": "Identifies the system store to be unregistered. It points either to a null-terminated Unicode string or to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on appending a ServiceName or ComputerName to the end of the system store name string, see CertRegisterSystemStore.",
 "CryptUIWizExport": "Contains flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values. Note Except for CRYPTUI_WIZ_NO_UI, none of the following constants are defined in a published header file. To use these constants, you must define them by using the specified values. ValueMeaning CRYPTUI_WIZ_NO_UI 0x0001 This function will perform the export based on the information in the CRYPTUI_WIZ_EXPORT_INFO structure pointed to by pExportInfo without displaying any user interface. If this flag is not specified, this function will display a wizard to guide the user through the export process. CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS 0x0002 Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option. CRYPTUI_WIZ_NO_UI_EXCEPT_CSP 0x0003 Suppress all user interfaces except those generated by CSPs. This option overrides the CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option. CRYPTUI_WIZ_EXPORT_PRIVATE_KEY 0x0100 Skip the Export Private Key page and assume that the private key is to be exported. CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY 0x0200 Disable the Delete the private key check box in the Export File Format page.",
 "CryptUIWizImport": "Contains flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values. Note Except for CRYPTUI_WIZ_NO_UI, none of the following constants are defined in a published header file. To use these constants, you must define them by using the specified values. ValueMeaning CRYPTUI_WIZ_NO_UI 0x0001 This function will perform the import based on the information in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure pointed to by pImportSrc into the store specified by hDestCertStore without displaying any user interface. If this flag is not specified, this function will display a wizard to guide the user through the import process. Beginning with Windows 8 and Windows Server 2012, if you set this flag and are importing a certificate from a PFX BLOB that was protected to an Active Directory (AD) principal, and the current user, as part of that principal, has permission to decrypt the password embedded in the PFX packet, the importation will succeed without requiring that a password be set in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure. For more information about protecting PFX to an AD principal, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function. CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS 0x0002 Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option. CRYPTUI_WIZ_NO_UI_EXCEPT_CSP 0x0003 Suppress all user interfaces except those generated by CSPs. This option overrides the CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option. CRYPTUI_WIZ_IMPORT_ALLOW_CERT 0x00020000 Allow certificates to be imported. CRYPTUI_WIZ_IMPORT_ALLOW_CRL 0x00040000 Allow CRLs to be imported. CRYPTUI_WIZ_IMPORT_ALLOW_CTL 0x00080000 Allow CTLs to be imported. CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE 0x00010000 Do not allow the user to change the destination certificate store represented by the hDestCertStore parameter. CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE 0x00100000 Import the object to the certificate store for the local computer. This applies only to Personal Information Exchange (PFX) imports. CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER 0x00200000 Import the object to the certificate store for the current user. This applies only to PFX imports. CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE 0x00400000 Import the object to a remote certificate store. Set this flag if the hDestCertStore parameter represents a remote certificate store.",
 "CertAddSerializedElementToStore": "The handle of a certificate store where the created certificate will be stored. If hCertStore is NULL, the function creates a copy of a certificate, CRL, or CTL context with its extended properties, but the certificate, CRL, or CTL is not persisted in any store.",
 "CertCreateContext": "Specifies the contexts that can be created. For example, to create a certificate context, set dwContextType to CERT_STORE_CERTIFICATE_CONTEXT. \t\t\t\t\t\t Currently defined context type flags are shown in the following table. ValueMeaning CERT_STORE_CERTIFICATE_CONTEXT Certificate context. CERT_STORE_CRL_CONTEXT CRL context. CERT_STORE_CTL_CONTEXT CTL context.",
 "CertEnumSubjectInSortedCTL": "A pointer to the CTL_CONTEXT structure to be searched.",
 "CertFindSubjectInCTL": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CertFindSubjectInSortedCTL": "A pointer to a CRYPT_DATA_BLOB structure uniquely identifying the subject. The information in this structure can be a hash or any unique byte sequence.",
 "OpenPersonalTrustDBDialog": "The handle of the parent window for the dialog box. If this parameter is NULL, the dialog box has no parent.",
 "OpenPersonalTrustDBDialogEx": "The handle of the parent window for the dialog box. If this parameter is NULL, the dialog box has no parent.",
 "CertAddCertificateContextToStore": "Handle of a certificate store.",
 "CertAddCertificateLinkToStore": "A handle to the certificate store where the link is to be added.",
 "CertAddEncodedCertificateToStore": "A handle to the certificate store.",
 "CertAddRefServerOcspResponse": "A handle to an HCERT_SERVER_OCSP_RESPONSE returned by CertOpenServerOcspResponse.",
 "CertAddRefServerOcspResponseContext": "A pointer to a CERT_SERVER_OCSP_RESPONSE_CONTEXT returned by CertGetServerOcspResponseContext.",
 "CertCloseServerOcspResponse": "The handle to close for an OCSP server response.",
 "CertCreateCertificateContext": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertCreateSelfSignCertificate": "A handle of a cryptographic provider used to sign the certificate created. If NULL, information from the pKeyProvInfo parameter is used to acquire the needed handle. If pKeyProvInfo is also NULL, the default provider type, PROV_RSA_FULL provider type, the default key specification, AT_SIGNATURE, and a newly created key container with a unique container name are used. This handle must be an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG cryptographic service provider (CSP).",
 "CertDeleteCertificateFromStore": "A pointer to the CERT_CONTEXT structure to be deleted.",
 "CertDuplicateCertificateContext": "A pointer to the CERT_CONTEXT structure for which the reference count is incremented.",
 "CertEnumCertificatesInStore": "A handle of a certificate store.",
 "CertFindCertificateInStore": "A handle of the certificate store to be searched.",
 "CertFreeCertificateContext": "A pointer to the CERT_CONTEXT to be freed.",
 "CertGetIssuerCertificateFromStore": "Handle of a certificate store.",
 "CertGetServerOcspResponseContext": "The OCSP server response handle for which to retrieve a response context. This handle is returned by the CertOpenServerOcspResponse function.",
 "CertGetSubjectCertificateFromStore": "A handle of a certificate store.",
 "CertGetValidUsages": "The number of certificates in the array to be checked.",
 "CertOpenServerOcspResponse": "The address of a CERT_CHAIN_CONTEXT structure that contains the certificate chain.",
 "CertRetrieveLogoOrBiometricInfo": "The address of a CERT_CONTEXT structure that contains the certificate.",
 "CertSelectCertificate": "A pointer to a CERT_SELECT_STRUCT structure that contains criteria that control the displayed certificates for selection and receives the selected certificate.",
 "CertSelectCertificateChains": "A pointer to the GUID of the certificate selection scenario to use for this call.",
 "CertSelectionGetSerializedBlob": "A pointer to a CERT_SELECTUI_INPUT structure that contains the certificate store and certificate context chain information.",
 "CertSerializeCertificateStoreElement": "A pointer to the CERT_CONTEXT to be serialized.",
 "CertVerifySubjectCertificateContext": "A pointer to a CERT_CONTEXT structure containing the subject's certificate.",
 "CryptUIDlgCertMgr": "A pointer to a CRYPTUI_CERT_MGR_STRUCT structure that contains information about how to create the dialog box.",
 "CryptUIDlgSelectCertificate": "A pointer to a CRYPTUI_SELECTCERTIFICATE_STRUCT structure that contains information about the dialog box to display.",
 "CryptUIDlgSelectCertificateFromStore": "Handle of the certificate store to be searched.",
 "CryptUIDlgViewCertificate": "A pointer to a CRYPTUI_VIEWCERTIFICATE_STRUCT structure that contains information about the certificate to view.",
 "CryptUIDlgViewContext": "DWORD indicating whether pvContext is a pointer to a certificate, a CRL, or a CTL context as indicated in the following table. \t\t\t\t\t ValueMeaning CERT_STORE_CERTIFICATE_CONTEXT PCCERT_CONTEXT CERT_STORE_CRL_CONTEXT PCCRL_CONTEXT CERT_STORE_CTL_CONTEXT PCCTL_CONTEXT",
 "CryptUIDlgViewSignerInfo": "A pointer to a CRYPTUI_VIEWSIGNERINFO_STRUCT structure that contains the signer information to display.",
 "GetFriendlyNameOfCert": "A pointer to the certificate context whose display name is being retrieved.",
 "RKeyCloseKeyService": "A KEYSVCC_HANDLE handle previously opened by RKeyOpenKeyService. This value cannot be NULL.",
 "RKeyOpenKeyService": "Long pointer to a null-terminated string that represents the computer where the key service handle will be opened.",
 "RKeyPFXInstall": "A KEYSVCC_HANDLE handle previously opened by RKeyOpenKeyService. The handle represents the remote computer that will receive the certificate. This value cannot be NULL.",
 "CertAddCRLContextToStore": "Handle of a certificate store.",
 "CertAddCRLLinkToStore": "Handle of a certificate store where the link is to be added.",
 "CertAddEncodedCRLToStore": "Handle of a certificate store.",
 "CertCreateCRLContext": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertDeleteCRLFromStore": "A pointer to the CRL_CONTEXT structure to be deleted.",
 "CertDuplicateCRLContext": "A pointer to the CRL_CONTEXT structure for which the reference count is being incremented.",
 "CertEnumCRLsInStore": "Handle of a certificate store.",
 "CertFindCertificateInCRL": "A pointer to a CERT_CONTEXT of the certificate to be searched for in the CRL.",
 "CertFindCRLInStore": "A handle of the certificate store to be searched.",
 "CertFreeCRLContext": "A pointer to the CRL_CONTEXT to be freed.",
 "CertGetCRLFromStore": "Handle of a certificate store.",
 "CertSerializeCRLStoreElement": "A pointer to the CRL_CONTEXT structure being serialized.",
 "CertAddCTLContextToStore": "Handle of a certificate store.",
 "CertAddCTLLinkToStore": "Handle of the certificate store where the link is to be added.",
 "CertAddEncodedCTLToStore": "Handle of a certificate store.",
 "CertCreateCTLContext": "Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertDeleteCTLFromStore": "A pointer to the CTL_CONTEXT structure to be deleted.",
 "CertDuplicateCTLContext": "A pointer to the CTL_CONTEXT structure for which the reference count is being incremented.",
 "CertEnumCTLsInStore": "Handle of a certificate store.",
 "CertFindCTLInStore": "Handle of the certificate store to be searched.",
 "CertFreeCTLContext": "A pointer to the CTL_CONTEXT to be freed.",
 "CertModifyCertificatesToTrust": "The number of modification requests that are in the rgCerts parameter.",
 "CertSerializeCTLStoreElement": "A pointer to the CTL_CONTEXT structure being serialized.",
 "CertEnumCertificateContextProperties": "A pointer to the CERT_CONTEXT structure of the certificate containing the properties to be enumerated.",
 "CertEnumCRLContextProperties": "A pointer to a CRL_CONTEXT structure.",
 "CertEnumCTLContextProperties": "A pointer to a CTL_CONTEXT structure.",
 "CertGetCertificateContextProperty": "A pointer to the CERT_CONTEXT structure of the certificate that contains the property to be retrieved.",
 "CertGetCRLContextProperty": "A pointer to the CRL_CONTEXT structure.",
 "CertGetCTLContextProperty": "A pointer to the CTL_CONTEXT structure.",
 "CertSetCertificateContextProperty": "A pointer to a CERT_CONTEXT structure.",
 "CertSetCRLContextProperty": "A pointer to the CRL_CONTEXT structure.",
 "CertSetCTLContextProperty": "A pointer to the CTL_CONTEXT structure.",
 "FreeCryptProvFromCert": "A value that specifies whether the provider handle was acquired from the certificate.",
 "GetCryptProvFromCert": "The handle of the window to use as the owner of any dialog boxes that are displayed. This member is not currently used and is ignored. It is safe to pass NULL for this parameter.",
 "PvkFreeCryptProv": "A handle to the CSP.",
 "PvkGetCryptProv": "If a password is required to decrypt the private key file, this parameter is a handle to the parent of the password dialog box; otherwise, it is NULL.",
 "PvkPrivateKeyAcquireContextFromMemory": "A pointer to a null-terminated string that contains the name of the CSP whose type is requested in dwProvType.",
 "PvkPrivateKeySave": "A handle to a cryptographic service provider (CSP).",
 "CertVerifyCTLUsage": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types can be added in the future. For either current encoding type, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CryptMsgEncodeAndSignCTL": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CryptMsgGetAndVerifySigner": "Handle of a cryptographic message.",
 "CryptMsgSignCTL": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertCreateCertificateChainEngine": "A pointer to a CERT_CHAIN_ENGINE_CONFIG data structure that specifies the parameters for the chain engine.",
 "CertCreateCTLEntryFromCertificateContextProperties": "A pointer to the CERT_CONTEXT used to create the CTL.",
 "CertDuplicateCertificateChain": "A pointer to a CERT_CHAIN_CONTEXT chain context to be duplicated.",
 "CertFindChainInStore": "The handle of the store to be searched for a certificate upon which a chain is built. This handle is passed as an additional store to the CertGetCertificateChain function as the chain is built.",
 "CertFreeCertificateChain": "A pointer to a CERT_CHAIN_CONTEXT certificate chain context to be freed. If the reference count on the context reaches zero, the storage allocated for the context is freed.",
 "CertFreeCertificateChainEngine": "Handle of the chain engine to be freed.",
 "CertFreeCertificateChainList": "A pointer to a PCCERT_CHAIN_CONTEXT structure returned by the CertSelectCertificateChains function.",
 "CertGetCertificateChain": "A handle of the chain engine (namespace and cache) to be used. If hChainEngine is NULL, the default chain engine, HCCE_CURRENT_USER, is used. This parameter can be set to HCCE_LOCAL_MACHINE.",
 "CertIsValidCRLForCertificate": "A pointer to a certificate context.",
 "CertSetCertificateContextPropertiesFromCTLEntry": "A pointer to the CERT_CONTEXT whose attributes are to be set.",
 "CertVerifyCertificateChainPolicy": "Current predefined verify chain policy structures are listed in the following table. ...",
 "CryptMsgCalculateEncodedLength": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CryptMsgClose": "Handle of the cryptographic message to be closed.",
 "CryptMsgControl": "A handle of a cryptographic message for which a control is to be applied.",
 "CryptMsgUpdate": "Cryptographic message handle of the message to be updated.",
 "CryptMsgCountersign": "Cryptographic message handle to be used.",
 "CryptMsgCountersignEncoded": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CryptMsgDuplicate": "Handle of the cryptographic message to be duplicated. Duplication is done by incrementing the reference count of the message. A copy of the message is not made.",
 "CryptMsgGetParam": "Handle of a cryptographic message.",
 "CryptMsgOpenToDecode": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CryptMsgOpenToEncode": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CryptMsgVerifyCountersignatureEncoded": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: NULL or the handle of the cryptographic provider to use to hash the encryptedDigest field of pbSignerInfo.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, pass NULL to cause the default RSA or DSS provider to be used.",
 "CryptMsgVerifyCountersignatureEncodedEx": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: NULL or the handle of the cryptographic provider to use to hash the encryptedDigest field of pbSignerInfo.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, pass NULL to cause the default RSA or DSS provider to be used.",
 "CryptDecodeMessage": "Indicates the message type. Message types can be combined with the bitwise-OR operator. This parameter can be one of the following message types: CMSG_DATA_FLAG CMSG_SIGNED_FLAG CMSG_ENVELOPED_FLAG CMSG_SIGNED_AND_ENVELOPED_FLAG CMSG_HASHED_FLAG Note After return, the DWORD pointed to by pdwMsgType is set with the type of the message.",
 "CryptDecryptAndVerifyMessageSignature": "A pointer to a CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters.",
 "CryptDecryptMessage": "A pointer to a CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters.",
 "CryptEncryptMessage": "A pointer to a CRYPT_ENCRYPT_MESSAGE_PARA structure that contains the encryption parameters. The CryptEncryptMessage function does not support the SHA2 OIDs, szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF and szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF.",
 "CryptGetMessageCertificates": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CryptGetMessageSignerCount": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CryptHashMessage": "A pointer to a CRYPT_HASH_MESSAGE_PARA structure that contains the hash parameters.",
 "CryptSignAndEncryptMessage": "A pointer to a CRYPT_SIGN_MESSAGE_PARA structure that contains the signature parameters.",
 "CryptSignMessageWithKey": "A pointer to a CRYPT_KEY_SIGN_MESSAGE_PARA structure that contains the signature parameters.",
 "CryptSignMessage": "A pointer to CRYPT_SIGN_MESSAGE_PARA structure containing the signature parameters.",
 "CryptVerifyDetachedMessageHash": "A pointer to a CRYPT_HASH_MESSAGE_PARA structure containing the hash parameters.",
 "CryptVerifyDetachedMessageSignature": "A pointer to a CRYPT_VERIFY_MESSAGE_PARA structure containing the verification parameters.",
 "CryptVerifyMessageHash": "A pointer to a CRYPT_HASH_MESSAGE_PARA structure containing hash parameters.",
 "CryptVerifyMessageSignature": "A pointer to a CRYPT_VERIFY_MESSAGE_PARA structure that contains verification parameters.",
 "CryptVerifyMessageSignatureWithKey": "A pointer to a CRYPT_KEY_VERIFY_MESSAGE_PARA structure that contains verification parameters.",
 "CertCompareCertificate": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertCompareCertificateName": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertCompareIntegerBlob": "A pointer to a CRYPT_INTEGER_BLOB structure that contains the first integer in the comparison.",
 "CertComparePublicKeyInfo": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertFindAttribute": "A pointer to the object identifier (OID) to use in the search.",
 "CertFindExtension": "A pointer to the object identifier (OID) to use in the search.",
 "CertFindRDNAttr": "A pointer to the object identifier (OID) to use In the search.",
 "CertGetIntendedKeyUsage": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertGetPublicKeyLength": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertIsRDNAttrsInCertificateName": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertIsStrongHashToSign": "Pointer to a CERT_STRONG_SIGN_PARA structure that contains information about supported signing and hashing algorithms.",
 "CertVerifyCRLRevocation": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CertVerifyCRLTimeValidity": "A pointer to FILETIME structure containing the time to be used in the verification. If set to NULL, the current time is used.",
 "CertVerifyRevocation": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CertVerifyTimeValidity": "A pointer to a FILETIME structure containing the comparison time. If NULL, the current time is used.",
 "CertVerifyValidityNesting": "A pointer to the CERT_INFO structure of the subject certificate.",
 "CryptExportPKCS8": "An HCRYPTPROV variable that contains the cryptographic service provider (CSP). This is a handle to the CSP obtained by calling CryptAcquireContext.",
 "CryptExportPKCS8Ex": "A pointer to a CRYPT_PKCS8_EXPORT_PARAMS structure that contains information about the key to export.",
 "CryptExportPublicKeyInfo": "Handle of the cryptographic service provider (CSP) to use when exporting the public key information. This handle must be an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG CSP.",
 "CryptExportPublicKeyInfoEx": "A handle of the CSP to use when exporting the public key information. This handle must be an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG CSP.",
 "CryptExportPublicKeyInfoFromBCryptKeyHandle": "The handle of the key from which to export the public key information.",
 "CryptFindCertificateKeyProvInfo": "A pointer to the CERT_CONTEXT structure of the certificate to use when exporting public key information.",
 "CryptFindLocalizedName": "A pointer to a specified name. An internal table is searched to compare a predefined localized name to the specified name. The search matches the localized name by using a case insensitive string comparison. Note Localized names for the predefined system stores (\"Root\", \"My\") and predefined physical stores (\".Default\", \".LocalMachine\") are preinstalled as resource strings in Crypt32.dll.",
 "CryptHashCertificate": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: A handle of the cryptographic service provider (CSP) to use to compute the hash. This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific CSP in hCryptProv, zero is passed in. Passing in zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature verification, or recipient encryption operations.",
 "CryptHashCertificate2": "The address of a null-terminated Unicode string that contains the CNG hash algorithm identifier of the hash algorithm to use to hash the certificate. This can be one of the CNG Algorithm Identifiers that represents a hash algorithm or any other registered hash algorithm identifier.",
 "CryptHashPublicKeyInfo": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: A handle of the cryptographic service provider (CSP) to use to compute the hash.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, zero is passed in. Passing in zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature verification, or recipient encryption operations.",
 "CryptHashToBeSigned": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: A handle of the cryptographic service provider (CSP) to use to compute the hash.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, zero is passed in. Passing in zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature verification, or recipient encryption operations.",
 "CryptImportPKCS8": "A CRYPT_PKCS8_IMPORT_PARAMS structure that contains the private key BLOB and corresponding parameters.",
 "CryptImportPublicKeyInfo": "The handle of the cryptographic service provider (CSP) to use when importing the public key. This handle must have already been created using CryptAcquireContext.",
 "CryptImportPublicKeyInfoEx": "The handle of the CSP to receive the imported public key. This handle must have already been created using CryptAcquireContext.",
 "CryptImportPublicKeyInfoEx2": "The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function. This parameter can be the following currently defined certificate encoding type. ValueMeaning X509_ASN_ENCODING 1 (0x1) Specifies X.509 certificate encoding.",
 "CryptMemAlloc": "Number of bytes to be allocated.",
 "CryptMemFree": "A pointer to the buffer to be freed.",
 "CryptMemRealloc": "A pointer to a currently allocated buffer.",
 "CryptQueryObject": "Indicates the type of the object to be queried. This must be one of the following values. ValueMeaning CERT_QUERY_OBJECT_BLOB The object is stored in a structure in memory. CERT_QUERY_OBJECT_FILE The object is stored in a file.",
 "CryptSignAndEncodeCertificate": "A handle of the cryptographic service provider (CSP) to do the signature. This handle is an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in a NCRYPT_KEY_HANDLE handle of a CNG CSP.",
 "CryptSignCertificate": "Handle of the CSP that does the signature. This handle must be an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG CSP.",
 "CryptSIPAddProvider": "A pointer to a SIP_ADD_NEWPROVIDER structure that specifies the DLL file and function names to register.",
 "CryptSIPCreateIndirectData": "A pointer to a SIP_SUBJECTINFO structure that contains the subject to which the indirect data reference will point.",
 "CryptSIPGetCaps": "Pointer to a SIP_SUBJECTINFO structure that specifies subject information data to the SIP APIs.",
 "CryptSIPGetSignedDataMsg": "A pointer to a SIP_SUBJECTINFO structure that contains information about the message subject.",
 "CryptSIPLoad": "A pointer to a GUID returned by calling the CryptSIPRetrieveSubjectGuid function.",
 "CryptSIPPutSignedDataMsg": "Pointer to a SIP_SUBJECTINFO structure that contains information about the message subject.",
 "CryptSIPRemoveProvider": "A pointer to the GUID that identifies the SIP DLL to remove.",
 "CryptSIPRemoveSignedDataMsg": "A pointer to a SIP_SUBJECTINFO structure that contains information about the message subject.",
 "CryptSIPRetrieveSubjectGuid": "The name of the file.",
 "CryptSIPRetrieveSubjectGuidForCatalogFile": "The name of the file. If the hFileIn parameter is set, the value in this parameter is ignored.",
 "CryptSIPVerifyIndirectData": "A pointer to a SIP_SUBJECTINFO structure that contains information about the message subject.",
 "CryptUpdateProtectedState": "The address of a SID structure that contains the user's previous SID. This SID is used to locate the old master keys. If this parameter is NULL, the master keys for the current user SID are migrated. Either this parameter or the pwszOldPassword parameter may be NULL, but not both.",
 "CryptVerifyCertificateSignature": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: A handle to the cryptographic service provider (CSP) used to verify the signature.This parameter's data type is HCRYPTPROV. NULL is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in NULL causes the default RSA or DSS provider to be acquired.",
 "CryptVerifyCertificateSignatureEx": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP: A handle to the cryptographic service provider used to verify the signature.This parameter's data type is HCRYPTPROV. NULL is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in NULL causes the default RSA or DSS provider to be acquired.",
 "GetEncSChannel": "A pointer to a pointer to bytes that receive the encrypted Schannel contents. When you have finished using the Schannel contents, free pData by calling the VirtualFree function.",
 "pCryptSIPGetCaps pointer": "Pointer to a SIP_SUBJECTINFO structure that specifies subject information data to the SIP APIs.",
 "CertAlgIdToOID": "Value to be converted to an OID.",
 "CertGetNameString": "A pointer to a CERT_CONTEXT certificate context that includes a subject and issuer name to be converted.",
 "CertNameToStr": "The certificate encoding type that was used to encode the name. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function. This parameter can be the following currently defined certificate encoding type. ValueMeaning X509_ASN_ENCODING 1 (0x1) Specifies X.509 certificate encoding.",
 "CertOIDToAlgId": "Pointer to the ASN.1 OID to be converted to an algorithm identifier.",
 "CertRDNValueToStr": "Indicates the kind of RDN value to be converted. This can be one of the following values: CERT_RDN_ANY_TYPE CERT_RDN_ENCODED_BLOB CERT_RDN_OCTET_STRING CERT_RDN_NUMERIC_STRING CERT_RDN_PRINTABLE_STRING CERT_RDN_TELETEX_STRING CERT_RDN_T61_STRING CERT_RDN_VIDEOTEX_STRING CERT_RDN_IA5_STRING CERT_RDN_GRAPHIC_STRING CERT_RDN_VISIBLE_STRING CERT_RDN_ISO646_STRING CERT_RDN_GENERAL_STRING CERT_RDN_UNIVERSAL_STRING CERT_RDN_INT4_STRING CERT_RDN_BMP_STRING CERT_RDN_UNICODE_STRING CERT_RDN_UTF8_STRING",
 "CertStrToName": "The certificate encoding type that was used to encode the string. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function. This parameter can be the following currently defined certificate encoding type. ValueMeaning X509_ASN_ENCODING 1 (0x1) Specifies X.509 certificate encoding.",
 "CryptBinaryToString": "A pointer to the array of bytes to be converted into a string.",
 "CryptFormatObject": "Type of encoding used on the certificate. The currently defined certificate encoding type used is X509_ASN_ENCODING.",
 "CryptStringToBinary": "A pointer to a string that contains the formatted string to be converted.",
 "CertAddEnhancedKeyUsageIdentifier": "A pointer to the CERT_CONTEXT of the certificate for which the usage identifier is to be added.",
 "CertGetEnhancedKeyUsage": "A pointer to a CERT_CONTEXT certificate context.",
 "CertRemoveEnhancedKeyUsageIdentifier": "A pointer to a CERT_CONTEXT of the certificate for which the usage identifier OID is to be removed.",
 "CertSetEnhancedKeyUsage": "A pointer to the CERT_CONTEXT of the specified certificate.",
 "CryptCreateKeyIdentifierFromCSP": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "CryptEnumKeyIdentifierProperties": "A pointer to a CRYPT_HASH_BLOB structure that contains the key identifier. If pKeyIdentifier is NULL, the function enumerates all key identifiers. If pKeyIdentifier is not NULL, the callback function pfnEnum is only called for the specified key identifier.",
 "CryptGetKeyIdentifierProperty": "A pointer to the CRYPT_HASH_BLOB that contains the key identifier.",
 "CryptSetKeyIdentifierProperty": "A pointer to a CRYPT_HASH_BLOB containing the key identifier.",
 "CryptEnumOIDFunction": "Specifies the encoding type to match. Setting this parameter to CRYPT_MATCH_ANY_ENCODING_TYPE matches any encoding type. Note that if CRYPT_MATCH_ANY_ENCODING_TYPE is not specified, either a certificate or message encoding type is required. If the low-order word that contains the certificate encoding type is nonzero, it is used; otherwise, the high-order word that contains the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used. Currently defined encoding types are: CRYPT_ASN_ENCODING X509_ASN_ENCODING PKCS_7_ASN_ENCODING CRYPT_MATCH_ANY_ENCODING_TYPE",
 "CryptEnumOIDInfo": "Indicates which OID groups to be matched. Setting dwGroupId to zero matches all groups. If dwGroupId is greater than zero, only the OID entries in the specified group are enumerated. The currently defined OID group IDs are: CRYPT_HASH_ALG_OID_GROUP_ID CRYPT_ENCRYPT_ALG_OID_GROUP_ID CRYPT_PUBKEY_ALG_OID_GROUP_ID CRYPT_SIGN_ALG_OID_GROUP_ID CRYPT_RDN_ATTR_OID_GROUP_ID CRYPT_EXT_OR_ATTR_OID_GROUP_ID CRYPT_ENHKEY_USAGE_OID_GROUP_ID CRYPT_POLICY_OID_GROUP_ID CRYPT_TEMPLATE_OID_GROUP_ID CRYPT_KDF_OID_GROUP_IDWindows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: The CRYPT_KDF_OID_GROUP_ID value is not supported. CRYPT_LAST_OID_GROUP_ID CRYPT_FIRST_ALG_OID_GROUP_ID CRYPT_LAST_ALG_OID_GROUP_ID",
 "CryptFindOIDInfo": "Specifies the key type to use when finding OID information. This parameter can be one of the following key types. CRYPT_OID_INFO_OID_KEY pvKey is the address of a null-terminated ANSI string that contains the OID string to find. CRYPT_OID_INFO_NAME_KEY pvKey is the address of a null-terminated Unicode string that contains the name to find. CRYPT_OID_INFO_ALGID_KEY pvKey is the address of an ALG_ID \t\t\t\t\t\t\tvariable. The following ALG_IDs are supported: Hash Algorithms: CALG_SHA1 CALG_MD5 CALG_MD4 CALG_MD2 Symmetric Encryption Algorithms: CALG_DES CALG_3DES CALG_RC2 CALG_RC4 Public Key Algorithms: CALG_DSS_SIGN CALG_DH_SF CALG_DH_EPHEM CALG_RSA_KEYX CALG_RSA_SIGN CALG_NO_SIGN Algorithms that are not listed are supported by using Cryptography API: Next Generation (CNG) only; instead, use CRYPT_OID_INFO_CNG_ALGID_KEY. CRYPT_OID_INFO_SIGN_KEY pvKey is the address of an array of two ALG_IDs where the first element contains the hash algorithm identifier and the second element contains the public key algorithm identifier. The following ALG_ID combinations are supported. Signature algorithm identifierHash algorithm identifier CALG_RSA_SIGN CALG_SHA1 CALG_MD5 CALG_MD4 CALG_MD2 CALG_DSS_SIGN CALG_SHA1 CALG_NO_SIGN CALG_SHA1 CALG_NO_SIGN Algorithms that are not listed are supported through CNG only; instead, use CRYPT_OID_INFO_CNG_SIGN_KEY. CRYPT_OID_INFO_CNG_ALGID_KEY pvKey is the address of a null-terminated Unicode string that contains the CNG algorithm identifier to find. This can be one of the predefined CNG Algorithm Identifiers or another registered algorithm identifier. Windows Server 2003 R2 and Windows Server 2003: This key type is not supported. CRYPT_OID_INFO_CNG_SIGN_KEY pvKey is the address of an array of two null-terminated Unicode string pointers where the first string contains the hash CNG algorithm identifier and the second string contains the public key CNG algorithm identifier. These can be from the predefined CNG Algorithm Identifiers or another registered algorithm identifier. Windows Server 2003 R2 and Windows Server 2003: This key type is not supported. Optionally, the following key types can be specified in the dwKeyType parameter by using the logical OR operator (|). ValueMeaning CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag. CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.",
 "CryptFreeOIDFunctionAddress": "Handle of the function previously obtained from a call to CryptGetOIDFunctionAddress or CryptGetDefaultOIDFunctionAddress.",
 "CryptGetOIDFunctionAddress": "The function set handle previously obtained from a call to the CryptInitOIDFunctionSet function.",
 "CryptGetDefaultOIDFunctionAddress": "Function set handle previously obtained from a call to CryptInitOIDFunctionSet.",
 "CryptGetDefaultOIDDllList": "Function set handle previously obtained by a call to CryptInitOIDFunctionSet.",
 "CryptGetOIDFunctionValue": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CryptInitOIDFunctionSet": "Name of the OID function set.",
 "CryptInstallOIDFunctionAddress": "This parameter is updated with the hModule parameter passed to DllMain to prevent the DLL that contains the function addresses from being unloaded by CryptGetOIDFunctionAddress or CryptFreeOIDFunctionAddress. This would be the case when the DLL has also registered OID functions through CryptRegisterOIDFunction.",
 "CryptRegisterDefaultOIDFunction": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CryptRegisterOIDFunction": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CryptRegisterOIDInfo": "A pointer to a CRYPT_OID_INFO structure with the OID information to register. Specify the group that the OID information is to be registered for by setting the dwGroupId member of the structure. Note When registering OID information for Suite B algorithms implemented with Cryptography API: Next Generation (CNG), you must set the Algid member of the CRYPT_OID_INFO structure to CALG_OID_INFO_CNG_ONLY (0xFFFFFFFF).",
 "CryptSetOIDFunctionValue": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CryptUnregisterDefaultOIDFunction": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.",
 "CryptUnregisterOIDFunction": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING For functions that do not use an encoding type, set this parameter to zero.",
 "CryptUnregisterOIDInfo": "Specifies the object identifier (OID) information for which the registration is to be removed. The group that the registration is removed for is specified by the dwGroupId member in the pInfo.",
 "CryptGetObjectUrl": "A pointer to an object identifier (OID) that identifies the URL being requested. If the HIWORD of the pszUrlOid parameter is zero, the LOWORD specifies the integer identifier for the type of the specified structure. This parameter can be one of the following values. For information about how these values affect the pvPara parameter, see the heading \"For the pvPara parameter\" in the Meaning column. ValueMeaning URL_OID_CERTIFICATE_ISSUER Provides the URL of the certificate issuer retrieved from the authority information access extension or property of a certificate. For the pvPara parameter: A pointer to a CERT_CONTEXT structure that was issued by the issuer whose URL is being requested. URL_OID_CERTIFICATE_CRL_DIST_POINT Provides a list of URLs of the CRL distribution points retrieved from the CRL distribution point extension or property of a certificate. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose CRL distribution point is requested. URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point extensions or properties of a certificate. The function returns any CRL distribution point URLs first. Before using any OCSP URLs, you must remove the L\"ocsp:\" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP and CRL distribution point URLs are requested. URL_OID_CERTIFICATE_OCSP Provides an OCSP URL from the authority information access (AIA) extension or property of a certificate. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP URL is requested. URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point extensions or properties of a certificate. The function returns any OCSP URLs first. Before using any OCSP URLs, you must remove the L\"ocsp:\" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP and CRL distribution point URLs are requested. URL_OID_CERTIFICATE_ONLY_OCSP Provides a list of OCSP URLs from the authority information access (AIA) extension or property of a certificate. Before using any OCSP URLs, you must remove the L\"ocsp:\" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP URLs are requested. URL_OID_CTL_ISSUER Provides the URL of the CTL issuer retrieved from an authority information access attribute method encoded in each signer information in the PKCS #7 CTL. For the pvPara parameter: A pointer to a Signer Index CTL_CONTEXT structure that was issued by the issuer whose URL, identified by the signer index, is requested. URL_OID_CTL_NEXT_UPDATE Provides the URL of the next update of that CTL retrieved from an authority information access CTL extension, property, or signer information attribute method. For the pvPara parameter: A pointer to a Signer Index CTL_CONTEXT structure whose next update URL is requested, and an optional signer index, in case it is needed to check the signer information attributes. URL_OID_CRL_ISSUER Provides the URL of the CRL issuer retrieved from a property on a CRL that was inherited from the subject certificate (either from the subject certificate issuer or the subject certificate distribution point extension). It is encoded as an authority information access extension method. For the pvPara parameter: A pointer to a CRL_CONTEXT structure that was issued by the issuer whose URL is requested. URL_OID_CERTIFICATE_FRESHEST_CRL Retrieves the most recent CRL extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a certificate whose most recent CRL distribution point is being requested. URL_OID_CRL_FRESHEST_CRL Retrieves the most recent CRL extension or property of the CRL. For the pvPara parameter: A pointer to a CERT_CRL_CONTEXT_PAIR structure that contains the base CRL of a certificate whose most recent CRL distribution point is being requested. URL_OID_CROSS_CERT_DIST_POINT Retrieves the cross certificate distribution point extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a certificate whose cross certificate distribution point is being requested. URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS Retrieves the cross certificate Subject Information Access extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a certificate whose cross certificate Subject Information Access is being requested.",
 "CryptRetrieveObjectByUrl": "The address of a PKI object to be retrieved. The following schemes are supported: ldap (Lightweight Directory Access Protocol) http https (certificate revocation list (CRL) or online certificate status protocol (OCSP) retrievals only) file",
 "PFXExportCertStore": "Handle of the certificate store containing the certificates to be exported.",
 "PFXExportCertStoreEx": "Handle of the certificate store containing the certificates to be exported.",
 "PFXImportCertStore": "A pointer to a CRYPT_DATA_BLOB structure that contains a PFX packet with the exported and encrypted certificates and keys.",
 "PFXIsPFXBlob": "A pointer to a CRYPT_DATA_BLOB structure that the function will attempt to decode as a PFX packet.",
 "PFXVerifyPassword": "A pointer to a CRYPT_DATA_BLOB structure that the function will attempt to decode as a PFX packet.",
 "OffloadModExpo": "A pointer to the base value to be raised by the exponent. The value is in little-endian form and the length (number of bytes in the value) must be the length passed in cbMod. The value must be padded with 0x00 bytes if the most significant byte does not have a bit set. This value must be less than the value passed in the pbMod parameter.",
 "CertSrvBackupClose": "A handle to a Certificate Services backup context.",
 "CertSrvBackupEnd": "A handle to a Certificate Services backup context.",
 "CertSrvBackupFree": "A pointer to the memory to be freed.",
 "CertSrvBackupGetBackupLogs": "A handle to a Certificate Services backup context.",
 "CertSrvBackupGetDatabaseNames": "A handle to a Certificate Services backup context.",
 "CertSrvBackupGetDynamicFileList": "A handle to a Certificate Services backup context.",
 "CertSrvBackupOpenFile": "A handle to a Certificate Services backup context.",
 "CertSrvBackupPrepare": "A pointer to the machine name of the server to prepare for online backup. This name can be the NetBIOS name or the DNS name.",
 "CertSrvBackupRead": "A handle to a Certificate Services backup context.",
 "CertSrvBackupTruncateLogs": "A handle to a Certificate Services backup context.",
 "CertSrvIsServerOnline": "A pointer to the NetBIOS or DNS machine name of the server to check for online status.",
 "CertSrvRestoreEnd": "A handle to a Certificate Services backup context.",
 "CertSrvRestoreGetDatabaseLocations": "A handle to a Certificate Services backup or restore context.",
 "CertSrvRestorePrepare": "A pointer to the computer name of the server to prepare for restore operations. This name can be the NetBIOS name or the DNS name.",
 "CertSrvRestoreRegister": "A handle to the Certificate Services restore context. This handle is obtained by calling the CertSrvRestorePrepare function.",
 "CertSrvRestoreRegisterComplete": "A handle to a Certificate Services restore context. You must set this handle by calling CertSrvRestoreRegister before using it in CertSrvRestoreRegisterComplete.",
 "CertSrvRestoreRegisterThroughFile": "A handle to the Certificate Services restore context. This handle is obtained by calling the CertSrvRestorePrepare function.",
 "CertSrvServerControl": "A pointer to a name or a configuration string of the server to be issued the control command.",
 "CertChainFindByIssuerCallback": "A pointer to a CERT_CONTEXT structure that contains the certificate in question.",
 "CertDllOpenStoreProv": "A pointer to a null-terminated ANSI string that contains the store provider type. The following values represent the predefined store types. The store provider type determines the contents of the pvPara parameter and the use and meaning of the high word of the dwFlags parameter. Additional store providers can be installed or registered by using the CryptInstallOIDFunctionAddress or CryptRegisterOIDFunction function. For more information about adding store providers, see Extending CertOpenStore Functionality. Provider identifierDescriptionpvPara contents CERT_STORE_PROV_MEMORY sz_CERT_STORE_PROV_MEMORY Creates a certificate store in cached memory. No certificates, certificate revocation lists (CRLs), or certificate trust lists (CTLs) are initially loaded into the store. Typically used to create a temporary store. Any addition of certificates, CRLs, or CTLs or changes in properties of certificates, CRLs, or CTLs in a memory store are not automatically saved. They can be saved to a file or to a memory BLOB by using CertSaveStore. Not used. CERT_STORE_PROV_FILE Initializes the store with certificates, CRLs, and CTLs read from a specified open file. This provider expects the file to contain only a serialized store and not either PKCS #7 signed messages or a single encoded certificate. The file pointer must be positioned at the beginning of the serialized store information. After the data in the serialized store has been loaded into the certificate store, the file pointer is positioned at the beginning of any data that can follow the serialized store data in the file. If CERT_FILE_STORE_COMMIT_ENABLE is set in dwFlags, the file handle is duplicated and the store is always committed as a serialized store. The file is not closed when the store is closed. A pointer to the handle of a file opened with CreateFile. CERT_STORE_PROV_FILENAME_A Initializes the store with certificates, CRLs, and CTLs from a file. The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate. The dwEncodingType parameter must contain the encoding types to be used with both messages and certificates. If the file contains an X.509 encoded certificate, the open operation fails with GetLastError and returns ERROR_ACCESS_DENIED. If the CERT_FILE_STORE_COMMIT_ENABLE flag is set in dwFlags, the dwCreationDisposition value passed to CreateFile is as follows: If the CERT_STORE_CREATE_NEW_FLAG flag is set, CreateFile uses CREATE_NEW. If the CERT_STORE_OPEN_EXISTING_FLAG flag is set, CreateFile uses OPEN_EXISTING. For all other settings of dwFlags, CreateFile uses OPEN_ALWAYS. If dwFlags includes CERT_FILE_STORE_COMMIT_ENABLE, the file is committed as either a PKCS #7 or a serialized store depending on the file type opened. If the file was empty or if the file name has either a .p7c or .spc extension, the file is committed as a PKCS #7. Otherwise, the file is committed as a serialized store. A pointer to null-terminated ANSI string that contains the name of an existing, unopened file. CERT_STORE_PROV_FILENAME CERT_STORE_PROV_FILENAME_W sz_CERT_STORE_PROV_FILENAME sz_CERT_STORE_PROV_FILENAME_W Same as CERT_STORE_PROV_FILENAME_A. A pointer to null-terminated Unicode string that contains the name of an existing, unopened file. CERT_STORE_PROV_COLLECTION sz_CERT_STORE_PROV_COLLECTION Opens a store that will be a collection of other stores. Stores are added to or removed from the collection by using CertAddStoreToCollection and CertRemoveStoreFromCollection. When a store is added to a collection, all certificates, CRLs, and CTLs in that store become available to searches or enumerations of the collection store. The high word of dwFlags is set to zero. Must be NULL. CERT_STORE_PROV_REG Initializes the store with certificates, CRLs, and CTLs from a registry subkey. This provider opens or creates the registry subkeys Certificates, CRLs, and CTLs under the key passed in pvPara. The input key is not closed by the provider. Before returning, the provider opens its own copy of the key passed in pvPara. If CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, registry subkeys are opened by using the RegOpenKey with KEY_READ_ACCESS. Otherwise, registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS. Any changes to the contents of the opened store are immediately persisted to the registry. However, if CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, any attempt to add to the contents of the store or to change a context's property results in an error with GetLastError returning the E_ACCESSDENIED code. The handle of an open registry key. CERT_STORE_PROV_SYSTEM_A Initializes the store with certificates, CRLs, and CTLs from the specified system store. The system store is a logical, collection store that consists of one or more physical stores. A physical store associated with a system store is registered with the CertRegisterPhysicalStore function. After the system store is opened, all of the physical stores that are associated with it are also opened by calls to CertOpenStore and are added to the system store collection by using the CertAddStoreToCollection function. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For details about registry locations, see dwFlags later in this topic and System Store Locations. Some system store locations can be opened remotely; for more information, see System Store Locations. A pointer to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\". CERT_STORE_PROV_SYSTEM CERT_STORE_PROV_SYSTEM_W sz_CERT_STORE_PROV_SYSTEM sz_CERT_STORE_PROV_SYSTEM_W Same as CERT_STORE_PROV_SYSTEM_A. A pointer to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\". CERT_STORE_PROV_SYSTEM_REGISTRY_A Initializes the store with certificates, CRLs, and CTLs from a physical registry store. The physical store is not opened as a collection store. Enumerations and searches go through only the certificates, CRLs, and CTLs in that one physical store. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic. Some system store locations can be open remotely; for more information, see System Store Locations. A pointer to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\". CERT_STORE_PROV_SYSTEM_REGISTRY CERT_STORE_PROV_SYSTEM_REGISTRY_W sz_CERT_STORE_PROV_SYSTEM_REGISTRY sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W Same as CERT_STORE_PROV_SYSTEM_REGISTRY_A. A pointer to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\". CERT_STORE_PROV_PHYSICAL CERT_STORE_PROV_PHYSICAL_W sz_CERT_STORE_PROV_PHYSICAL sz_CERT_STORE_PROV_PHYSICAL_W Initializes the store with certificates, CRLs, and CTLs from a specified physical store that is a member of a logical system store. Two names are separated with an intervening backslash (\\), for example \"Root\\.LocalMachine\". Here, \"Root\" is the name of the system store and \".LocalMachine\" is the name of the physical store. The system and physical store names cannot contain any backslashes. The high word of dwFlags indicates the system store location, usually CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic. Some physical store locations can be opened remotely. A pointer to a null-terminated Unicode string that contains both the system store name and physical names. CERT_STORE_PROV_MSG Initializes the store with certificates, CRLs, and CTLs from the specified cryptographic message. The dwEncodingType parameter must contain the encoding types used with both messages and certificates. An HCRYPTMSG handle of the encoded message, returned by a call to CryptMsgOpenToDecode. CERT_STORE_PROV_PKCS7 sz_CERT_STORE_PROV_PKCS7 Initializes the store with certificates, CRLs, and CTLs from an encoded PKCS #7 signed message. The dwEncodingType parameter must specify the encoding types to be used with both messages and certificates. A pointer to a CRYPT_DATA_BLOB structure that represents the encoded message. CERT_STORE_PROV_SERIALIZED sz_CERT_STORE_PROV_SERIALIZED Initializes the store with certificates, CRLs, and CTLs from a memory location that contains a serialized store. A pointer to a CRYPT_DATA_BLOB structure that contains the serialized memory BLOB. CERT_STORE_PROV_LDAP CERT_STORE_PROV_LDAP_W sz_CERT_STORE_PROV_LDAP sz_CERT_STORE_PROV_LDAP_W Initializes the store with certificates, CRLs, and CTLs from the results of an LDAP query. To perform write operations on the store, the query string must specify a BASE query with no filter and a single attribute. If the dwFlags parameter contains the CERT_LDAP_STORE_OPENED_FLAG flag, this is the address of a CERT_LDAP_STORE_OPENED_PARA structure that specifies the established LDAP session to use. Otherwise, this is a pointer to a null-terminated Unicode string that contains the LDAP query string. For more information about LDAP query strings, see LDAP Dialect. CERT_STORE_PROV_SMART_CARD CERT_STORE_PROV_SMART_CARD_W sz_CERT_STORE_PROV_SMART_CARD sz_CERT_STORE_PROV_SMART_CARD_W Not currently used.",
 "CertEnumPhysicalStoreCallback": "If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in dwFlags, pvSystemStore points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure that indicates both the name and the location of the system store to be enumerated. Otherwise, pvSystemStore is a pointer to a Unicode string that names the system store whose physical stores are to be enumerated. For information about prefixing the name of a service or computer to the system store name, see CertRegisterSystemStore.",
 "CertEnumSystemStoreCallback": "A pointer to information on the system store found by a call to \tCertEnumSystemStore. Where appropriate, this argument will contain a leading computer name or service name prefix.",
 "CertEnumSystemStoreLocationCallback": "String that contains information on the store location found.",
 "CertStoreProvCloseCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvControl pointer": "HCERTSTOREPROV handle to a certificate store passed from the call to CertControlStore.",
 "CertStoreProvDeleteCertCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvDeleteCRLCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvDeleteCTL": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvFindCert": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvFindCRL": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvFindCTL": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvFreeFindCert": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvFreeFindCRL": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvFreeFindCTL": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvGetCertProperty": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvGetCRLProperty": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvGetCTLProperty": "A HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvReadCertCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvReadCRLCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvReadCTL": "HCERTSTOREPROV handle to a certificate store.",
 "CertStoreProvSetCertPropertyCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvSetCRLPropertyCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvSetCTLProperty": "A handle to a certificate store.",
 "CertStoreProvWriteCertCallback": "Provider specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvWriteCRLCallback": "Provider-specific value returned in CERT_STORE_PROV_INFO by CertDllOpenStoreProv.",
 "CertStoreProvWriteCTL": "HCERTSTOREPROV handle to a certificate store.",
 "CRYPT_ENUM_KEYID_PROP": "A pointer to a CRYPT_INTEGER_BLOB that contains the key identifier.",
 "CRYPT_ENUM_OID_FUNCTION": "Specifies the encoding type to match. Setting this parameter to CRYPT_MATCH_ANY_ENCODING_TYPE matches any encoding type. Note If CRYPT_MATCH_ANY_ENCODING_TYPE is not specified, either a certificate or message encoding type is required. If the low-order word containing the certificate encoding type is nonzero, it is used. Otherwise, the high-order word containing the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.Currently defined encoding types are: CRYPT_ASN_ENCODING X509_ASN_ENCODING PKCS_7_ASN_ENCODING CRYPT_MATCH_ANY_ENCODING_TYPE",
 "CRYPT_ENUM_OID_INFO": "A pointer to the OID information.",
 "CryptGetSignerCertificateCallback": "A pointer to user-defined data passed on to the verification function as specified in the CRYPT_VERIFY_MESSAGE_PARA structure.",
 "PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pointer": "A CRYPT_ALGORITHM_IDENTIFIER structure that identifies the algorithm used to encrypt the PrivateKeyInfo ASN.1 type found in the PKCS #8 standard.",
 "PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pointer": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure to receive the algorithm used to encrypt the PrivateKeyInfo ASN.1 type found in the PKCS #8 standard.",
 "PCRYPT_RESOLVE_HCRYPTPROV_FUNC pointer": "A pointer to a CRYPT_PRIVATE_KEY_INFO structure that describes the key being imported.",
 "PFN_CDF_PARSE_ERROR_CALLBACK pointer": "A value that indicates in which area of the CDF the error occurred.",
 "PFN_CERT_CREATE_CONTEXT_SORT_FUNC pointer": "The total number of bytes of the encoded entries.",
 "PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY pointer": "A pointer to a CMSG_CNG_CONTENT_DECRYPT_INFO structure to be updated with the imported CEK. This structure contains all the relevant information passed to the CryptMsgControl function.",
 "PFN_CMSG_CNG_IMPORT_KEY_AGREE pointer": "A pointer to a CMSG_CNG_CONTENT_DECRYPT_INFO structure to be updated with the decrypted CEK bytes. This parameter contains the key used to decrypt the CEK. The following pKeyTransDecryptPara parameter contains the \tCEK bytes to be decrypted.",
 "PFN_CMSG_CNG_IMPORT_KEY_TRANS pointer": "A pointer to a CMSG_CNG_CONTENT_DECRYPT_INFO structure to be updated with the decrypted CEK bytes. This parameter contains the key used to decrypt the CEK. The following pKeyTransDecryptPara parameter contains the \tCEK bytes to be decrypted.",
 "PFN_CMSG_EXPORT_KEY_AGREE pointer": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the content encryption key.",
 "PFN_CMSG_EXPORT_KEY_TRANS pointer": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the content encryption key.",
 "PFN_CMSG_EXPORT_MAIL_LIST pointer": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the content encryption key.",
 "PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY pointer": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the key.",
 "PFN_CMSG_IMPORT_KEY_AGREE pointer": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used to encrypt the message contents and any associated parameters.",
 "PFN_CMSG_IMPORT_KEY_TRANS pointer": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used to encrypt the message contents and any associated parameters.",
 "PFN_CMSG_IMPORT_MAIL_LIST pointer": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used to encrypt the message contents and any associated parameters.",
 "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC pointer": "A handle of the cryptographic service provider (CSP) to use when exporting the public key information. This handle must be an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function.",
 "PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC pointer": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC pointer": "A handle to the Cryptography API: Next Generation (CNG) private key to use to sign the hash.",
 "PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC pointer": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING",
 "PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC pointer": "The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function. This parameter can be the following currently defined certificate encoding type. ValueMeaning X509_ASN_ENCODING 1 (0x1) Specifies X.509 certificate encoding.",
 "PFNCCERTDISPLAYPROC": "A pointer to a CERT_CONTEXT structure that represents the certificate to display.",
 "PFNCMFILTERPROC": "A pointer to a CERT_CONTEXT structure that contains a certificate to make a filtering determination on.",
 "PFNCMHOOKPROC": "A handle to a dialog box window.",
 "CryptCATCDFClose": "A pointer to a CRYPTCATCDF structure.",
 "CryptCATCDFEnumAttributesWithCDFTag": "A pointer to a CRYPTCATCDF structure.",
 "CryptCATCDFEnumCatAttributes": "A pointer to a CRYPTCATCDF structure.",
 "CryptCATCDFEnumMembersByCDFTagEx": "A pointer to a CRYPTCATCDF structure.",
 "CryptCATCDFOpen": "A pointer to a null-terminated string that contains the path of the CDF file to open.",
 "CryptCATAdminAcquireContext": "A pointer to the catalog administrator context handle that is assigned by this function. When you have finished using the handle, close it by calling the CryptCATAdminReleaseContext function.",
 "CryptCATAdminAddCatalog": "Handle previously assigned by the CryptCATAdminAcquireContext function.",
 "CryptCATAdminEnumCatalogFromHash": "A handle to a catalog administrator context previously assigned by the CryptCATAdminAcquireContext function.",
 "CryptCATAdminRemoveCatalog": "Handle previously assigned by the CryptCATAdminAcquireContext function.",
 "CryptCATAdminAcquireContext2": "A pointer to the catalog administrator context handle that is assigned by this function. When you have finished using the handle, close it by calling the CryptCATAdminReleaseContext function.",
 "CryptCATAdminCalcHashFromFileHandle": "A handle to the file whose hash is being calculated. This parameter cannot be NULL and must be a valid file handle.",
 "CryptCATAdminCalcHashFromFileHandle2": "Handle of an open catalog administrator context. For more information, see CryptCATAdminAcquireContext2.",
 "CryptCATAdminReleaseCatalogContext": "Handle previously assigned by the CryptCATAdminAcquireContext function.",
 "CryptCATAdminReleaseContext": "Catalog administrator context handle previously assigned by a call to the CryptCATAdminAcquireContext function.",
 "CryptCATAdminResolveCatalogPath": "A handle that was previously assigned by the CryptCATAdminAcquireContext function.",
 "CryptCATCatalogInfoFromContext": "A handle to the catalog context. This value cannot be NULL.",
 "CryptCATClose": "Handle opened previously by a call to the CryptCATOpen function.",
 "CryptCATOpen": "A pointer to a null-terminated string for the catalog file name.",
 "CryptCATEnumerateAttr": "Handle for the catalog that contains the member identified by pCatMember. This value cannot be NULL.",
 "CryptCATEnumerateCatAttr": "Handle for the catalog whose attributes are being enumerated. This value cannot be NULL.",
 "CryptCATEnumerateMember": "The handle of the catalog that contains the members to enumerate. This value cannot be NULL.",
 "CryptCATGetAttrInfo": "The handle of the catalog that contains the member to retrieve the attribute information for. This handle is obtained by calling the CryptCATOpen function. This parameter is required and cannot be NULL.",
 "CryptCATGetMemberInfo": "A handle to the catalog. This parameter cannot be NULL.",
 "IsCatalogFile": "A handle to the file to check. This parameter is optional, but it must contain a valid handle if the pwszFileName parameter is NULL.",
 "WintrustAddActionID": "A pointer to a GUID structure that identifies the action to add and the trust provider that supports that action. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h. ValueMeaning WINTRUST_ACTION_GENERIC_VERIFY Verify a certificate chain only. WINTRUST_ACTION_GENERIC_VERIFY_V2 Verify a file or object using the Authenticode policy provider. HTTPSPROV_ACTION Verify an SSL/PCT connection through Internet Explorer.",
 "WintrustGetRegPolicyFlags": "This parameter can be a bitwise combination of one or more of the following values. ValueMeaning WTPF_TRUSTTEST Trust any test certificate. WTPF_TESTCANBEVALID Check any test certificate for validity. WTPF_IGNOREEXPIRATION Use expiration date. WTPF_IGNOREREVOKATION Do revocation check. WTPF_OFFLINEOK_IND If the source is offline, trust any individual certificates. WTPF_OFFLINEOK_COM If the source is offline, trust any commercial certificates. WTPF_OFFLINEOKNBU_IND If the source is offline, trust any individual certificates. Do not use the user interface (UI). WTPF_OFFLINEOKNBU_COM If the source is offline, trust any commercial certificates. Do not use the checking UI. WTPF_VERIFY_V1_OFF Turn off verification of version 1.0 certificates. WTPF_IGNOREREVOCATIONONTS Ignore time stamp revocation checks. WTPF_ALLOWONLYPERTRUST Allow only items in personal trust database.",
 "WintrustAddDefaultForUsage": "Pointer to a string that contains the identifier.",
 "WintrustGetDefaultForUsage": "Action to perform. This can be one of the following values. For more information, see Remarks. ValueMeaning DWACTION_ALLOCANDFILL Allocate memory and fill the CRYPT_PROVIDER_DEFUSAGE structure pointed to by the psUsage parameter. DWACTION_FREE Free all memory allocated during a previous call to this function by specifying DWACTION_ALLOCANDFILL for this parameter.",
 "WintrustLoadFunctionPointers": "A pointer to a GUID structure that identifies the action whose function pointers are being loaded and the trust provider that supports that action. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h. ValueMeaning WINTRUST_ACTION_GENERIC_VERIFY Verify a certificate chain only. WINTRUST_ACTION_GENERIC_VERIFY_V2 Verify a file or object using the Authenticode policy provider. HTTPSPROV_ACTION Verify an SSL/PCT connection through Internet Explorer.",
 "WintrustRemoveActionID": "A pointer to a GUID structure that identifies the action to remove and the trust provider that supports that action. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h. ValueMeaning WINTRUST_ACTION_GENERIC_VERIFY Verify a certificate chain only. WINTRUST_ACTION_GENERIC_VERIFY_V2 Verify a file or object using the Authenticode policy provider. HTTPSPROV_ACTION Verify an SSL/PCT connection through Internet Explorer.",
 "WintrustSetDefaultIncludePEPageHashes": "Determines whether page hashes are included when creating SIP indirect data for PE files. If this parameter is nonzero, page hashes are included. If this parameter is zero, page hashes are not included. The value is zero by default.",
 "WintrustSetRegPolicyFlags": "This parameter can be a bitwise combination of one or more of the following values. ValueMeaning WTPF_TRUSTTEST Trust any test certificate. WTPF_TESTCANBEVALID Check any test certificate for validity. WTPF_IGNOREEXPIRATION Do not check the expiration date. WTPF_IGNOREREVOKATION Do not check revocation. WTPF_OFFLINEOK_IND If the source is offline, trust any individual certificates. WTPF_OFFLINEOK_COM If the source is offline, trust any commercial certificates. WTPF_OFFLINEOKNBU_IND If the source is offline, trust any individual certificates. Do not use the user interface (UI). WTPF_OFFLINEOKNBU_COM If the source is offline, trust any commercial certificates. Do not use the checking UI. WTPF_VERIFY_V1_OFF Turn off verification of version 1.0 certificates. WTPF_IGNOREREVOCATIONONTS Ignore time stamp revocation checks. WTPF_ALLOWONLYPERTRUST Allow only items in personal trust database.",
 "WinVerifyTrust": "Optional handle to a caller window. A trust provider can use this value to determine whether it can interact with the user. However, trust providers typically perform verification actions without input from the user. This parameter can be one of the following values. ValueMeaning INVALID_HANDLE_VALUE There is no interactive user. The trust provider performs the verification action without the user's assistance. Zero The trust provider can use the interactive desktop to display its user interface. A valid window handle A trust provider can treat any value other than INVALID_HANDLE_VALUE or zero as a valid window handle that it can use to interact with the user.",
 "WinVerifyTrustEx": "Optional handle to a caller window. A trust provider can use this value to determine whether it can interact with the user. However, trust providers typically perform verification actions without input from the user. This parameter can be one of the following values. ValueMeaning INVALID_HANDLE_VALUE There is no interactive user. The trust provider performs the verification action without the user's assistance. Zero The trust provider can use the interactive desktop to display its user interface. A valid window handle A trust provider can treat any value other than INVALID_HANDLE_VALUE or zero as a valid window handle that it can use to interact with the user.",
 "WTHelperCertCheckValidSignature": "A pointer to the CRYPT_PROVIDER_DATA structure that contains the signer and countersigner information.",
 "WTHelperCertFindIssuerCertificate": "The subject certificate for which to find a matching issuer certificate.",
 "WTHelperCertIsSelfSigned": "A DWORD value that specifies the encoding types of the certificate to check. For information about possible encoding types, see Certificate and Message Encoding Types.",
 "WTHelperGetFileHash": "A pointer to a null-terminated Unicode string that contains the path and file name of the file to get the hash for.",
 "WTHelperGetProvCertFromChain": "A pointer to a CRYPT_PROVIDER_SGNR structure that represents the signers. This pointer is retrieved by the WTHelperGetProvSignerFromChain function.",
 "WTHelperGetProvPrivateDataFromChain": "A pointer to a CRYPT_PROVIDER_DATA structure that contains the provider's private information.",
 "WTHelperGetProvSignerFromChain": "A pointer to the CRYPT_PROVIDER_DATA structure that contains the signer and countersigner information.",
 "WTHelperProvDataFromStateData": "A handle previously set by the WinVerifyTrustEx function as the hWVTStateData\t member of the WINTRUST_DATA structure.",
 "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pointer": "Pointer to a provider defined object that contains information about this provider.",
 "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET pointer": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information.",
 "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE pointer": "Specifies the reason the provider is being released. This can be one of the following values: ValueMeaning CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN 1 The computer is shutting down. CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP 2 The service is stopping. CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT 3 The calling process is ending. CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD 4 The provider DLL is unloading.",
 "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD pointer": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information.",
 "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE pointer": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information.",
 "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER pointer": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information.",
 "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE pointer": "Pointer to the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH function implementation.",
 "CheckRemoteDebuggerPresent": "A handle to the process.",
 "ContinueDebugEvent": "The process identifier of the process to continue.",
 "DebugActiveProcess": "The identifier for the process to be debugged. The debugger is granted debugging access to the process as if it created the process with the DEBUG_ONLY_THIS_PROCESS flag. For more information, see the Remarks section of this topic.",
 "DebugActiveProcessStop": "The identifier of the process to stop debugging.",
 "DebugBreak": null,
 "DebugBreakProcess": "A handle to the process.",
 "DebugSetProcessKillOnExit": "If this parameter is TRUE, the thread terminates all attached processes on exit (note that this is the default). Otherwise, the thread detaches from all processes being debugged on exit.",
 "FatalExit": "The error code associated with the exit.",
 "FlushInstructionCache": "A handle to a process whose instruction cache is to be flushed.",
 "GetThreadContext": "A handle to the thread whose context is to be retrieved. The handle must have THREAD_GET_CONTEXT access to the thread. For more information, see Thread Security and Access Rights. WOW64: The handle must also have THREAD_QUERY_INFORMATION access.",
 "GetThreadSelectorEntry": "A handle to the thread containing the specified selector. The handle must have THREAD_QUERY_INFORMATION access. For more information, see Thread Security and Access Rights.",
 "IsDebuggerPresent": null,
 "OutputDebugString": "The null-terminated string to be displayed.",
 "ReadProcessMemory": "A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.",
 "SetThreadContext": "A handle to the thread whose context is to be set. The handle must have the THREAD_SET_CONTEXT access right to the thread. For more information, see Thread Security and Access Rights.",
 "WaitForDebugEvent": "A pointer to a DEBUG_EVENT structure that receives information about the debugging event.",
 "Wow64GetThreadContext": "A handle to the thread whose context is to be retrieved. The handle must have THREAD_GET_CONTEXT access to the thread. For more information, see Thread Security and Access Rights.",
 "Wow64GetThreadSelectorEntry": "A handle to the thread containing the specified selector. The handle must have been created with THREAD_QUERY_INFORMATION access to the thread. For more information, see Thread Security and Access Rights.",
 "Wow64SetThreadContext": "A handle to the thread whose context is to be set.",
 "WriteProcessMemory": "A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process.",
 "EditWordBreakProc": "Type: LPTSTR A pointer to the text of the edit control.",
 "_TrackMouseEvent": "Type: LPTRACKMOUSEEVENT A pointer to a TRACKMOUSEEVENT structure that contains tracking information.",
 "TrackMouseEvent": "Type: LPTRACKMOUSEEVENT A pointer to a TRACKMOUSEEVENT structure that contains tracking information.",
 "DragDetect": "Type: HWND A handle to the window receiving mouse input.",
 "GetSystemMetrics": "Type: int The system metric or configuration setting to be retrieved. This parameter can be one of the following values. Note that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings designed to return Boolean data represent TRUE as any nonzero value, and FALSE as a zero value. ValueMeaning SM_ARRANGE 56 The flags that specify how the system arranged minimized windows. For more information, see the Remarks section in this topic. SM_CLEANBOOT 67 The value that specifies how the system is started: 0 Normal boot 1 Fail-safe boot 2 Fail-safe with network boot A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files. SM_CMONITORS 80 The number of display monitors on a desktop. For more information, see the Remarks section in this topic. SM_CMOUSEBUTTONS 43 The number of buttons on a mouse, or zero if no mouse is installed. SM_CONVERTIBLESLATEMODE 0x2003 Reflects the state of the laptop or slate mode, 0 for Slate Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via WM_SETTINGCHANGE with \"ConvertibleSlateMode\" in the LPARAM. Note that this system metric doesn't apply to desktop PCs. In that case, use GetAutoRotationState. SM_CXBORDER 5 The width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for windows with the 3-D look. SM_CXCURSOR 13 The width of a cursor, in pixels. The system cannot create cursors of other sizes. SM_CXDLGFRAME 7 This value is the same as SM_CXFIXEDFRAME. SM_CXDOUBLECLK 36 The width of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle that is defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time. To set the width of the double-click rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKWIDTH. SM_CXDRAG 68 The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins. This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it. SM_CXEDGE 45 The width of a 3-D border, in pixels. This metric is the 3-D counterpart of SM_CXBORDER. SM_CXFIXEDFRAME 7 The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border. This value is the same as SM_CXDLGFRAME. SM_CXFOCUSBORDER 83 The width of the left and right edges of the focus rectangle that the DrawFocusRect draws. This value is in pixels. Windows 2000: This value is not supported. SM_CXFRAME 32 This value is the same as SM_CXSIZEFRAME. SM_CXFULLSCREEN 16 The width of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars, call the SystemParametersInfo function with the SPI_GETWORKAREA value. SM_CXHSCROLL 21 The width of the arrow bitmap on a horizontal scroll bar, in pixels. SM_CXHTHUMB 10 The width of the thumb box in a horizontal scroll bar, in pixels. SM_CXICON 11 The default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions that SM_CXICON and SM_CYICON specifies. SM_CXICONSPACING 38 The width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON. SM_CXMAXIMIZED 61 The default width, in pixels, of a maximized top-level window on the primary display monitor. SM_CXMAXTRACK 59 The default maximum width of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message. SM_CXMENUCHECK 71 The width of the default menu check-mark bitmap, in pixels. SM_CXMENUSIZE 54 The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels. SM_CXMIN 28 The minimum width of a window, in pixels. SM_CXMINIMIZED 57 The width of a minimized window, in pixels. SM_CXMINSPACING 47 The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CXMINIMIZED. SM_CXMINTRACK 34 The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message. SM_CXPADDEDBORDER 92 The amount of border padding for captioned windows, in pixels. Windows XP/2000: This value is not supported. SM_CXSCREEN 0 The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES). SM_CXSIZE 30 The width of a button in a window caption or title bar, in pixels. SM_CXSIZEFRAME 32 The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. This value is the same as SM_CXFRAME. SM_CXSMICON 49 The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view. SM_CXSMSIZE 52 The width of small caption buttons, in pixels. SM_CXVIRTUALSCREEN 78 The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors. The SM_XVIRTUALSCREEN metric is the coordinates for the left side of the virtual screen. SM_CXVSCROLL 2 The width of a vertical scroll bar, in pixels. SM_CYBORDER 6 The height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for windows with the 3-D look. SM_CYCAPTION 4 The height of a caption area, in pixels. SM_CYCURSOR 14 The height of a cursor, in pixels. The system cannot create cursors of other sizes. SM_CYDLGFRAME 8 This value is the same as SM_CYFIXEDFRAME. SM_CYDOUBLECLK 37 The height of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time. To set the height of the double-click rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKHEIGHT. SM_CYDRAG 69 The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins. This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from above the mouse-down point and added below it. SM_CYEDGE 46 The height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER. SM_CYFIXEDFRAME 8 The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border. This value is the same as SM_CYDLGFRAME. SM_CYFOCUSBORDER 84 The height of the top and bottom edges of the focus rectangle drawn by DrawFocusRect. This value is in pixels. Windows 2000: This value is not supported. SM_CYFRAME 33 This value is the same as SM_CYSIZEFRAME. SM_CYFULLSCREEN 17 The height of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars, call the SystemParametersInfo function with the SPI_GETWORKAREA value. SM_CYHSCROLL 3 The height of a horizontal scroll bar, in pixels. SM_CYICON 12 The default height of an icon, in pixels. The LoadIcon function can load only icons with the dimensions SM_CXICON and SM_CYICON. SM_CYICONSPACING 39 The height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON. SM_CYKANJIWINDOW 18 For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels. SM_CYMAXIMIZED 62 The default height, in pixels, of a maximized top-level window on the primary display monitor. SM_CYMAXTRACK 60 The default maximum height of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message. SM_CYMENU 15 The height of a single-line menu bar, in pixels. SM_CYMENUCHECK 72 The height of the default menu check-mark bitmap, in pixels. SM_CYMENUSIZE 55 The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels. SM_CYMIN 29 The minimum height of a window, in pixels. SM_CYMINIMIZED 58 The height of a minimized window, in pixels. SM_CYMINSPACING 48 The height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CYMINIMIZED. SM_CYMINTRACK 35 The minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message. SM_CYSCREEN 1 The height of the screen of the primary display monitor, in pixels. This is the same value obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES). SM_CYSIZE 31 The height of a button in a window caption or title bar, in pixels. SM_CYSIZEFRAME 33 The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. This value is the same as SM_CYFRAME. SM_CYSMCAPTION 51 The height of a small caption, in pixels. SM_CYSMICON 50 The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view. SM_CYSMSIZE 53 The height of small caption buttons, in pixels. SM_CYVIRTUALSCREEN 79 The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors. The SM_YVIRTUALSCREEN metric is the coordinates for the top of the virtual screen. SM_CYVSCROLL 20 The height of the arrow bitmap on a vertical scroll bar, in pixels. SM_CYVTHUMB 9 The height of the thumb box in a vertical scroll bar, in pixels. SM_DBCSENABLED 42 Nonzero if User32.dll supports DBCS; otherwise, 0. SM_DEBUG 22 Nonzero if the debug version of User.exe is installed; otherwise, 0. SM_DIGITIZER 94 Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input service is started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the device. For more information, see Remarks. Windows Server 2008, Windows Vista and Windows XP/2000: This value is not supported. SM_IMMENABLED 82 Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0. SM_IMMENABLED indicates whether the system is ready to use a Unicode-based IME on a Unicode application. To ensure that a language-dependent IME works, check SM_DBCSENABLED and the system ANSI code page. Otherwise the ANSI-to-Unicode conversion may not be performed correctly, or some components like fonts or registry settings may not be present. SM_MAXIMUMTOUCHES 95 Nonzero if there are digitizers in the system; otherwise, 0. SM_MAXIMUMTOUCHES returns the aggregate maximum of the maximum number of contacts supported by every digitizer in the system. If the system has only single-touch digitizers, the return value is 1. If the system has multi-touch digitizers, the return value is the number of simultaneous contacts the hardware can provide. Windows Server 2008, Windows Vista and Windows XP/2000: This value is not supported. SM_MEDIACENTER 87 Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not. SM_MENUDROPALIGNMENT 40 Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned. SM_MIDEASTENABLED 74 Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not. SM_MOUSEPRESENT 19 Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice and because some systems detect the presence of the port instead of the presence of a mouse. SM_MOUSEHORIZONTALWHEELPRESENT 91 Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0. SM_MOUSEWHEELPRESENT 75 Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0. SM_NETWORK 63 The least significant bit is set if a network is present; otherwise, it is cleared. The other bits are reserved for future use. SM_PENWINDOWS 41 Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise. SM_REMOTECONTROL 0x2001 This system metric is used in a Terminal Services environment to determine if the current Terminal Server session is being remotely controlled. Its value is nonzero if the current session is remotely controlled; otherwise, 0. You can use terminal services management tools such as Terminal Services Manager (tsadmin.msc) and shadow.exe to control a remote session. When a session is being remotely controlled, another user can view the contents of that session and potentially interact with it. SM_REMOTESESSION 0x1000 This system metric is used in a Terminal Services environment. If the calling process is associated with a Terminal Services client session, the return value is nonzero. If the calling process is associated with the Terminal Services console session, the return value is 0. Windows Server 2003 and Windows XP: The console session is not necessarily the physical console. For more information, see WTSGetActiveConsoleSessionId. SM_SAMEDISPLAYFORMAT 81 Nonzero if all the display monitors have the same color format, otherwise, 0. Two displays can have the same bit depth, but different color formats. For example, the red, green, and blue pixels can be encoded with different numbers of bits, or those bits can be located in different places in a pixel color value. SM_SECURE 44 This system metric should be ignored; it always returns 0. SM_SERVERR2 89 The build number if the system is Windows Server 2003 R2; otherwise, 0. SM_SHOWSOUNDS 70 Nonzero if the user requires an application to present information visually in situations where it would otherwise present the information only in audible form; otherwise, 0. SM_SHUTTINGDOWN 0x2000 Nonzero if the current session is shutting down; otherwise, 0. Windows 2000: This value is not supported. SM_SLOWMACHINE 73 Nonzero if the computer has a low-end (slow) processor; otherwise, 0. SM_STARTER 88 Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter, or Windows XP Starter Edition; otherwise, 0. SM_SWAPBUTTON 23 Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0. SM_SYSTEMDOCKED 0x2004 Reflects the state of the docking mode, 0 for Undocked Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via WM_SETTINGCHANGE with \"SystemDockMode\" in the LPARAM. SM_TABLETPC 86 Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows Vista or Windows 7 and the Tablet PC Input service is started; otherwise, 0. The SM_DIGITIZER setting indicates the type of digitizer input supported by a device running Windows 7 or Windows Server 2008 R2. For more information, see Remarks. SM_XVIRTUALSCREEN 76 The coordinates for the left side of the virtual screen. The virtual screen is the bounding rectangle of all display monitors. The SM_CXVIRTUALSCREEN metric is the width of the virtual screen. SM_YVIRTUALSCREEN 77 The coordinates for the top of the virtual screen. The virtual screen is the bounding rectangle of all display monitors. The SM_CYVIRTUALSCREEN metric is the height of the virtual screen.",
 "EnableMouseInPointer": "TRUE to turn on mouse input support in WM_POINTER.",
 "GetCapture": null,
 "GetDoubleClickTime": null,
 "GetMouseMovePointsEx": "Type: UINT The size, in bytes, of the MOUSEMOVEPOINT structure.",
 "ReleaseCapture": null,
 "SetCapture": "Type: HWND A handle to the window in the current thread that is to capture the mouse.",
 "SetDoubleClickTime": "Type: UINT The number of milliseconds that may occur between the first and second clicks of a double-click. If this parameter is set to 0, the system uses the default double-click time of 500 milliseconds. If this parameter value is greater than 5000 milliseconds, the system sets the value to 5000 milliseconds.",
 "SwapMouseButton": "Type: BOOL If this parameter is TRUE, the left button generates right-button messages and the right button generates left-button messages. If this parameter is FALSE, the buttons are restored to their original meanings.",
 "mouse_event": "Type: DWORD Controls various aspects of mouse motion and button clicking. This parameter can be certain combinations of the following values. ValueMeaning MOUSEEVENTF_ABSOLUTE 0x8000 The \t\t\t\t\t\tdx and \t\t\t\t\t\tdy parameters contain normalized absolute coordinates. If not set, those parameters contain relative data: the change in position since the last reported position. This flag can be set, or not set, regardless of what kind of mouse or mouse-like device, if any, is connected to the system. For further information about relative mouse motion, see the following Remarks section. MOUSEEVENTF_LEFTDOWN 0x0002 The left button is down. MOUSEEVENTF_LEFTUP 0x0004 The left button is up. MOUSEEVENTF_MIDDLEDOWN 0x0020 The middle button is down. MOUSEEVENTF_MIDDLEUP 0x0040 The middle button is up. MOUSEEVENTF_MOVE 0x0001 Movement occurred. MOUSEEVENTF_RIGHTDOWN 0x0008 The right button is down. MOUSEEVENTF_RIGHTUP 0x0010 The right button is up. MOUSEEVENTF_WHEEL 0x0800 \t\t\t\t\t\t The wheel has been moved, if the mouse has a wheel. The amount of movement is specified in \t\t\t\t\t\tdwData MOUSEEVENTF_XDOWN 0x0080 An X button was pressed. MOUSEEVENTF_XUP 0x0100 \t\t\t\t\t\t An X button was released. MOUSEEVENTF_WHEEL 0x0800 The wheel button is rotated. MOUSEEVENTF_HWHEEL 0x01000 The wheel button is tilted. The values that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions. Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released. You cannot specify both MOUSEEVENTF_WHEEL and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP simultaneously in the \t\t\t\t\t\tdwFlags parameter, because they both require use of the \t\t\t\t\t\tdwData field.",
 "DefWindowProc": "Type: HWND A handle to the window procedure that received the message.",
 "WindowFromPoint": "Type: POINT The point to be checked.",
 "WwanCloseHandle": "A handle to the mobile broadband service that WwanOpenHandle returned.",
 "WwanEnumerateInterfaces": "The client's session handle that was obtained by a previous call to WwanOpenHandle.",
 "WwanFreeMemory": "A pointer to the memory block to free.",
 "WwanOpenHandle": "A 32-bit value that specifies the requested version of the wireless wide area network (WWAN) API.",
 "WwanQueryInterface": "The client's session handle that was obtained by a previous call to the WwanOpenHandle function.",
 "DlgDirListComboBox": "Type: HWND A handle to the dialog box that contains the combo box.",
 "DlgDirSelectComboBoxEx": "Type: HWND A handle to the dialog box that contains the combo box.",
 "GetComboBoxInfo": "Type: HWND A handle to the combo box.",
 "Handler": "The control code. This parameter can be one of the following values. Control codeMeaning SERVICE_CONTROL_CONTINUE 0x00000003 Notifies a paused service that it should resume. SERVICE_CONTROL_INTERROGATE 0x00000004 Notifies a service that it should report its current status information to the service control manager. The handler should simply return NO_ERROR; the SCM is aware of the current state of the service. SERVICE_CONTROL_NETBINDADD 0x00000007 Notifies a network service that there is a new component for binding. The service should bind to the new component. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_NETBINDDISABLE 0x0000000A Notifies a network service that one of its bindings has been disabled. The service should reread its binding information and remove the binding. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_NETBINDENABLE 0x00000009 Notifies a network service that a disabled binding has been enabled. The service should reread its binding information and add the new binding. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_NETBINDREMOVE 0x00000008 Notifies a network service that a component for binding has been removed. The service should reread its binding information and unbind from the removed component. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_PARAMCHANGE 0x00000006 Notifies a service that its startup parameters have changed. The service should reread its startup parameters. SERVICE_CONTROL_PAUSE 0x00000002 Notifies a service that it should pause. SERVICE_CONTROL_SHUTDOWN 0x00000005 Notifies a service that the system is shutting down so the service can perform cleanup tasks. If a service accepts this control code, it must stop after it performs its cleanup tasks and return NO_ERROR. After the SCM sends this control code, it will not send other control codes to the service. For more information, see Remarks. SERVICE_CONTROL_STOP 0x00000001 Notifies a service that it should stop. If a service accepts this control code, it must stop upon receipt and return NO_ERROR. After the SCM sends this control code, it does not send other control codes.Windows XP: If the service returns NO_ERROR and continues to run, it continues to receive control codes. This behavior changed starting with Windows Server 2003 and Windows XP with SP2. This parameter can also be a user-defined control code, as described in the following table. Control codeMeaning Range 128 to 255. The service defines the action associated with the control code.",
 "RegisterServiceCtrlHandler": "The name of the service run by the calling thread. This is the service name that the service control program specified in the CreateService function when creating the service. If the service type is SERVICE_WIN32_OWN_PROCESS, the function does not verify that the specified name is valid, because there is only one registered service in the process.",
 "HandlerEx": "The control code. This parameter can be one of the following values. Control codeMeaning SERVICE_CONTROL_CONTINUE 0x00000003 Notifies a paused service that it should resume. SERVICE_CONTROL_INTERROGATE 0x00000004 Notifies a service to report its current status information to the service control manager. The handler should simply return NO_ERROR; the SCM is aware of the current state of the service. SERVICE_CONTROL_NETBINDADD 0x00000007 Notifies a network service that there is a new component for binding. The service should bind to the new component. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_NETBINDDISABLE 0x0000000A Notifies a network service that one of its bindings has been disabled. The service should reread its binding information and remove the binding. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_NETBINDENABLE 0x00000009 Notifies a network service that a disabled binding has been enabled. The service should reread its binding information and add the new binding. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_NETBINDREMOVE 0x00000008 Notifies a network service that a component for binding has been removed. The service should reread its binding information and unbind from the removed component. Applications should use Plug and Play functionality instead. SERVICE_CONTROL_PARAMCHANGE 0x00000006 Notifies a service that service-specific startup parameters have changed. The service should reread its startup parameters. SERVICE_CONTROL_PAUSE 0x00000002 Notifies a service that it should pause. SERVICE_CONTROL_PRESHUTDOWN 0x0000000F Notifies a service that the system will be shutting down. Services that need additional time to perform cleanup tasks beyond the tight time restriction at system shutdown can use this notification. The service control manager sends this notification to applications that have registered for it before sending a SERVICE_CONTROL_SHUTDOWN notification to applications that have registered for that notification. A service that handles this notification blocks system shutdown until the service stops or the preshutdown time-out interval specified through SERVICE_PRESHUTDOWN_INFO expires. Because this affects the user experience, services should use this feature only if it is absolutely necessary to avoid data loss or significant recovery time at the next system start. Windows Server 2003 and Windows XP: This value is not supported. SERVICE_CONTROL_SHUTDOWN 0x00000005 Notifies a service that the system is shutting down so the service can perform cleanup tasks. Note that services that register for SERVICE_CONTROL_PRESHUTDOWN notifications cannot receive this notification because they have already stopped. If a service accepts this control code, it must stop after it performs its cleanup tasks and return NO_ERROR. After the SCM sends this control code, it will not send other control codes to the service. For more information, see the Remarks section of this topic. SERVICE_CONTROL_STOP 0x00000001 Notifies a service that it should stop. If a service accepts this control code, it must stop upon receipt and return NO_ERROR. After the SCM sends this control code, it will not send other control codes to the service. Windows XP: If the service returns NO_ERROR and continues to run, it continues to receive control codes. This behavior changed starting with Windows Server 2003 and Windows XP with SP2. This parameter can also be one of the following extended control codes. Note that these control codes are not supported by the Handler function. Control CodeMeaning SERVICE_CONTROL_DEVICEEVENT 0x0000000B Notifies a service of device events. (The service must have registered to receive these notifications using the RegisterDeviceNotification function.) The dwEventType and lpEventData parameters contain additional information. SERVICE_CONTROL_HARDWAREPROFILECHANGE 0x0000000C Notifies a service that the computer's hardware profile has changed. The dwEventType parameter contains additional information. SERVICE_CONTROL_POWEREVENT 0x0000000D Notifies a service of system power events. The dwEventType parameter contains additional information. If dwEventType is PBT_POWERSETTINGCHANGE, the lpEventData parameter also contains additional information. SERVICE_CONTROL_SESSIONCHANGE 0x0000000E Notifies a service of session change events. Note that a service will only be notified of a user logon if it is fully loaded before the logon attempt is made. The dwEventType and lpEventData parameters contain additional information. SERVICE_CONTROL_TIMECHANGE 0x00000010 Notifies a service that the system time has changed. The lpEventData parameter contains additional information. The dwEventType parameter is not used. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This control code is not supported. SERVICE_CONTROL_TRIGGEREVENT 0x00000020 Notifies a service registered for a service trigger event that the event has occurred. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This control code is not supported. SERVICE_CONTROL_USERMODEREBOOT 0x00000040 Notifies a service that the user has initiated a reboot. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This control code is not supported. This parameter can also be a user-defined control code, as described in the following table. Control codeMeaning Range 128 to 255. The service defines the action associated with the control code.",
 "RegisterServiceCtrlHandlerEx": "The name of the service run by the calling thread. This is the service name that the service control program specified in the CreateService function when creating the service.",
 "ServiceMain": "The number of arguments in the lpszArgv array.",
 "SetServiceBits": "A handle to the status information structure for the service. A service obtains the handle by calling the RegisterServiceCtrlHandlerEx function.",
 "SetServiceStatus": "A handle to the status information structure for the current service. This handle is returned by the RegisterServiceCtrlHandlerEx function.",
 "StartServiceCtrlDispatcher": "A pointer to an array of SERVICE_TABLE_ENTRY structures containing one entry for each service that can execute in the calling process. The members of the last entry in the table must have NULL values to designate the end of the table.",
 "ChangeServiceConfig": "A handle to the service. This handle is returned by the OpenService or CreateService function and must have the SERVICE_CHANGE_CONFIG access right. For more information, see Service Security and Access Rights.",
 "ChangeServiceConfig2": "A handle to the service. This handle is returned by the OpenService or CreateService function and must have the SERVICE_CHANGE_CONFIG access right. For more information, see Service Security and Access Rights. If the service controller handles the SC_ACTION_RESTART action, hService must have the SERVICE_START access right.",
 "CloseServiceHandle": "A handle to the service control manager object or the service object to close. Handles to service control manager objects are returned by the OpenSCManager function, and handles to service objects are returned by either the OpenService or CreateService function.",
 "ControlService": "A handle to the service. This handle is returned by the OpenService or CreateService function. The access rights required for this handle depend on the dwControl code requested.",
 "ControlServiceEx": "A handle to the service. This handle is returned by the OpenService or CreateService function. The access rights required for this handle depend on the dwControl code requested.",
 "CreateService": "A handle to the service control manager database. This handle is returned by the OpenSCManager function and must have the SC_MANAGER_CREATE_SERVICE access right. For more information, see Service Security and Access Rights.",
 "DeleteService": "A handle to the service. This handle is returned by the OpenService or CreateService function, and it must have the DELETE access right. For more information, see Service Security and Access Rights.",
 "EnumDependentServices": "A handle to the service. This handle is returned by the OpenService or CreateService function, and it must have the SERVICE_ENUMERATE_DEPENDENTS access right. For more information, see Service Security and Access Rights.",
 "EnumServicesStatusEx": "A handle to the service control manager database. This handle is returned by the OpenSCManager function, and must have the SC_MANAGER_ENUMERATE_SERVICE access right. For more information, see Service Security and Access Rights.",
 "GetServiceDisplayName": "A handle to the service control manager database, as returned by the OpenSCManager function.",
 "GetServiceKeyName": "A handle to the computer's service control manager database, as returned by OpenSCManager.",
 "NotifyBootConfigStatus": "If the value is TRUE, the system saves the configuration as the last-known good configuration. If the value is FALSE, the system immediately reboots, using the previously saved last-known good configuration.",
 "NotifyServiceStatusChange": "A handle to the service or the service control manager. Handles to services are returned by the OpenService or CreateService function and must have the SERVICE_QUERY_STATUS access right. Handles to the service control manager are returned by the OpenSCManager function and must have the SC_MANAGER_ENUMERATE_SERVICE access right. For more information, see Service Security and Access Rights. There can only be one outstanding notification request per service.",
 "OpenSCManager": "The name of the target computer. If the pointer is NULL or points to an empty string, the function connects to the service control manager on the local computer.",
 "OpenService": "A handle to the service control manager database. The OpenSCManager function returns this handle. For more information, see Service Security and Access Rights.",
 "QueryServiceConfig": "A handle to the service. This handle is returned by the OpenService or CreateService function, and it must have the SERVICE_QUERY_CONFIG access right. For more information, see Service Security and Access Rights.",
 "QueryServiceConfig2": "A handle to the service. This handle is returned by the OpenService or CreateService function and must have the SERVICE_QUERY_CONFIG access right. For more information, see Service Security and Access Rights.",
 "QueryServiceDynamicInformation": "A service status handle provided by RegisterServiceCtrlHandlerEx",
 "QueryServiceObjectSecurity": "A handle to the service control manager or the service. Handles to the service control manager are returned by the OpenSCManager function, and handles to a service are returned by either the OpenService or CreateService function. The handle must have the READ_CONTROL access right.",
 "QueryServiceStatusEx": "A handle to the service. This handle is returned by the CreateService or OpenService function, and it must have the SERVICE_QUERY_STATUS access right. For more information, see Service Security and Access Rights.",
 "SetServiceObjectSecurity": "A handle to the service. This handle is returned by the OpenService or CreateService function. The access required for this handle depends on the security information specified in the dwSecurityInformation parameter.",
 "StartService": "A handle to the service. This handle is returned by the OpenService or CreateService function, and it must have the SERVICE_START access right. For more information, see Service Security and Access Rights.",
 "EnumServicesStatus": "A handle to the service control manager database. This handle is returned by the OpenSCManager function, and must have the SC_MANAGER_ENUMERATE_SERVICE access right. For more information, see Service Security and Access Rights.",
 "LockServiceDatabase": "A handle to the SCM database. This handle is returned by the OpenSCManager function, and must have the SC_MANAGER_LOCK access right. For more information, see Service Security and Access Rights.",
 "QueryServiceLockStatus": "A handle to the service control manager database. The OpenSCManager function returns this handle, which must have the SC_MANAGER_QUERY_LOCK_STATUS access right. For more information, see Service Security and Access Rights.",
 "QueryServiceStatus": "A handle to the service. This handle is returned by the OpenService or the CreateService function, and it must have the SERVICE_QUERY_STATUS access right. For more information, see Service Security and Access Rights.",
 "UnlockServiceDatabase": "The lock, which is obtained from a previous call to the LockServiceDatabase function.",
 "CallMsgFilter": "Type: LPMSG A pointer to an MSG structure that contains the message to be passed to the hook procedures.",
 "CallNextHookEx": "Type: HHOOK This parameter is ignored.",
 "CallWndProc": "Type: int Specifies whether the hook procedure must process the message. If nCode is HC_ACTION, the hook procedure must process the message. If \tnCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and must return the value returned by CallNextHookEx.",
 "CallWndRetProc": "Type: int Specifies whether the hook procedure must process the message. If nCode is HC_ACTION, the hook procedure must process the message. If \tnCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx.",
 "CBTProc": "Type: int The code that the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HCBT_ACTIVATE 5 The system is about to activate a window. HCBT_CLICKSKIPPED 6 The system has removed a mouse message from the system message queue. Upon receiving this hook code, a CBT application must install a WH_JOURNALPLAYBACK hook procedure in response to the mouse message. HCBT_CREATEWND 3 A window is about to be created. The system calls the hook procedure before sending the WM_CREATE or WM_NCCREATE message to the window. If the hook procedure returns a nonzero value, the system destroys the window; the CreateWindow function returns NULL, but the WM_DESTROY message is not sent to the window. If the hook procedure returns zero, the window is created normally. \t\t\t\t\t At the time of the HCBT_CREATEWND notification, the window has been created, but its final size and position may not have been determined and its parent window may not have been established. It is possible to send messages to the newly created window, although it has not yet received WM_NCCREATE or WM_CREATE messages. It is also possible to change the position in the z-order of the newly created window by modifying the hwndInsertAfter member of the CBT_CREATEWND structure. HCBT_DESTROYWND 4 A window is about to be destroyed. HCBT_KEYSKIPPED 7 The system has removed a keyboard message from the system message queue. Upon receiving this hook code, a CBT application must install a WH_JOURNALPLAYBACK hook procedure in response to the keyboard message. HCBT_MINMAX 1 A window is about to be minimized or maximized. HCBT_MOVESIZE 0 A window is about to be moved or sized. HCBT_QS 2 The system has retrieved a WM_QUEUESYNC message from the system message queue. HCBT_SETFOCUS 9 A window is about to receive the keyboard focus. HCBT_SYSCOMMAND 8 A system command is about to be carried out. This allows a CBT application to prevent task switching by means of hot keys.",
 "DebugProc": "Type: int Specifies whether the hook procedure must process the message. If nCode is HC_ACTION, the hook procedure must process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx.",
 "ForegroundIdleProc": "Type: int If code is HC_ACTION, the hook procedure must process the message. If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx.",
 "GetMsgProc": "Type: int Specifies whether the hook procedure must process the message. If code is HC_ACTION, the hook procedure must process the message. If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx.",
 "JournalPlaybackProc": "Type: int A code the hook procedure uses to determine how to process the message. If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HC_GETNEXT 1 The hook procedure must copy the current mouse or keyboard message to the EVENTMSG structure pointed to by the lParam parameter. HC_NOREMOVE 3 An application has called the PeekMessage function with wRemoveMsg set to PM_NOREMOVE, indicating that the message is not removed from the message queue after PeekMessage processing. HC_SKIP 2 The hook procedure must prepare to copy the next mouse or keyboard message to the EVENTMSG structure pointed to by lParam. Upon receiving the HC_GETNEXT code, the hook procedure must copy the message to the structure. HC_SYSMODALOFF 5 A system-modal dialog box has been destroyed. The hook procedure must resume playing back the messages. HC_SYSMODALON 4 A system-modal dialog box is being displayed. Until the dialog box is destroyed, the hook procedure must stop playing back messages.",
 "JournalRecordProc": "Type: int Specifies how to process the message. If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HC_ACTION 0 The lParam parameter is a pointer to an EVENTMSG structure containing information about a message removed from the system queue. The hook procedure must record the contents of the structure by copying them to a buffer or file. HC_SYSMODALOFF 5 A system-modal dialog box has been destroyed. The hook procedure must resume recording. HC_SYSMODALON 4 A system-modal dialog box is being displayed. Until the dialog box is destroyed, the hook procedure must stop recording.",
 "KeyboardProc": "Type: int A code the hook procedure uses to determine how to process the message. If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HC_ACTION 0 The wParam and lParam parameters contain information about a keystroke message. HC_NOREMOVE 3 The wParam and lParam parameters contain information about a keystroke message, and the keystroke message has not been removed from the message queue. (An application called the PeekMessage function, specifying the PM_NOREMOVE flag.)",
 "LowLevelKeyboardProc": "Type: int A code the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HC_ACTION 0 The wParam and lParam parameters contain information about a keyboard message.",
 "LowLevelMouseProc": "Type: int A code the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HC_ACTION 0 The wParam and lParam parameters contain information about a mouse message.",
 "MessageProc": "Type: int The type of input event that generated the message. If code is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning MSGF_DDEMGR 0x8001 The input event occurred while the DDEML was waiting for a synchronous transaction to finish. For more information about DDEML, see Dynamic Data Exchange Management Library. MSGF_DIALOGBOX 0 The input event occurred in a message box or dialog box. MSGF_MENU 2 The input event occurred in a menu. MSGF_SCROLLBAR 5 The input event occurred in a scroll bar.",
 "MouseProc": "Type: int A code that the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HC_ACTION 0 The \t\t\t\t\t\twParam and \t\t\t\t\t\tlParam parameters contain information about a mouse message. HC_NOREMOVE 3 The wParam and lParam parameters contain information about a mouse message, and the mouse message has not been removed from the message queue. (An application called the PeekMessage function, specifying the PM_NOREMOVE flag.)",
 "SetWindowsHookEx": "Type: int The type of hook procedure to be installed. This parameter can be one of the following values. ValueMeaning WH_CALLWNDPROC 4 Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the CallWndProc hook procedure. WH_CALLWNDPROCRET 12 Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the CallWndRetProc hook procedure. WH_CBT 5 Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the CBTProc hook procedure. WH_DEBUG 9 Installs a hook procedure useful for debugging other hook procedures. For more information, see the DebugProc hook procedure. WH_FOREGROUNDIDLE 11 Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the ForegroundIdleProc hook procedure. WH_GETMESSAGE 3 Installs a hook procedure that monitors messages posted to a message queue. For more information, see the GetMsgProc hook procedure. WH_JOURNALPLAYBACK 1 Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure. For more information, see the JournalPlaybackProc hook procedure. WH_JOURNALRECORD 0 Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the JournalRecordProc hook procedure. WH_KEYBOARD 2 Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure. WH_KEYBOARD_LL 13 Installs a hook procedure that monitors low-level keyboard input events. For more information, see the LowLevelKeyboardProc hook procedure. WH_MOUSE 7 Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure. WH_MOUSE_LL 14 Installs a hook procedure that monitors low-level mouse input events. For more information, see the LowLevelMouseProc hook procedure. WH_MSGFILTER -1 Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the MessageProc hook procedure. WH_SHELL 10 Installs a hook procedure that receives notifications useful to shell applications. For more information, see the ShellProc hook procedure. WH_SYSMSGFILTER 6 Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the SysMsgProc hook procedure.",
 "ShellProc": "Type: int The hook code. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning HSHELL_ACCESSIBILITYSTATE 11 The accessibility state has changed. HSHELL_ACTIVATESHELLWINDOW 3 The shell should activate its main window. HSHELL_APPCOMMAND 12 The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input. If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information. HSHELL_GETMINRECT 5 A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window. HSHELL_LANGUAGE 8 Keyboard language was changed or a new keyboard layout was loaded. HSHELL_REDRAW 6 The title of a window in the task bar has been redrawn. HSHELL_TASKMAN 7 The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list. HSHELL_WINDOWACTIVATED 4 The activation has changed to a different top-level, unowned window. HSHELL_WINDOWCREATED 1 A top-level, unowned window has been created. The window exists when the system calls this hook. HSHELL_WINDOWDESTROYED 2 A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook. HSHELL_WINDOWREPLACED 13 A top-level window is being replaced. The window exists when the system calls this hook.",
 "SysMsgProc": "Type: int The type of input event that generated the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx. This parameter can be one of the following values. ValueMeaning MSGF_DIALOGBOX 0 The input event occurred in a message box or dialog box. MSGF_MENU 2 The input event occurred in a menu. MSGF_SCROLLBAR 5 The input event occurred in a scroll bar.",
 "UnhookWindowsHookEx": "Type: HHOOK A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx.",
 "GdiplusShutdown": "Type: ULONG_PTR Token returned by a previous call to GdiplusStartup.",
 "GdiplusStartup": "Type: ULONG_PTR token* Pointer to a \t\t\t\t\tULONG_PTR that receives a token. Pass the token to GdiplusShutdown when you have finished using GDI+.",
 "GetImageDecoders": "Type: UINT Integer that specifies the number of available image decoders. Call GetImageDecodersSize to determine this number.",
 "GetImageDecodersSize": "Type: UINT* Pointer to a UINT that receives the number of available image decoders.",
 "GetImageEncoders": "Type: UINT Integer that specifies the number of available image encoders. Call GetImageEncodersSize to determine this number.",
 "GetImageEncodersSize": "Type: UINT* Pointer to a \t\t\t\t\tUINT that receives the number of available image encoders.",
 "GetPixelFormatSize": "Type: PixelFormat A PixelFormat constant that specifies the pixel format to be tested.",
 "IsAlphaPixelFormat": "Type: PixelFormat A PixelFormat constant that specifies the pixel format to be tested.",
 "IsCanonicalPixelFormat": "Type: PixelFormat A PixelFormat constant that specifies the pixel format to be tested.",
 "IsExtendedPixelFormat": "Type: PixelFormat A PixelFormat constant that specifies the pixel format to be tested.",
 "IsIndexedPixelFormat": "Type: PixelFormat A PixelFormat constant that specifies the pixel format to be tested.",
 "ObjectTypeIsValid": "Type: ObjectType Element of the ObjectType enumeration to be tested.",
 "ClientToScreen": "A handle to the window whose client area is used for the conversion.",
 "CombineTransform": "A pointer to an XFORM structure that receives the combined transformation.",
 "DPtoLP": "A handle to the device context.",
 "GetCurrentPositionEx": "A handle to the device context.",
 "GetDisplayAutoRotationPreferences": "Type: ORIENTATION_PREFERENCE* A pointer to a variable that receives a combination of ORIENTATION_PREFERENCE-typed values that are combined by using a bitwise OR operation. The resulting value specifies the orientation preferences of the display. Here are possible values: ValueMeaning ORIENTATION_PREFERENCE_NONE 0x0 No display orientation is specified. ORIENTATION_PREFERENCE_LANDSCAPE 0x1 Specifies that the display can be oriented in landscape mode where the width of the display viewing area is greater than the height. ORIENTATION_PREFERENCE_PORTRAIT 0x2 Specifies that the display can be oriented in portrait mode where the height of the display viewing area is greater than the width. ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED 0x4 Specifies that the display can be oriented in flipped landscape mode where the width of the display viewing area is greater than the height. This landscape mode is flipped 180 degrees from ORIENTATION_PREFERENCE_LANDSCAPE mode. ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED 0x8 Specifies that the display can be oriented in flipped portrait mode where the height of the display viewing area is greater than the width. This portrait mode is flipped 180 degrees from the ORIENTATION_PREFERENCE_PORTRAIT mode.",
 "GetGraphicsMode": "A handle to the device context.",
 "GetMapMode": "A handle to the device context.",
 "GetViewportExtEx": "A handle to the device context.",
 "GetViewportOrgEx": "A handle to the device context.",
 "GetWindowExtEx": "A handle to the device context.",
 "GetWindowOrgEx": "A handle to the device context.",
 "GetWorldTransform": "A handle to the device context.",
 "LPtoDP": "A handle to the device context.",
 "MapWindowPoints": "A handle to the window from which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are presumed to be in screen coordinates.",
 "ModifyWorldTransform": "A handle to the device context.",
 "OffsetViewportOrgEx": "A handle to the device context.",
 "OffsetWindowOrgEx": "A handle to the device context.",
 "ScaleViewportExtEx": "A handle to the device context.",
 "ScaleWindowExtEx": "A handle to the device context.",
 "ScreenToClient": "A handle to the window whose client area will be used for the conversion.",
 "SetDisplayAutoRotationPreferences": "Type: ORIENTATION_PREFERENCE A combination of ORIENTATION_PREFERENCE-typed values that are combined by using a bitwise OR operation. The resulting value specifies the orientation preferences of the display. Here are possible values: ValueMeaning ORIENTATION_PREFERENCE_NONE 0x0 No display orientation is specified. ORIENTATION_PREFERENCE_LANDSCAPE 0x1 Specifies that the display can be oriented in landscape mode where the width of the display viewing area is greater than the height. ORIENTATION_PREFERENCE_PORTRAIT 0x2 Specifies that the display can be oriented in portrait mode where the height of the display viewing area is greater than the width. ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED 0x4 Specifies that the display can be oriented in flipped landscape mode where the width of the display viewing area is greater than the height. This landscape mode is flipped 180 degrees from ORIENTATION_PREFERENCE_LANDSCAPE mode. ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED 0x8 Specifies that the display can be oriented in flipped portrait mode where the height of the display viewing area is greater than the width. This portrait mode is flipped 180 degrees from the ORIENTATION_PREFERENCE_PORTRAIT mode.",
 "SetGraphicsMode": "A handle to the device context.",
 "SetMapMode": "A handle to the device context.",
 "SetViewportExtEx": "A handle to the device context.",
 "SetViewportOrgEx": "A handle to the device context.",
 "SetWindowExtEx": "A handle to the device context.",
 "SetWindowOrgEx": "A handle to the device context.",
 "SetWorldTransform": "A handle to the device context.",
 "SfcIsFileProtected": "This parameter must be NULL.",
 "SfcIsKeyProtected": "A handle to the root registry key. This must be a handle to one of the following predefined keys. HKEY_CLASSES_ROOT HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "ZwAllocateLocallyUniqueId": "Pointer to a caller-allocated buffer to receive a copy of the source LUID structure. The buffer must be at least sizeof(LUID).",
 "SLActivateProduct": "Type: HSLC The handle to the current SLC context.",
 "SLAcquireGenuineTicket": "The address of a pointer to a buffer that receives the ticket BLOB. When you have finished using this buffer, free it by calling the LocalFree function.",
 "SLClose": "Type: HSLC The handle to the current SLC context.",
 "SLConsumeRight": "Type: HSLC The handle to the current SLC context.",
 "SLDepositMigrationBlob": "Type: HANDLE The file handle for the licensing state BLOB.",
 "SLGatherMigrationBlob": "Type: BOOL TRUE if only data that can be migrated should be gathered; FALSE otherwise.",
 "SLDepositOfflineConfirmationId": "Type: HSLC The handle to the current SLC context.",
 "SLDepositOfflineConfirmationIdEx": "Type: HSLC The handle to the current SLC context.",
 "SLFireEvent": "Type: HSLC The handle to the current SLC context.",
 "SLGenerateOfflineInstallationId": "Type: HSLC The handle to the current SLC context.",
 "SLGenerateOfflineInstallationIdEx": "Type: HSLC The handle to the current SLC context.",
 "SLGetApplicationInformation": "Type: HSLC The handle to the current SLC context.",
 "SLGetApplicationPolicy": "Type: HSLP The context handle returned by the SLLoadApplicationPolicies function.",
 "SLPersistApplicationPolicies": "Type: const SLID* A pointer to the identifier of the application ID to be used for the fast policy queries.",
 "SLLoadApplicationPolicies": "Type: const SLID* A pointer to the identifier of the application ID to be used for the fast policy queries.",
 "SLGetAuthenticationResult": "Type: HSLC The handle to the current SLC context.",
 "SLGetGenuineInformation": "A pointer to an SLID structure that specifies the application to check.",
 "SLSetGenuineInformation": "A pointer to an SLID structure that specifies the application for which to set information.",
 "SLGetGenuineInformationEx": "Type: const SLID* A pointer to the application ID.",
 "SLGetInstalledProductKeyIds": "Type: HSLC The handle to the current SLC session.",
 "SLGetInstalledSAMLicenseApplications": "A pointer to the number of elements in the ppReturnedAppIds array.",
 "SLInstallSAMLicense": "A pointer to an SLID structure that specifies the application for which to install a SAM license.",
 "SLGetLicense": "Type: HSLC The handle to the current SLC context.",
 "SLGetLicenseFileId": "The handle to the current SLC context.",
 "SLGetLicenseInformation": "Type: HSLC The handle to the current SLC context.",
 "SLGetLicensingStatusInformation": "Type: HSLC Handle to the current SLC context.",
 "SLGetPKeyId": "The handle to the current SLC context.",
 "SLGetPKeyInformation": "Type: HSLC The handle to the current SLC context.",
 "SLGetPolicyInformation": "Type: HSLC The handle to the current SLC context.",
 "SLGetPolicyInformationDWORD": "Type: HSLC The handle to the current SLC context.",
 "SLGetProductSkuInformation": "Type: HSLC The handle to the current SLC context.",
 "SLGetReferralInformation": "Type: HSLC The handle retrieved by previous call to the SLOpen function.",
 "SLGetSAMLicense": "A pointer to an SLID structure that specifies an application.",
 "SLGetServerStatus": "Type: PCWSTR The URL of the server.",
 "SLGetServiceInformation": "Type: HSLC The handle to the current SLC context.",
 "SLGetSLIDList": "Type: HSLC The handle to the current SLC context.",
 "SLGetWindowsInformation": "A pointer to a null-terminated string that contains the name associated with the value to retrieve.",
 "SLGetWindowsInformationDWORD": "A pointer to a null-terminated string that contains the name associated with the value to retrieve.",
 "SLInstallLicense": "Type: HSLC The handle to the current SLC context.",
 "SLInstallProofOfPurchase": "Type: HSLC The handle to the current SLC context.",
 "SLInstallProofOfPurchaseEx": "Type: HSLC The handle to the current SLC context.",
 "SLIsGenuineLocal": "A pointer to an SLID structure that specifies the application to check.",
 "SLIsGenuineLocalEx": "A pointer to an SLID structure that specifies the application to check.",
 "SLOpen": "Type: HSLC* A pointer to a context handle returned from the Software Licensing Service.",
 "SLPersistRTSPayloadOverride": "Type: HSLC Handle retrieved by previous call to the SLOpen function.",
 "SLQueryLicenseValueFromApp": "The name of the policy for which you want to get information.",
 "SLReArm": "Type: HSLC The handle to the current SLC context.",
 "SLRegisterEvent": "Type: HSLC The handle to the current SLC session.",
 "SLSetAuthenticationData": "Type: HSLC The handle to the current SLC context.",
 "SLSetCurrentProductKey": "Type: HSLC The handle to the current SLC context.",
 "SLUninstallLicense": "Type: HSLC The handle to the current SLC context.",
 "SLUninstallProofOfPurchase": "Type: HSLC The handle to the current SLC context.",
 "SLUninstallSAMLicense": "A pointer to an SLID that specifies the application for which to uninstall a SAM license.",
 "SLUnloadApplicationPolicies": "Type: HSLP The context handle returned by the SLLoadApplicationPolicies function.",
 "SLUnregisterEvent": "Type: HSLC The handle to the current SLC session.",
 "SnmpExtensionClose": null,
 "SnmpExtensionInit": "Specifies a time-zero reference for the extension agent. Note Extension agents should ignore this parameter. The SNMP extension agent DLL should use the SnmpSvcGetUptime function to retrieve the number of centiseconds the SNMP service has been running. For more information, see the following Remarks section.",
 "SnmpExtensionInitEx": "Pointer to an AsnObjectIdentifier structure to receive the next MIB subtree that the extension agent supports.",
 "SnmpExtensionMonitor": "Pointer to an array of AsnAny objects (structures). The number of objects, and the type and description of each object, are in accordance with RFC 1213. For more information, see the following Remarks section.",
 "SnmpExtensionQuery": "Specifies the SNMP version 1 (SNMPv1) PDU request type. This parameter can be one of the following values. ValueMeaning SNMP_PDU_GET Retrieve the value or values of the specified variables. SNMP_PDU_GETNEXT Retrieve the value or values of the lexicographic successor of the specified variable. SNMP_PDU_SET Write a value within a specific variable. Note that PDU request types have been renamed. For additional information, see SNMP Variable Types and Request PDU Types.",
 "SnmpExtensionQueryEx": "Specifies the type of operation that the SNMP service is requesting the extension agent to perform. This parameter can be one of the following values. ValueMeaning SNMP_EXTENSION_GET Retrieve the value or values of the specified variables. SNMP_EXTENSION_GET_NEXT Retrieve the value or values of the lexicographic successor of the specified variables. SNMP_EXTENSION_SET_TEST Validate the values of the specified variables. This operation maximizes the probability of a successful write during the COMMIT request. SNMP_EXTENSION_SET_COMMIT Write the new values to the specified variables. SNMP_EXTENSION_SET_UNDO Reset the values of the specified variables to their values before the COMMIT request. SNMP_EXTENSION_SET_CLEANUP Release the resources allocated in previous requests and operations. For additional information about the SET request types, that is, those that begin with SNMP_EXTENSION_SET_, see the following Remarks section.",
 "SnmpExtensionTrap": "Pointer to an AsnObjectIdentifier structure to receive the object identifier of the enterprise that generated the trap. The SNMP service does not free the memory for this variable.",
 "SnmpMgrClose": "Pointer to an internal structure that specifies the session to close. For more information, see the following Remarks section.",
 "SnmpMgrCtl": "Pointer to an internal structure that specifies the session to which the control code applies.",
 "SnmpMgrGetTrap": "Pointer to an AsnObjectIdentifier structure to receive the enterprise that generated the SNMP trap.",
 "SnmpMgrGetTrapEx": "Pointer to an AsnObjectIdentifier structure to receive the enterprise that generated the SNMP trap.",
 "SnmpMgrOidToStr": "Pointer to an object identifier variable to convert.",
 "SnmpMgrOpen": "Pointer to a null-terminated string that specifies a host name or an IP address. The host name must resolve to an IP address, an IPX address (in 8.12 notation), or an ethernet address. See the Remarks section for the acceptable forms for host names and IP addresses.",
 "SnmpMgrRequest": "Pointer to an internal structure that specifies the session that will perform the request. Applications should not specify the LPSNMP_MGR_SESSION pointer returned by this function in a different thread. You can specify a pointer returned by SnmpMgrOpen, but only if the calls to SnmpMgrOpen and SnmpMgrRequest originate in the context of the same thread.",
 "SnmpMgrStrToOid": "Pointer to a null-terminated string to convert.",
 "SnmpMgrTrapListen": "Pointer to an event handle to receive an indication that there are traps available, and that the application should call the SnmpMgrGetTrap function.",
 "SnmpSvcGetUptime": null,
 "SnmpSvcSetLogLevel": "Specifies a signed integer variable that indicates the level of detail of the debug output from the SnmpUtilDbgPrint function. This parameter can be one of the following values. ValueMeaning SNMP_LOG_SILENT Disable all debugging output. SNMP_LOG_FATAL Display fatal errors only. SNMP_LOG_ERROR Display recoverable errors. SNMP_LOG_WARNING Display warnings and recoverable errors. SNMP_LOG_TRACE Display trace information. SNMP_LOG_VERBOSE Display verbose trace information.",
 "SnmpSvcSetLogType": "Specifies a signed integer variable that represents the destination for the debug output from the SnmpUtilDbgPrint function. This parameter can be one of the following values. ValueMeaning SNMP_OUTPUT_TO_CONSOLE The destination for the debug output is a console window. SNMP_OUTPUT_TO_LOGFILE The destination for the debug output is the SNMPDBG.LOG file in the SYSTEM32 directory. SNMP_OUTPUT_TO_DEBUGGER The destination for the debug output is a debugger utility.",
 "SnmpUtilAsnAnyCpy": "Pointer to an AsnAny structure to receive the copy.",
 "SnmpUtilAsnAnyFree": "Pointer to an AsnAny structure whose memory should be freed.",
 "SnmpUtilDbgPrint": "Specifies a signed integer variable that indicates the level of detail of the log event. This parameter can be one of the following values. ValueMeaning SNMP_LOG_SILENT Disable all debugging output. SNMP_LOG_FATAL Display fatal errors only. SNMP_LOG_ERROR Display recoverable errors. SNMP_LOG_WARNING Display warnings and recoverable errors. SNMP_LOG_TRACE Display trace information. SNMP_LOG_VERBOSE Display verbose trace information.",
 "SnmpUtilIdsToA": "Pointer to an array of unsigned integers. The array contains the sequence of numbers that the OID contains. The IdLength parameter specifies the array's length. For more information, see the following Return Values and Remarks sections.",
 "SnmpUtilMemAlloc": "Specifies the number of bytes to allocate for the memory object.",
 "SnmpUtilMemFree": "Pointer to the memory object to release.",
 "SnmpUtilMemReAlloc": "Pointer to the memory object to resize.",
 "SnmpUtilOctetsCmp": "Pointer to an AsnOctetString structure to compare.",
 "SnmpUtilOctetsCpy": "Pointer to an AsnOctetString structure to receive the copy.",
 "SnmpUtilOctetsFree": "Pointer to an AsnOctetString structure whose memory should be freed.",
 "SnmpUtilOctetsNCmp": "Pointer to an AsnOctetString structure to compare.",
 "SnmpUtilOidAppend": "Pointer to an AsnObjectIdentifier structure to receive the source structure.",
 "SnmpUtilOidCmp": "Pointer to an AsnObjectIdentifier structure to compare.",
 "SnmpUtilOidCpy": "Pointer to an AsnObjectIdentifier structure to receive the copy.",
 "SnmpUtilOidFree": "Pointer to an AsnObjectIdentifier structure whose memory should be freed.",
 "SnmpUtilOidNCmp": "Pointer to an AsnObjectIdentifier structure to compare.",
 "SnmpUtilOidToA": "Pointer to an AsnObjectIdentifier structure to convert.",
 "SnmpUtilPrintAsnAny": "Pointer to an AsnAny structure for a value to print.",
 "SnmpUtilPrintOid": "Pointer to an AsnObjectIdentifier structure to print.",
 "SnmpUtilVarBindCpy": "Pointer to an SnmpVarBind structure to receive the copy.",
 "SnmpUtilVarBindListCpy": "Pointer to an SnmpVarBindList structure to receive the copy.",
 "SnmpUtilVarBindFree": "Pointer to an SnmpVarBind structure whose memory should be freed.",
 "SnmpUtilVarBindListFree": "Pointer to an SnmpVarBindList structure whose allocated memory should be freed.",
 "AccessibleChildren": "Type: IAccessible* Pointer to the container object's IAccessible interface.",
 "AccessibleObjectFromEvent": "Type: HWND Specifies the window handle of the window that generated the event. This value must be the window handle that is sent to the event hook function.",
 "AccessibleObjectFromPoint": "Specifies, in physical screen coordinates, the point that is examined.",
 "AccessibleObjectFromWindow": "Type: HWND Specifies the handle of a window for which an object is to be retrieved. To retrieve an interface pointer to the cursor or caret object, specify NULL and use the appropriate object ID in dwObjectID.",
 "GetOleaccVersionInfo": "Type: DWORD* Address of a DWORD that receives the version number. The major version number is placed in the high word, and the minor version number is placed in the low word.",
 "GetProcessHandleFromHwnd": "Type: HWND The window handle.",
 "GetRoleText": "Type: DWORD One of the object role constants.",
 "GetStateText": "Type: DWORD One of the object state constants.",
 "SetWinEventHook": "Type: UINT Specifies the event constant for the lowest event value in the range of events that are handled by the hook function. This parameter can be set to EVENT_MIN to indicate the lowest possible event value.",
 "UnhookWinEvent": "Type: HWINEVENTHOOK Handle to the event hook returned in the previous call to SetWinEventHook.",
 "WindowFromAccessibleObject": "Type: IAccessible* Pointer to the IAccessible interface whose corresponding window handle will be retrieved. This parameter must not be NULL.",
 "WinEventProc": "Type: HWINEVENTHOOK Handle to an event hook function. This value is returned by SetWinEventHook when the hook function is installed and is specific to each instance of the hook function.",
 "WINEVENTPROC pointer": "Handle to an event hook instance. This value is returned by SetWinEventHook when the hook function is installed, and it is specific to each instance of the hook function.",
 "AccessCheck": "A pointer to a SECURITY_DESCRIPTOR structure against which access is checked.",
 "AccessCheckAndAuditAlarm": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.",
 "AccessCheckByType": "A pointer to a SECURITY_DESCRIPTOR structure against which access is checked.",
 "AccessCheckByTypeAndAuditAlarm": "A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.",
 "AccessCheckByTypeResultList": "A pointer to a SECURITY_DESCRIPTOR structure against which access is checked.",
 "AccessCheckByTypeResultListAndAuditAlarm": "A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.",
 "AccessCheckByTypeResultListAndAuditAlarmByHandle": "A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.",
 "AddAccessAllowedAce": "A pointer to an ACL. This function adds an access-allowed ACE to the end of this ACL. The ACE is in the form of an ACCESS_ALLOWED_ACE structure.",
 "AddAccessAllowedAceEx": "A pointer to a DACL. The AddAccessAllowedAceEx function adds an access-allowed ACE to the end of this DACL. The ACE is in the form of an ACCESS_ALLOWED_ACE structure.",
 "AddAccessAllowedObjectAce": "A pointer to a DACL. The AddAccessAllowedObjectAce function adds an access-allowed ACE to the end of this DACL. The ACE is in the form of an ACCESS_ALLOWED_OBJECT_ACE structure.",
 "AddAccessDeniedAce": "A pointer to an ACL . This function adds an access-denied ACE to the end of this ACL. The ACE is in the form of an ACCESS_DENIED_ACE structure.",
 "AddAccessDeniedAceEx": "A pointer to a DACL. The AddAccessDeniedAceEx function adds an access-denied ACE to the end of this DACL. The ACE is in the form of an ACCESS_DENIED_ACE structure.",
 "AddAccessDeniedObjectAce": "A pointer to a DACL. The AddAccessDeniedObjectAce function adds an access-denied ACE to the end of this DACL. The ACE is in the form of an ACCESS_DENIED_OBJECT_ACE structure.",
 "AddAce": "A pointer to an ACL. This function adds an ACE to this ACL.",
 "AddAuditAccessAce": "A pointer to an ACL. This function adds a system-audit ACE to this ACL. The ACE is in the form of a SYSTEM_AUDIT_ACE structure.",
 "AddAuditAccessAceEx": "A pointer to a SACL. The AddAuditAccessAceEx function adds a system-audit ACE to this SACL. The ACE is in the form of a SYSTEM_AUDIT_ACE structure.",
 "AddAuditAccessObjectAce": "A pointer to a SACL. The AddAuditAccessObjectAce function adds a system-audit ACE to the end of this SACL. The ACE is in the form of a SYSTEM_AUDIT_OBJECT_ACE structure.",
 "AddConditionalAce": "A pointer to an ACL. This function adds an ACE to this ACL. The value of this parameter cannot be NULL.",
 "AddMandatoryAce": "A pointer to an SACL. This function adds a mandatory ACE to the end of this SACL. The ACE is in the form of a SYSTEM_MANDATORY_LABEL_ACE structure.",
 "AddResourceAttributeAce": "A pointer to an access control list (ACL). This function adds an ACE to this ACL. The value of this parameter cannot be NULL. The ACE is in the form of a SYSTEM_RESOURCE_ATTRIBUTE_ACE structure.",
 "AddScopedPolicyIDAce": "A pointer to an access control list (ACL). This function adds an ACE to this ACL. The value of this parameter cannot be NULL.",
 "AdjustTokenGroups": "A handle to the access token that contains the groups to be enabled or disabled. The handle must have TOKEN_ADJUST_GROUPS access to the token. If the PreviousState parameter is not NULL, the handle must also have TOKEN_QUERY access.",
 "AdjustTokenPrivileges": "A handle to the access token that contains the privileges to be modified. The handle must have TOKEN_ADJUST_PRIVILEGES access to the token. If the PreviousState parameter is not NULL, the handle must also have TOKEN_QUERY access.",
 "AllocateAndInitializeSid": "A pointer to a SID_IDENTIFIER_AUTHORITY structure. This structure provides the top-level identifier authority value to set in the SID.",
 "AllocateLocallyUniqueId": "A pointer to a LUID structure that receives the allocated LUID.",
 "AreAllAccessesGranted": "An access mask that specifies the access rights that have been granted.",
 "AreAnyAccessesGranted": "Specifies the granted access mask.",
 "AuditComputeEffectivePolicyBySid": "A pointer to the SID structure associated with the principal for which to compute effective audit policy. Per-user policy for group SIDs is not currently supported.",
 "AuditComputeEffectivePolicyByToken": "A handle to the access token associated with the principal for which to compute effective audit policy. The token must have been opened with TOKEN_QUERY access. Per-user policy for group SIDs is not currently supported.",
 "AuditEnumerateCategories": "A pointer to a single buffer that contains both an array of pointers to GUID structures and the structures themselves. The GUID structures specify the audit-policy categories available on the computer. When you have finished using this buffer, free it by calling the AuditFree function.",
 "AuditEnumeratePerUserPolicy": "A pointer to a single buffer that contains both an array of pointers to POLICY_AUDIT_SID_ARRAY structures and the structures themselves. The POLICY_AUDIT_SID_ARRAY structures specify the users for whom per-user audit policy is specified. When you have finished using this buffer, free it by calling the AuditFree function.",
 "AuditEnumerateSubCategories": "The GUID of an audit-policy category for which subcategories are enumerated. If the value of the bRetrieveAllSubCategories parameter is TRUE, this parameter is ignored.",
 "AuditFree": "A pointer to the buffer to free.",
 "AuditLookupCategoryGuidFromCategoryId": "An element of the POLICY_AUDIT_EVENT_TYPE enumeration that specifies an audit-policy category.",
 "AuditLookupCategoryIdFromCategoryGuid": "A pointer to a GUID structure that specifies an audit-policy category.",
 "AuditLookupCategoryName": "A pointer to a GUID structure that specifies an audit-policy category.",
 "AuditLookupSubCategoryName": "A pointer to a GUID structure that specifies an audit-policy subcategory.",
 "AuditQueryGlobalSacl": "A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either \"File\" or \"Key\", depending on whether the object is a file or registry. This string appears in any audit message that the function generates.",
 "AuditQueryPerUserPolicy": "A pointer to the SID structure associated with the principal for which to query audit policy. Per-user policy for group SIDs is not currently supported.",
 "AuditQuerySecurity": "A SECURITY_INFORMATION value that specifies which parts of the security descriptor this function sets. Only SACL_SECURITY_INFORMATION and DACL_SECURITY_INFORMATION are supported. Any other values are ignored. If neither SACL_SECURITY_INFORMATION nor DACL_SECURITY_INFORMATION is specified, this function fails and returns ERROR_INVALID_PARAMETER.",
 "AuditQuerySystemPolicy": "A pointer to an array of GUID values that specify the subcategories for which to query audit policy. For a list of defined audit-policy subcategories, see Auditing Constants.",
 "AuditSetGlobalSacl": "A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to \"File\" and for setting the global SACL on registry, this should be set to \"Key\". This string appears in any audit message that the function generates.",
 "AuditSetPerUserPolicy": "A pointer to the SID structure associated with the principal for which to set audit policy. Per-user policy for group SIDs is not currently supported.",
 "AuditSetSecurity": "A SECURITY_INFORMATION value that specifies which parts of the security descriptor this function sets. Only SACL_SECURITY_INFORMATION and DACL_SECURITY_INFORMATION are supported. Any other values are ignored. If neither SACL_SECURITY_INFORMATION nor DACL_SECURITY_INFORMATION is specified, this function fails and returns ERROR_INVALID_PARAMETER.",
 "AuditSetSystemPolicy": "A pointer to an array of AUDIT_POLICY_INFORMATION structures. Each structure specifies system audit policy for one audit-policy subcategory. The AuditCategoryGuid member of these structures is ignored.",
 "AuthzAccessCheck": "A DWORD value that specifies how the security descriptor is copied. This parameter can be one of the following values. Starting with Windows 8 and Windows Server 2012, when you call this function on a remote context handle, the upper 16 bits must be zero. ValueMeaning 0 If phAccessCheckResults is not NULL, a deep copy of the security descriptor is copied to the handle referenced by phAccessCheckResults. AUTHZ_ACCESS_CHECK_NO_DEEP_COPY_SD 1 A deep copy of the security descriptor is not performed. The calling application must pass the address of an AUTHZ_ACCESS_CHECK_RESULTS_HANDLE handle in phAccessCheckResults. The AuthzAccessCheck function sets this handle to a security descriptor that must remain valid during subsequent calls to AuthzCachedAccessCheck.",
 "AuthzAccessCheckCallback": "A handle to a client context.",
 "AuthzInitializeResourceManager": "A DWORD value that defines how the resource manager is initialized. This parameter can contain the following values. ValueMeaning 0 Default call to the function. The resource manager is initialized as the principal identified in the process token, and auditing is in effect. Note that unless the AUTHZ_RM_FLAG_NO_AUDIT flag is set, SeAuditPrivilege must be enabled for the function to succeed. AUTHZ_RM_FLAG_NO_AUDIT Auditing is not in effect. If this flag is set, the caller does not need to have SeAuditPrivilege enabled to call this function. AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION The resource manager is initialized as the identity of the thread token. AUTHZ_RM_FLAG_NO_CENTRALIZED_ACCESS_POLICIES The resource manager ignores CAP IDs and does not evaluate centralized access policies. AUTHZ_RM_FLAG_NO_AUDIT and AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION can be bitwise-combined.",
 "AuthzAddSidsToContext": "An AUTHZ_CLIENT_CONTEXT_HANDLE structure to be copied as the basis for NewClientContext.",
 "AuthzCachedAccessCheck": "Reserved for future use.",
 "AuthzComputeGroupsCallback": "A handle to a client context.",
 "AuthzEnumerateSecurityEventSources": "Reserved for future use; set this parameter to zero.",
 "AuthzFreeAuditEvent": "A pointer to the AUTHZ_AUDIT_EVENT_HANDLE structure to be freed.",
 "AuthzInitializeObjectAccessAuditEvent": "Modifies the audit. This parameter can be one of the following values. ValueMeaning AUTHZ_NO_SUCCESS_AUDIT Disable generation of success audits. AUTHZ_NO_FAILURE_AUDIT Disable generation of failure audits. AUTHZ_NO_ALLOC_STRINGS Use pointers to the passed strings instead of allocating memory and copying the strings. The calling application must ensure that the passed memory stays valid during access checks.",
 "AuthzFreeCentralAccessPolicyCache": null,
 "AuthzFreeCentralAccessPolicyCallback": "Pointer to the central access policy to be freed.",
 "AuthzGetCentralAccessPolicyCallback": "Handle to the client context.",
 "AuthzFreeContext": "The AUTHZ_CLIENT_CONTEXT_HANDLE structure to be freed.",
 "AuthzFreeGroupsCallback": "A pointer to memory allocated by AuthzComputeGroupsCallback.",
 "AuthzFreeHandle": "A handle to be freed.",
 "AuthzFreeResourceManager": "The AUTHZ_RESOURCE_MANAGER_HANDLE to be freed.",
 "AuthzGetInformationFromContext": "A handle to the context.",
 "AuthzInitializeCompoundContext": "User context to create the compound context from.",
 "AuthzInitializeContextFromAuthzContext": "Reserved for future use.",
 "AuthzInitializeContextFromSid": "The following flags are defined. Starting with Windows 8 and Windows Server 2012, when you call this function on a remote context handle, the upper 16 bits must be zero. ValueMeaning 0 (0x0) Default value. AuthzInitializeContextFromSid attempts to retrieve the user's token group information by performing an S4U logon. If S4U logon is not supported by the user's domain or the calling computer, AuthzInitializeContextFromSid queries the user's account object for group information. When an account is queried directly, some groups that represent logon characteristics, such as Network, Interactive, Anonymous, Network Service, or Local Service, are omitted. Applications can explicitly add such group SIDs by implementing the AuthzComputeGroupsCallback function or calling the AuthzAddSidsToContext function. AUTHZ_SKIP_TOKEN_GROUPS 2 (0x2) Causes AuthzInitializeContextFromSid to skip all group evaluations. When this flag is used, the context returned contains only the SID specified by the UserSid parameter. The specified SID can be an arbitrary or application-specific SID. Other SIDs can be added to this context by implementing the AuthzComputeGroupsCallback function or by calling the AuthzAddSidsToContext function. AUTHZ_REQUIRE_S4U_LOGON 4 (0x4) Causes AuthzInitializeContextFromSid to fail if Windows Services For User is not available to retrieve token group information. Windows XP: This flag is not supported. AUTHZ_COMPUTE_PRIVILEGES 8 (0x8) Causes AuthzInitializeContextFromSid to retrieve privileges for the new context. If this function performs an S4U logon, it retrieves privileges from the token. Otherwise, the function retrieves privileges from all SIDs in the context.",
 "AuthzInitializeContextFromToken": "Reserved for future use.",
 "AuthzInitializeObjectAccessAuditEvent2": "Flags that modify the behavior of the audit. The following table shows the possible values. ValueMeaning AUTHZ_NO_ALLOC_STRINGS Uses pointers to the passed strings instead of allocating memory and copying the strings. The calling application must ensure that the passed memory remains valid during access checks. AUTHZ_NO_FAILURE_AUDIT Disables generation of failure audits. AUTHZ_NO_SUCCESS_AUDIT Disables generation of success audits.",
 "AuthzInitializeRemoteResourceManager": "Pointer to an AUTHZ_RPC_INIT_INFO_CLIENT structure containing the initial information needed to configure the connection.",
 "AuthzInitializeResourceManagerEx": "A DWORD value that defines how the resource manager is initialized. This parameter can be one or more of the following values. ValueMeaning 0 Default call to the function. The resource manager is initialized as the principal identified in the process token, and auditing is in effect. Unless the AUTHZ_RM_FLAG_NO_AUDIT flag is set, SeAuditPrivilege must be enabled for the function to succeed. AUTHZ_RM_FLAG_NO_AUDIT 1 Auditing is not in effect. If this flag is set, the caller does not need to have SeAuditPrivilege enabled to call this function. Use this flag if the resource manager will never generate an audit for best performance. AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION 2 The resource manager is initialized as the identity of the thread token. If the current thread is impersonating, then use the impersonation token as the identity of the resource manager. AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES 4 The central access policy IDs are ignored. Do not evaluate central access policies.",
 "AuthzInstallSecurityEventSource": "This parameter is reserved for future use and must be set to zero.",
 "AuthzModifyClaims": "A handle to the client context to be modified.",
 "AuthzModifySecurityAttributes": "A handle to the client context to be modified.",
 "AuthzModifySids": "A handle to the client context to be modified.",
 "AuthzOpenObjectAudit": "Reserved for future use.",
 "AuthzRegisterCapChangeNotification": "Pointer to the CAP change notification subscription handle. When you have finished using the handle, unsubscribe by passing this parameter to the AuthzUnregisterCapChangeNotification function.",
 "AuthzRegisterSecurityEventSource": "This parameter is reserved for future use. Set this parameter to zero.",
 "AuthzReportSecurityEvent": "Flags that specify the type of audit generated. The following table shows the possible values. ValueMeaning APF_AuditFailure 0x00000000 Failure audits are generated. APF_AuditSuccess 0x00000001 Success audits are generated.",
 "AuthzReportSecurityEventFromParams": "Reserved for future use.",
 "AuthzSetAppContainerInformation": "The handle to the client context to which the given app container SID and capability SIDs will be added.",
 "AuthzUninstallSecurityEventSource": "Reserved for future use; set this parameter to zero.",
 "AuthzUnregisterCapChangeNotification": "Handle of the CAP change notification subscription to unregister.",
 "AuthzUnregisterSecurityEventSource": "This parameter is reserved for future use. Set this parameter to zero.",
 "BuildExplicitAccessWithName": "A pointer to an EXPLICIT_ACCESS structure to initialize. The BuildExplicitAccessWithName function does not allocate any memory. This parameter cannot be NULL.",
 "BuildSecurityDescriptor": "A pointer to a TRUSTEE structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, BuildSecurityDescriptor looks up the security identifier (SID) associated with the specified trustee name. If this parameter is NULL, the function uses the owner SID from the original security descriptor pointed to by pOldSD. If pOldSD is NULL, or if the owner SID in pOldSD is NULL, the owner SID is NULL in the new security descriptor.",
 "BuildTrusteeWithName": "A pointer to a TRUSTEE structure to initialize. The BuildTrusteeWithName function does not allocate any memory. If this parameter is NULL or a pointer that is not valid, the results are undefined.",
 "BuildTrusteeWithObjectsAndName": "A pointer to a TRUSTEE structure that will be initialized by this function. If the value of this parameter is NULL or a pointer that is not valid, the results are undefined.",
 "BuildTrusteeWithObjectsAndSid": "A pointer to a TRUSTEE structure to initialize. The BuildTrusteeWithObjectsAndSid function does not allocate any memory. If this parameter is NULL or a pointer that is not valid, the results are undefined.",
 "BuildTrusteeWithSid": "A pointer to a TRUSTEE structure to initialize. The BuildTrusteeWithSid function does not allocate any memory. If this parameter is NULL or a pointer that is not valid, the results are undefined.",
 "CheckTokenCapability": "A handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an impersonation token. If TokenHandle is NULL, CheckTokenCapability uses the impersonation token of the calling thread. If the thread is not impersonating, the function duplicates the thread's primary token to create an impersonation token.",
 "CheckTokenMembershipEx": "A handle to an access token. If present, this token is checked for the SID. If not present, then the current effective token is used. This must be an impersonation token.",
 "ConvertSecurityDescriptorToStringSecurityDescriptor": "A pointer to the security descriptor to convert. The security descriptor can be in absolute or self-relative format.",
 "ConvertSidToStringSid": "A pointer to the SID structure to be converted.",
 "ConvertStringSecurityDescriptorToSecurityDescriptor": "A pointer to a null-terminated string containing the string-format security descriptor to convert.",
 "ConvertStringSidToSid": "A pointer to a null-terminated string containing the string-format SID to convert. ...",
 "ConvertToAutoInheritPrivateObjectSecurity": "A pointer to the security descriptor for the parent container of the object. If there is no parent container, this parameter is NULL.",
 "CopySid": "Specifies the length, in bytes, of the buffer receiving the copy of the SID.",
 "CreatePrivateObjectSecurity": "A pointer to the security descriptor for the parent directory in which a new object is being created. If there is no parent directory, this parameter can be NULL.",
 "CreatePrivateObjectSecurityEx": "A pointer to the security descriptor for the parent container of the object. If there is no parent container, this parameter is NULL.",
 "CreatePrivateObjectSecurityWithMultipleInheritance": "A pointer to the security descriptor for the parent container of the object. If there is no parent container, this parameter is NULL.",
 "CreateRestrictedToken": "A handle to a primary or impersonation token. The token can also be a restricted token. The handle must have TOKEN_DUPLICATE access to the token.",
 "CreateSecurityPage": "A pointer to your implementation of the ISecurityInformation interface. The system calls the interface methods to retrieve information about the object being edited and to return the user's input.",
 "CreateWellKnownSid": "Member of the WELL_KNOWN_SID_TYPE enumeration that specifies what the SID will identify.",
 "DeleteAce": "A pointer to an ACL. The ACE specified by the dwAceIndex parameter is removed from this ACL.",
 "DestroyPrivateObjectSecurity": "A pointer to a pointer to the SECURITY_DESCRIPTOR structure to be deleted. This security descriptor must have been created by a call to the CreatePrivateObjectSecurity function.",
 "DSCreateSecurityPage": "A pointer to a null-terminated wide character string that represents the full Active Directory path for the object.",
 "DSCreateISecurityInfoObject": "The full path of the DS object for which to create an instance of the ISecurityInformation interface.",
 "DSCreateISecurityInfoObjectEx": "The full path of the DS object for which to create an instance of the ISecurityInformation interface.",
 "DSEditSecurity": "The dialog box owner window.",
 "DuplicateToken": "A handle to an access token opened with TOKEN_DUPLICATE access.",
 "DuplicateTokenEx": "A handle to an access token opened with TOKEN_DUPLICATE access.",
 "EditSecurity": "A handle to the window that owns the property sheet. This parameter can be NULL.",
 "EditSecurityAdvanced": "A handle to the window that owns the property sheet. This parameter can be NULL.",
 "EqualDomainSid": "A pointer to one of the two SIDs to compare. This SID must be either an account domain SID or a BUILTIN SID.",
 "EqualPrefixSid": "A pointer to the first SID structure to compare. This structure is assumed to be valid.",
 "EqualSid": "A pointer to the first SID structure to compare. This structure is assumed to be valid.",
 "FindFirstFreeAce": "A pointer to an ACL.",
 "FreeInheritedFromArray": "A pointer to the array of INHERITED_FROM structures returned by GetInheritanceSource.",
 "GetInheritanceSource": "A pointer to the name of the object that uses the ACL to be checked.",
 "FreeSid": "A pointer to the SID structure to free.",
 "GetAce": "A pointer to an ACL that contains the ACE to be retrieved.",
 "GetAclInformation": "A pointer to an ACL. The function retrieves information about this ACL. If a null value is passed, the function causes an access violation.",
 "GetAppContainerNamedObjectPath": "A handle pertaining to the token. If NULL is passed in and no AppContainerSid parameter is passed in, the caller's current process token is used, or the thread token if impersonating.",
 "GetAuditedPermissionsFromAcl": "A pointer to an ACL structure from which to get the trustee's audited access rights.",
 "GetCurrentProcessToken": null,
 "GetCurrentThreadEffectiveToken": null,
 "GetCurrentThreadToken": null,
 "GetEffectiveRightsFromAcl": "A pointer to an ACL structure from which to get the trustee's effective access rights.",
 "GetExplicitEntriesFromAcl": "A pointer to an ACL structure from which to get ACE information.",
 "GetFileSecurity": "A pointer to a null-terminated string that specifies the file or directory for which security information is retrieved.",
 "GetKernelObjectSecurity": "A handle to a kernel object.",
 "GetLengthSid": "A pointer to the SID structure whose length is returned. The structure is assumed to be valid.",
 "GetNamedSecurityInfo": "A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see SE_OBJECT_TYPE.",
 "GetPrivateObjectSecurity": "A pointer to a SECURITY_DESCRIPTOR structure. This is the security descriptor to be queried.",
 "GetSecurityDescriptorControl": "A pointer to a SECURITY_DESCRIPTOR structure whose control and revision information the function retrieves.",
 "GetSecurityDescriptorDacl": "A pointer to the SECURITY_DESCRIPTOR structure that contains the DACL. The function retrieves a pointer to it.",
 "GetSecurityDescriptorGroup": "A pointer to a SECURITY_DESCRIPTOR structure whose primary group information the function retrieves.",
 "GetSecurityDescriptorLength": "A pointer to the SECURITY_DESCRIPTOR structure whose length the function returns. The pointer is assumed to be valid.",
 "GetSecurityDescriptorOwner": "A pointer to a SECURITY_DESCRIPTOR structure whose owner information the function retrieves.",
 "GetSecurityDescriptorRMControl": "A pointer to a SECURITY_DESCRIPTOR structure that contains the resource manager control bits. The value of the Control member is set to SE_RM_CONTROL_VALID.",
 "GetSecurityDescriptorSacl": "A pointer to the SECURITY_DESCRIPTOR structure that contains the SACL to which the function retrieves a pointer.",
 "GetSecurityInfo": "A handle to the object from which to retrieve security information.",
 "GetSidIdentifierAuthority": "A pointer to the SID structure for which a pointer to the SID_IDENTIFIER_AUTHORITY structure is returned. This function does not handle SID structures that are not valid. Call the IsValidSid function to verify that the SID structure is valid before you call this function.",
 "GetSidLengthRequired": "Specifies the number of subauthorities to be stored in the SID structure.",
 "GetSidSubAuthority": "A pointer to the SID structure from which a pointer to a subauthority is to be returned. This function does not handle SID structures that are not valid. Call the IsValidSid function to verify that the SID structure is valid before you call this function.",
 "GetSidSubAuthorityCount": "A pointer to the SID structure from which a pointer to the subauthority count is returned. This function does not handle SID structures that are not valid. Call the IsValidSid function to verify that the SID structure is valid before you call this function.",
 "GetTokenInformation": "A handle to an access token from which information is retrieved. If TokenInformationClass specifies TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values, the handle must have TOKEN_QUERY access.",
 "GetTrusteeForm": "A pointer to a TRUSTEE structure.",
 "GetTrusteeName": "A pointer to a TRUSTEE structure.",
 "GetTrusteeType": "A pointer to a TRUSTEE structure.",
 "GetUserObjectSecurity": "A handle to the user object for which to return security information.",
 "GetWindowsAccountDomainSid": "A pointer to the SID to examine.",
 "ImpersonateAnonymousToken": "A handle to the thread to impersonate the system's anonymous logon token.",
 "ImpersonateLoggedOnUser": "A handle to a primary or impersonation access token that represents a logged-on user. This can be a token handle returned by a call to LogonUser, CreateRestrictedToken, DuplicateToken, DuplicateTokenEx, OpenProcessToken, or OpenThreadToken functions. If hToken is a handle to a primary token, the token must have TOKEN_QUERY and TOKEN_DUPLICATE access. If hToken is a handle to an impersonation token, the token must have TOKEN_QUERY and TOKEN_IMPERSONATE access.",
 "ImpersonateSelf": "Specifies a SECURITY_IMPERSONATION_LEVEL enumerated type that supplies the impersonation level of the new token.",
 "InitializeAcl": "A pointer to an ACL structure to be initialized by this function. Allocate memory for pAcl before calling this function.",
 "InitializeSecurityDescriptor": "A pointer to a SECURITY_DESCRIPTOR structure that the function initializes.",
 "InitializeSid": "A pointer to a SID structure to be initialized.",
 "IsTokenRestricted": "A handle to an access token to test.",
 "IsValidAcl": "A pointer to an ACL structure validated by this function. This value must not be NULL.",
 "IsValidSecurityDescriptor": "A pointer to a SECURITY_DESCRIPTOR structure that the function validates.",
 "IsValidSid": "A pointer to the SID structure to validate. This parameter cannot be NULL.",
 "IsWellKnownSid": "A pointer to the SID to test.",
 "LookupAccountName": "A pointer to a null-terminated character string that specifies the name of the system. This string can be the name of a remote computer. If this string is NULL, the account name translation begins on the local system. If the name cannot be resolved on the local system, this function will try to resolve the name using domain controllers trusted by the local system. Generally, specify a value for lpSystemName only when the account is in an untrusted domain and the name of a computer in that domain is known.",
 "LookupAccountSid": "A pointer to a null-terminated character string that specifies the target computer. This string can be the name of a remote computer. If this parameter is NULL, the account name translation begins on the local system. If the name cannot be resolved on the local system, this function will try to resolve the name using domain controllers trusted by the local system. Generally, specify a value for lpSystemName only when the account is in an untrusted domain and the name of a computer in that domain is known.",
 "LookupAccountSidLocal": "A pointer to the SID to look up.",
 "LookupPrivilegeDisplayName": "A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified, the function attempts to find the display name on the local system.",
 "LookupPrivilegeName": "A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified, the function attempts to find the privilege name on the local system.",
 "LookupPrivilegeValue": "A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified, the function attempts to find the privilege name on the local system.",
 "LookupSecurityDescriptorParts": "A pointer to a variable that receives a pointer to a TRUSTEE structure. The function looks up the name associated with the owner security identifier (SID) in the pSD security descriptor, and returns a pointer to the name in the ptstrName member of the TRUSTEE structure. The function sets the TrusteeForm member to TRUSTEE_IS_NAME. This parameter can be NULL if you are not interested in the name of the owner.",
 "MakeAbsoluteSD": "A pointer to a SECURITY_DESCRIPTOR structure in self-relative format. The function creates an absolute-format version of this security descriptor without modifying the original security descriptor.",
 "MakeSelfRelativeSD": "A pointer to a SECURITY_DESCRIPTOR structure in absolute format. The function creates a version of this security descriptor in self-relative format without modifying the original.",
 "MapGenericMask": "A pointer to an access mask.",
 "NtCompareTokens": "A handle to the first access token to compare. The token must be open for TOKEN_QUERY access.",
 "ObjectCloseAuditAlarm": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.",
 "ObjectDeleteAuditAlarm": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.",
 "ObjectOpenAuditAlarm": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.",
 "ObjectPrivilegeAuditAlarm": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in the audit message.",
 "OpenProcessToken": "A handle to the process whose access token is opened. The process must have the PROCESS_QUERY_INFORMATION access permission.",
 "OpenThreadToken": "A handle to the thread whose access token is opened.",
 "PrivilegeCheck": "A handle to an access token representing a client process. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access.",
 "PrivilegedServiceAuditAlarm": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This information appears in the security event log record.",
 "QuerySecurityAccessMask": "A SECURITY_INFORMATION structure that specifies the security information to be queried.",
 "RevertToSelf": null,
 "RtlConvertSidToUnicodeString": "A pointer to the Unicode character representation of the security identifier.",
 "SetAclInformation": "A pointer to an ACL. The function sets information in this ACL.",
 "SetEntriesInAcl": "The number of EXPLICIT_ACCESS structures in the pListOfExplicitEntries array.",
 "SetFileSecurity": "A pointer to a null-terminated string that specifies the file or directory for which security is set. Note that security applied to a directory is not inherited by its children.",
 "SetKernelObjectSecurity": "A handle to a kernel object for which security information is set.",
 "SetNamedSecurityInfo": "A pointer to a null-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer. For descriptions of the string formats for the different object types, see SE_OBJECT_TYPE.",
 "SetPrivateObjectSecurity": "Indicates the parts of the security descriptor to set. This value can be a combination of the SECURITY_INFORMATION bit flags.",
 "SetPrivateObjectSecurityEx": "The parts of the security descriptor to set. This value can be a combination of the SECURITY_INFORMATION bit flags.",
 "SetSecurityAccessMask": "A SECURITY_INFORMATION structure that specifies the security information to be set.",
 "SetSecurityDescriptorControl": "A pointer to a SECURITY_DESCRIPTOR structure whose control and revision information are set.",
 "SetSecurityDescriptorDacl": "A pointer to the SECURITY_DESCRIPTOR structure to which the function adds the DACL. This security descriptor must be in absolute format, meaning that its members must be pointers to other structures, rather than offsets to contiguous data.",
 "SetSecurityDescriptorGroup": "A pointer to the SECURITY_DESCRIPTOR structure whose primary group is set by this function. The function replaces any existing primary group with the new primary group.",
 "SetSecurityDescriptorOwner": "A pointer to the SECURITY_DESCRIPTOR structure whose owner is set by this function. The function replaces any existing owner with the new owner.",
 "SetSecurityDescriptorRMControl": "A pointer to a SECURITY_DESCRIPTOR structure that contains the resource manager control bits.",
 "SetSecurityDescriptorSacl": "A pointer to the SECURITY_DESCRIPTOR structure to which the function adds the SACL. This security descriptor must be in absolute format, meaning that its members must be pointers to other structures, rather than offsets to contiguous data.",
 "SetSecurityInfo": "A handle to the object for which to set security information.",
 "SetThreadToken": "A pointer to a handle to the thread to which the function assigns the impersonation token. If Thread is NULL, the function assigns the impersonation token to the calling thread.",
 "SetTokenInformation": "A handle to the access token for which information is to be set.",
 "SetUserObjectSecurity": "A handle to a user object for which security information is set.",
 "TreeResetNamedSecurityInfo": "Pointer to a null-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see SE_OBJECT_TYPE.",
 "TreeSetNamedSecurityInfo": "Pointer to a null-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see SE_OBJECT_TYPE.",
 "NetShareGetInfo": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetShareSetInfo": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "AdjustWindowRect": "Type: LPRECT A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.",
 "AdjustWindowRectEx": "Type: LPRECT A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.",
 "AllowSetForegroundWindow": "Type: DWORD The identifier of the process that will be enabled to set the foreground window. If this parameter is ASFW_ANY, all processes will be enabled to set the foreground window.",
 "AnimateWindow": "Type: HWND A handle to the window to animate. The calling thread must own this window.",
 "AnyPopup": null,
 "ArrangeIconicWindows": "Type: HWND A handle to the parent window.",
 "BeginDeferWindowPos": "Type: int The initial number of windows for which to store position information. The DeferWindowPos function increases the size of the structure, if necessary.",
 "BringWindowToTop": "Type: HWND A handle to the window to bring to the top of the Z order.",
 "CalculatePopupWindowPosition": "Type: const POINT* The specified anchor point.",
 "CascadeWindows": "Type: HWND A handle to the parent window. If this parameter is NULL, the desktop window is assumed.",
 "ChangeWindowMessageFilter": "Type: UINT The message to add to or remove from the filter.",
 "ChangeWindowMessageFilterEx": "Type: HWND A handle to the window whose UIPI message filter is to be modified.",
 "ChildWindowFromPoint": "Type: HWND A handle to the parent window.",
 "ChildWindowFromPointEx": "Type: HWND A handle to the parent window.",
 "CloseWindow": "Type: HWND A handle to the window to be minimized.",
 "CreateWindow": "Type: LPCTSTR A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.",
 "CreateWindowEx": "Type: DWORD The extended window style of the window being created. For a list of possible values,see Extended Window Styles.",
 "DeferWindowPos": "Type: HDWP A handle to a multiple-window \t\t\t\t\t– position structure that contains size and position information for one or more windows. ...",
 "DeregisterShellHookWindow": "Type: HWND A handle to the window to be unregistered. The window was registered with a call to the \t\tRegisterShellHookWindow function.",
 "DestroyWindow": "Type: HWND A handle to the window to be destroyed.",
 "EndDeferWindowPos": "Type: HDWP A handle to a multiple-window \t\t\t\t\t– position structure that contains size and position information for one or more windows. ...",
 "EndTask": "Type: HWND A handle to the window to be closed.",
 "EnumChildProc": "A handle to a child window of the parent window specified in EnumChildWindows.",
 "EnumChildWindows": "Type: HWND A handle to the parent window whose child windows are to be enumerated. If this parameter is NULL, this function is equivalent to EnumWindows.",
 "EnumThreadWindows": "Type: DWORD The identifier of the thread whose windows are to be enumerated.",
 "EnumThreadWndProc": "A handle to a window associated with the thread specified in the EnumThreadWindows function.",
 "EnumWindows": "Type: WNDENUMPROC A pointer to an application-defined callback function. For more information, see EnumWindowsProc.",
 "EnumWindowsProc": "A handle to a top-level window.",
 "FindWindow": "Type: LPCTSTR The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names. If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.",
 "FindWindowEx": "Type: HWND A handle to the parent window whose child windows are to be searched. If hwndParent is NULL, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop. If hwndParent is HWND_MESSAGE, the function searches all message-only windows.",
 "GetAltTabInfo": "Type: HWND A handle to the window for which status information will be retrieved. This window must be the application-switching window.",
 "GetAncestor": "Type: HWND A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window, the function returns NULL.",
 "GetClientRect": "Type: HWND A handle to the window whose client coordinates are to be retrieved.",
 "GetDesktopWindow": null,
 "GetForegroundWindow": null,
 "GetGUIThreadInfo": "Type: DWORD The identifier for the thread for which information is to be retrieved. To retrieve this value, use the GetWindowThreadProcessId function. If this parameter is NULL, the function returns information for the foreground thread.",
 "GetLastActivePopup": "Type: HWND A handle to the owner window.",
 "GetLayeredWindowAttributes": "Type: HWND A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED using SetWindowLong after the window has been created.",
 "GetNextWindow": "Type: HWND A handle to a window. The window handle retrieved is relative to this window, based on the value of the wCmd parameter.",
 "GetParent": "Type: HWND A handle to the window whose parent window handle is to be retrieved.",
 "GetProcessDefaultLayout": "Type: DWORD* The current default process layout. For a list of values, see SetProcessDefaultLayout.",
 "GetShellWindow": null,
 "GetSysColor": "Type: int The display element whose color is to be retrieved. This parameter can be one of the following values. ValueMeaning COLOR_3DDKSHADOW 21 Dark shadow for three-dimensional display elements. COLOR_3DFACE 15 Face color for three-dimensional display elements and for dialog box backgrounds. COLOR_3DHIGHLIGHT 20 Highlight color for three-dimensional display elements (for edges facing the light source.) COLOR_3DHILIGHT 20 Highlight color for three-dimensional display elements (for edges facing the light source.) COLOR_3DLIGHT 22 Light color for three-dimensional display elements (for edges facing the light source.) COLOR_3DSHADOW 16 Shadow color for three-dimensional display elements (for edges facing away from the light source). COLOR_ACTIVEBORDER 10 Active window border. COLOR_ACTIVECAPTION 2 Active window title bar. Specifies the left side color in the color gradient of an active window's title bar if the gradient effect is enabled. COLOR_APPWORKSPACE 12 Background color of multiple document interface (MDI) applications. COLOR_BACKGROUND 1 Desktop. COLOR_BTNFACE 15 Face color for three-dimensional display elements and for dialog box backgrounds. COLOR_BTNHIGHLIGHT 20 Highlight color for three-dimensional display elements (for edges facing the light source.) COLOR_BTNHILIGHT 20 Highlight color for three-dimensional display elements (for edges facing the light source.) COLOR_BTNSHADOW 16 Shadow color for three-dimensional display elements (for edges facing away from the light source). COLOR_BTNTEXT 18 Text on push buttons. COLOR_CAPTIONTEXT 9 Text in caption, size box, and scroll bar arrow box. COLOR_DESKTOP 1 Desktop. COLOR_GRADIENTACTIVECAPTION 27 Right side color in the color gradient of an active window's title bar. COLOR_ACTIVECAPTION specifies the left side color. Use SPI_GETGRADIENTCAPTIONS with the SystemParametersInfo function to determine whether the gradient effect is enabled. COLOR_GRADIENTINACTIVECAPTION 28 Right side color in the color gradient of an inactive window's title bar. COLOR_INACTIVECAPTION specifies the left side color. COLOR_GRAYTEXT 17 Grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color. COLOR_HIGHLIGHT 13 Item(s) selected in a control. COLOR_HIGHLIGHTTEXT 14 Text of item(s) selected in a control. COLOR_HOTLIGHT 26 Color for a hyperlink or hot-tracked item. COLOR_INACTIVEBORDER 11 Inactive window border. COLOR_INACTIVECAPTION 3 Inactive window caption. Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled. COLOR_INACTIVECAPTIONTEXT 19 Color of text in an inactive caption. COLOR_INFOBK 24 Background color for tooltip controls. COLOR_INFOTEXT 23 Text color for tooltip controls. COLOR_MENU 4 Menu background. COLOR_MENUHILIGHT 29 The color used to highlight menu items when the menu appears as a flat menu (see SystemParametersInfo). The highlighted menu item is outlined with COLOR_HIGHLIGHT. Windows 2000: This value is not supported. COLOR_MENUBAR 30 The background color for the menu bar when menus appear as flat menus (see SystemParametersInfo). However, COLOR_MENU continues to specify the background color of the menu popup. Windows 2000: This value is not supported. COLOR_MENUTEXT 7 Text in menus. COLOR_SCROLLBAR 0 Scroll bar gray area. COLOR_WINDOW 5 Window background. COLOR_WINDOWFRAME 6 Window frame. COLOR_WINDOWTEXT 8 Text in windows.",
 "GetTitleBarInfo": "Type: HWND A handle to the title bar whose information is to be retrieved.",
 "GetTopWindow": "Type: HWND A handle to the parent window whose child windows are to be examined. If this parameter is NULL, the function returns a handle to the window at the top of the Z order.",
 "GetWindow": "Type: HWND A handle to a window. The window handle retrieved is relative to this window, based on the value of the uCmd parameter.",
 "GetWindowDisplayAffinity": "Type: HWND A handle to the window.",
 "GetWindowInfo": "Type: HWND A handle to the window whose information is to be retrieved.",
 "GetWindowModuleFileName": "Type: HWND A handle to the window whose module file name is to be retrieved.",
 "GetWindowPlacement": "Type: HWND A handle to the window.",
 "GetWindowRect": "Type: HWND A handle to the window.",
 "GetWindowText": "Type: HWND A handle to the window or control containing the text.",
 "GetWindowTextLength": "Type: HWND A handle to the window or control.",
 "GetWindowThreadProcessId": "Type: HWND A handle to the window.",
 "InternalGetWindowText": "Type: HWND A handle to the window or control containing the text.",
 "IsChild": "Type: HWND A handle to the parent window.",
 "IsGUIThread": "Type: BOOL If TRUE and the thread is not a GUI thread, convert the thread to a GUI thread.",
 "IsHungAppWindow": "Type: HWND A handle to the window to be tested.",
 "IsIconic": "Type: HWND A handle to the window to be tested.",
 "IsProcessDPIAware": null,
 "IsWindow": "Type: HWND A handle to the window to be tested.",
 "IsWindowUnicode": "Type: HWND A handle to the window to be tested.",
 "IsWindowVisible": "Type: HWND A handle to the window to be tested.",
 "IsZoomed": "Type: HWND A handle to the window to be tested.",
 "LockSetForegroundWindow": "Type: UINT Specifies whether to enable or disable calls to SetForegroundWindow. This parameter can be one of the following values. ValueMeaning LSFW_LOCK 1 Disables calls to SetForegroundWindow. LSFW_UNLOCK 2 Enables calls to SetForegroundWindow.",
 "LogicalToPhysicalPoint": "Type: HWND A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.",
 "MoveWindow": "Type: HWND A handle to the window.",
 "OpenIcon": "Type: HWND A handle to the window to be restored and activated.",
 "PhysicalToLogicalPoint": "Type: HWND A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.",
 "RealChildWindowFromPoint": "Type: HWND A handle to the window whose child is to be retrieved.",
 "RealGetWindowClass": "Type: HWND A handle to the window whose type will be retrieved.",
 "RegisterShellHookWindow": "Type: HWND A handle to the window to register for Shell hook messages.",
 "SetForegroundWindow": "Type: HWND A handle to the window that should be activated and brought to the foreground.",
 "SetLayeredWindowAttributes": "Type: HWND A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED via SetWindowLong after the window has been created. Windows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.",
 "SetParent": "Type: HWND A handle to the child window.",
 "SetProcessDefaultLayout": "Type: DWORD The default process layout. This parameter can be 0 or the following value. ValueMeaning LAYOUT_RTL 0x00000001 Sets the default horizontal layout to be right to left.",
 "SetProcessDPIAware": null,
 "SetSysColors": "Type: int The number of display elements in the lpaElements array.",
 "SetWindowDisplayAffinity": "Type: HWND A handle to the window.",
 "SetWindowFeedbackSettings": "The handle of the window to query.",
 "SetWindowPlacement": "Type: HWND A handle to the window.",
 "SetWindowPos": "Type: HWND A handle to the window.",
 "SetWindowText": "Type: HWND A handle to the window or control whose text is to be changed.",
 "ShowOwnedPopups": "Type: HWND A handle to the window that owns the pop-up windows to be shown or hidden.",
 "ShowWindow": "Type: HWND A handle to the window.",
 "ShowWindowAsync": "Type: HWND A handle to the window.",
 "SoundSentry": null,
 "SwitchToThisWindow": "Type: HWND A handle to the window.",
 "TileWindows": "Type: HWND A handle to the parent window. If this parameter is NULL, the desktop window is assumed.",
 "UpdateLayeredWindow": "Type: HWND A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function. Windows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.",
 "UpdateLayeredWindowIndirect": "Type: HWND A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function. Windows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.",
 "WindowFromPhysicalPoint": "Type: POINT The physical coordinates of the point.",
 "APCProc": "The data passed to the function using the dwData parameter of the QueueUserAPC function.",
 "QueueUserAPC": "A pointer to the application-supplied APC function to be called when the specified thread performs an alertable wait operation. For more information, see APCProc.",
 "GetOverlappedResult": "A handle to the file, named pipe, or communications device. This is the same handle that was specified when the overlapped operation was started by a call to the ReadFile, WriteFile, ConnectNamedPipe, TransactNamedPipe, DeviceIoControl, or WaitCommEvent function.",
 "GetOverlappedResultEx": "A handle to the file, named pipe, or communications device. This is the same handle that was specified when the overlapped operation was started by a call to the ReadFile, WriteFile, ConnectNamedPipe, TransactNamedPipe, DeviceIoControl, or WaitCommEvent function.",
 "AcquireSRWLockExclusive": "A pointer to the SRW lock.",
 "AcquireSRWLockShared": "A pointer to the SRW lock.",
 "InitializeConditionVariable": "A pointer to the condition variable.",
 "InitializeSRWLock": "A pointer to the SRW lock.",
 "ReleaseSRWLockExclusive": "A pointer to the SRW lock.",
 "ReleaseSRWLockShared": "A pointer to the SRW lock.",
 "SleepConditionVariableCS": "A pointer to the condition variable. This variable must be initialized using the InitializeConditionVariable function.",
 "SleepConditionVariableSRW": "A pointer to the condition variable. This variable must be initialized using the InitializeConditionVariable function.",
 "TryAcquireSRWLockExclusive": "A pointer to the SRW lock.",
 "TryAcquireSRWLockShared": "A pointer to the SRW lock.",
 "WakeAllConditionVariable": "A pointer to the condition variable.",
 "WakeConditionVariable": "A pointer to the condition variable.",
 "DeleteCriticalSection": "A pointer to the critical section object. The object must have been previously initialized with the InitializeCriticalSection function.",
 "EnterCriticalSection": "A pointer to the critical section object.",
 "InitializeCriticalSection": "A pointer to the critical section object.",
 "InitializeCriticalSectionAndSpinCount": "A pointer to the critical section object.",
 "InitializeCriticalSectionEx": "A pointer to the critical section object.",
 "LeaveCriticalSection": "A pointer to the critical section object.",
 "SetCriticalSectionSpinCount": "A pointer to the critical section object.",
 "TryEnterCriticalSection": "A pointer to the critical section object.",
 "CreateEvent": "A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the handle cannot be inherited by child processes. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new event. If lpEventAttributes is NULL, the event gets a default security descriptor. The ACLs in the default security descriptor for an event come from the primary or impersonation token of the creator.",
 "CreateEventEx": "A pointer to a SECURITY_ATTRIBUTES structure. If lpEventAttributes is NULL, the event handle cannot be inherited by child processes. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new event. If lpEventAttributes is NULL, the event gets a default security descriptor. The ACLs in the default security descriptor for an event come from the primary or impersonation token of the creator.",
 "OpenEvent": "The access to the event object. The function fails if the security descriptor of the specified object does not permit the requested access for the calling process. For a list of access rights, see Synchronization Object Security and Access Rights.",
 "PulseEvent": "A handle to the event object. The CreateEvent or OpenEvent function returns this handle. The handle must have the EVENT_MODIFY_STATE access right. For more information, see Synchronization Object Security and Access Rights.",
 "ResetEvent": "A handle to the event object. The CreateEvent or OpenEvent function returns this handle. The handle must have the EVENT_MODIFY_STATE access right. For more information, see Synchronization Object Security and Access Rights.",
 "SetEvent": "A handle to the event object. The CreateEvent or OpenEvent function returns this handle. The handle must have the EVENT_MODIFY_STATE access right. For more information, see Synchronization Object Security and Access Rights.",
 "InitOnceBeginInitialize": "A pointer to the one-time initialization structure.",
 "InitOnceComplete": "A pointer to the one-time initialization structure.",
 "InitOnceExecuteOnce": "A pointer to the one-time initialization structure.",
 "InitOnceInitialize": "A pointer to the one-time initialization structure.",
 "InterlockedAdd": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAddAcquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAddRelease": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAddNoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAdd64": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAddAcquire64": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAddRelease64": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAddNoFence64": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAndAcquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAndRelease": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAndNoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd8": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd8Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd8Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd8NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd16": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd16Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd16Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd16NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd64": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd64Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd64Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedAnd64NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedBitTestAndComplement": "A pointer to a variable.",
 "InterlockedBitTestAndComplement64": "A pointer to a variable.",
 "InterlockedBitTestAndResetAcquire": "A pointer to a variable.",
 "InterlockedBitTestAndResetRelease": "A pointer to a variable.",
 "InterlockedBitTestAndSetAcquire": "A pointer to a variable.",
 "InterlockedBitTestAndSetRelease": "A pointer to a variable.",
 "InterlockedBitTestAndReset": "A pointer to a variable.",
 "InterlockedBitTestAndReset64": "A pointer to a variable.",
 "InterlockedBitTestAndSet": "A pointer to a variable.",
 "InterlockedCompare64Exchange128": "A pointer to the destination value.",
 "InterlockedCompare64ExchangeAcquire128": "A pointer to the destination value.",
 "InterlockedCompare64ExchangeRelease128": "A pointer to the destination value.",
 "InterlockedCompareExchange": "A pointer to the destination value.",
 "InterlockedCompareExchangeAcquire": "A pointer to the destination value.",
 "InterlockedCompareExchangeRelease": "A pointer to the destination value.",
 "InterlockedCompareExchangeNoFence": "A pointer to the destination value.",
 "InterlockedCompareExchange64": "A pointer to the destination value.",
 "InterlockedCompareExchangeAcquire64": "A pointer to the destination value.",
 "InterlockedCompareExchangeRelease64": "A pointer to the destination value.",
 "InterlockedCompareExchangeNoFence64": "A pointer to the destination value.",
 "InterlockedCompareExchange16": "A pointer to the destination value.",
 "InterlockedCompareExchange16Acquire": "A pointer to the destination value.",
 "InterlockedCompareExchange16Release": "A pointer to the destination value.",
 "InterlockedCompareExchange16NoFence": "A pointer to the destination value.",
 "InterlockedCompareExchange128": "A pointer to the destination value. This parameter is an array of two 64-bit integers considered as a 128-bit field.",
 "InterlockedCompareExchangePointer": "A pointer to a pointer to the destination value.",
 "InterlockedCompareExchangePointerAcquire": "A pointer to a pointer to the destination value.",
 "InterlockedCompareExchangePointerRelease": "A pointer to a pointer to the destination value.",
 "InterlockedCompareExchangePointerNoFence": "A pointer to a pointer to the destination value.",
 "InterlockedDecrement": "A pointer to the variable to be decremented.",
 "InterlockedDecrementAcquire": "A pointer to the variable to be decremented.",
 "InterlockedDecrementRelease": "A pointer to the variable to be decremented.",
 "InterlockedDecrementNoFence": "A pointer to the variable to be decremented.",
 "InterlockedDecrement16": "A pointer to the variable to be decremented.",
 "InterlockedDecrement16Acquire": "A pointer to the variable to be decremented.",
 "InterlockedDecrement16Release": "A pointer to the variable to be decremented.",
 "InterlockedDecrement16NoFence": "",
 "InterlockedDecrement64": "A pointer to the variable to be decremented.",
 "InterlockedDecrementAcquire64": "A pointer to the variable to be decremented.",
 "InterlockedDecrementRelease64": "A pointer to the variable to be decremented.",
 "InterlockedDecrementNoFence64": "A pointer to the variable to be decremented.",
 "InterlockedExchange": "A pointer to the value to be exchanged. The function sets this variable to Value, and returns its prior value.",
 "InterlockedExchangeAcquire": "A pointer to the value to be exchanged. The function sets this variable to Value, and returns its prior value.",
 "InterlockedExchangeNoFence": "A pointer to the value to be exchanged. The function sets this variable to Value, and returns its prior value.",
 "InterlockedExchange8": "A pointer to the value to be exchanged. The function sets this variable to Value, and returns its prior value.",
 "InterlockedExchange16": "A pointer to the value to be exchanged. The function sets this variable to ExChange, and returns its prior value.",
 "InterlockedExchange16Acquire": "A pointer to the value to be exchanged. The function sets this variable to Value, and returns its prior value.",
 "InterlockedExchange16NoFence": "A pointer to the value to be exchanged. The function sets this variable to ExChange, and returns its prior value.",
 "InterlockedExchange64": "A pointer to the value to be exchanged. The function sets this variable to Value, and returns its prior value.",
 "InterlockedExchangeAcquire64": "A pointer to the value to exchange. The function sets the value of this parameter to the value of the Value parameter, and returns the prior value of this parameter.",
 "InterlockedExchangeNoFence64": "A pointer to the value to be exchanged. The function sets this variable to Value, and returns its prior value.",
 "InterlockedExchangePointer": "A pointer to the address to exchange. The function sets the address pointed to by the Target parameter (*Target) to the address that is the value of the Value parameter, and returns the prior value of the Target parameter.",
 "InterlockedExchangePointerAcquire": "A pointer to the address to exchange. The function sets the address pointed to by the Target parameter (*Target) to the address that is the value of the Value parameter, and returns the prior value of the Target parameter.",
 "InterlockedExchangePointerNoFence": "A pointer to the address to exchange. The function sets the address pointed to by the Target parameter (*Target) to the address that is the value of the Value parameter, and returns the prior value of the Target parameter.",
 "InterlockedExchangeSubtract": "A pointer to a variable. The value of this variable is replaced with the result of the operation.",
 "InterlockedExchangeAdd": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedExchangeAddAcquire": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedExchangeAddRelease": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedExchangeAddNoFence": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedExchangeAdd64": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedExchangeAddAcquire64": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedExchangeAddRelease64": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedExchangeAddNoFence64": "A pointer to a variable. The value of this variable will be replaced with the result of the operation.",
 "InterlockedIncrement": "A pointer to the variable to be incremented.",
 "InterlockedIncrementAcquire": "A pointer to the variable to be incremented.",
 "InterlockedIncrementRelease": "A pointer to the variable to be incremented.",
 "InterlockedIncrementNoFence": "A pointer to the variable to be incremented.",
 "InterlockedIncrement16": "A pointer to the variable to be incremented.",
 "InterlockedIncrement16Acquire": "A pointer to the variable to be incremented.",
 "InterlockedIncrement16Release": "A pointer to the variable to be incremented.",
 "InterlockedIncrement16NoFence": "A pointer to the variable to be incremented.",
 "InterlockedIncrement64": "A pointer to the variable to be incremented.",
 "InterlockedIncrementAcquire64": "A pointer to the variable to be incremented.",
 "InterlockedIncrementRelease64": "A pointer to the variable to be incremented.",
 "InterlockedIncrementNoFence64": "A pointer to the variable to be incremented.",
 "InterlockedOr": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOrAcquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOrRelease": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOrNoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr8": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr8Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr8Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr8NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr16": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr16Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr16Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr16NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr64": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr64Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr64Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedOr64NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXorAcquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXorRelease": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXorNoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor8": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor8Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor8Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor8NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor16": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor16Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor16Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor16NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor64": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor64Acquire": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor64Release": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "InterlockedXor64NoFence": "A pointer to the first operand. This value will be replaced with the result of the operation.",
 "CreateMutex": "A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the handle cannot be inherited by child processes. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new mutex. If lpMutexAttributes is NULL, the mutex gets a default security descriptor. The ACLs in the default security descriptor for a mutex come from the primary or impersonation token of the creator. For more information, see Synchronization Object Security and Access Rights.",
 "CreateMutexEx": "A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the mutex handle cannot be inherited by child processes. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new mutex. If lpMutexAttributes is NULL, the mutex gets a default security descriptor. The ACLs in the default security descriptor for a mutex come from the primary or impersonation token of the creator. For more information, see Synchronization Object Security and Access Rights.",
 "OpenMutex": "The access to the mutex object. Only the SYNCHRONIZE access right is required to use a mutex; to change the mutex's security, specify MUTEX_ALL_ACCESS. The function fails if the security descriptor of the specified object does not permit the requested access for the calling process. For a list of access rights, see Synchronization Object Security and Access Rights.",
 "ReleaseMutex": "A handle to the mutex object. The CreateMutex or OpenMutex function returns this handle.",
 "AddSIDToBoundaryDescriptor": "A handle to the boundary descriptor. The CreateBoundaryDescriptor function returns this handle.",
 "AddIntegrityLabelToBoundaryDescriptor": "A handle to the boundary descriptor. The CreateBoundaryDescriptor function returns this handle.",
 "ClosePrivateNamespace": "The namespace handle. This handle is created by CreatePrivateNamespace or OpenPrivateNamespace.",
 "CreateBoundaryDescriptor": "The name of the boundary descriptor.",
 "CreatePrivateNamespace": "A pointer to a SECURITY_ATTRIBUTES structure that specifies the security attributes of the namespace object.",
 "DeleteBoundaryDescriptor": "A handle to the boundary descriptor. The CreateBoundaryDescriptor function returns this handle.",
 "OpenPrivateNamespace": "A descriptor that defines how the namespace is to be isolated. The CreateBoundaryDescriptor function creates a boundary descriptor.",
 "CreateSemaphore": "A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the handle cannot be inherited by child processes. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new semaphore. If this parameter is NULL, the semaphore gets a default security descriptor. The ACLs in the default security descriptor for a semaphore come from the primary or impersonation token of the creator.",
 "CreateSemaphoreEx": "A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the semaphore handle cannot be inherited by child processes. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new semaphore. If this parameter is NULL, the semaphore gets a default security descriptor. The ACLs in the default security descriptor for a semaphore come from the primary or impersonation token of the creator.",
 "OpenSemaphore": "The access to the semaphore object. The function fails if the security descriptor of the specified object does not permit the requested access for the calling process. For a list of access rights, see Synchronization Object Security and Access Rights.",
 "ReleaseSemaphore": "A handle to the semaphore object. The CreateSemaphore or OpenSemaphore function returns this handle. This handle must have the SEMAPHORE_MODIFY_STATE access right. For more information, see Synchronization Object Security and Access Rights.",
 "InitializeSListHead": "A pointer to an SLIST_HEADER structure that represents the head of a singly linked list. This structure is for system use only.",
 "InterlockedFlushSList": "Pointer to an SLIST_HEADER structure that represents the head of the singly linked list. This structure is for system use only.",
 "InterlockedPopEntrySList": "Pointer to an SLIST_HEADER structure that represents the head of a singly linked list.",
 "InterlockedPushEntrySList": "Pointer to an SLIST_HEADER structure that represents the head of a singly linked list.",
 "InterlockedPushListSList": "Pointer to an SLIST_HEADER structure that represents the head of a singly linked list. The list specified by the List and ListEnd parameters is inserted at the front of this list.",
 "InterlockedPushListSListEx": "Pointer to an SLIST_HEADER structure that represents the head of a singly linked list. The list specified by the List and ListEnd parameters is inserted at the front of this list.",
 "QueryDepthSList": "A pointer to an SLIST_HEADER structure that represents the head of a singly linked list. This structure is for system use only. The list must be previously initialized with the InitializeSListHead function.",
 "RtlFirstEntrySList": "A pointer to an SLIST_HEADER structure that represents the head of a singly linked list. This structure is for system use only. The list must be previously initialized with the InitializeSListHead function.",
 "RtlInitializeSListHead": "A pointer to an SLIST_HEADER structure that represents the head of a singly linked list. This structure is for system use only.",
 "RtlInterlockedFlushSList": "A pointer to an SLIST_HEADER structure that represents the head of the singly linked list. This structure is for system use only.",
 "RtlInterlockedPopEntrySList": "A pointer to an SLIST_HEADER structure that represents the head of a singly linked list.",
 "RtlInterlockedPushEntrySList": "A pointer to an SLIST_HEADER structure that represents the head of a singly linked list.",
 "RtlQueryDepthSList": "A pointer to an SLIST_HEADER structure that represents the head of a singly linked list. This structure is for system use only. The list must be previously initialized with the InitializeSListHead function.",
 "DeleteSynchronizationBarrier": "A pointer to the synchronization barrier to delete.",
 "EnterSynchronizationBarrier": "A pointer to an initialized synchronization barrier. Use the InitializeSynchronizationBarrier function to initialize the barrier. SYNCHRONIZATION_BARRIER is an opaque structure that should not be modified by the application.",
 "InitializeSynchronizationBarrier": "A pointer to the SYNCHRONIZATION_BARRIER structure to initialize. This is an opaque structure that should not be modified by applications.",
 "ChangeTimerQueueTimer": "A handle to the timer queue. This handle is returned by the CreateTimerQueue function. If this parameter is NULL, the timer is associated with the default timer queue.",
 "CreateTimerQueue": null,
 "CreateTimerQueueTimer": "A pointer to a buffer that receives a handle to the timer-queue timer on return. When this handle has expired and is no longer required, release it by calling DeleteTimerQueueTimer.",
 "DeleteTimerQueue": "A handle to the timer queue. This handle is returned by the CreateTimerQueue function.",
 "DeleteTimerQueueEx": "A handle to the timer queue. This handle is returned by the CreateTimerQueue function.",
 "DeleteTimerQueueTimer": "A handle to the timer queue. This handle is returned by the CreateTimerQueue function. If the timer was created using the default timer queue, this parameter should be NULL.",
 "MsgWaitForMultipleObjects": "The number of object handles in the array pointed to by pHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one.",
 "MsgWaitForMultipleObjectsEx": "The number of object handles in the array pointed to by pHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one.",
 "SignalObjectAndWait": "A handle to the object to be signaled. This object can be a semaphore, a mutex, or an event. If the handle is a semaphore, the SEMAPHORE_MODIFY_STATE access right is required. If the handle is an event, the EVENT_MODIFY_STATE access right is required. If the handle is a mutex and the caller does not own the mutex, the function fails with ERROR_NOT_OWNER.",
 "UnregisterWait": "The wait handle. This handle is returned by the RegisterWaitForSingleObject function.",
 "WaitForMultipleObjects": "The number of object handles in the array pointed to by lpHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS. This parameter cannot be zero.",
 "WaitForMultipleObjectsEx": "The number of object handles to wait for in the array pointed to by lpHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS. This parameter cannot be zero.",
 "WaitForSingleObject": "A handle to the object. For a list of the object types whose handles can be specified, see the following Remarks section. If this handle is closed while the wait is still pending, the function's behavior is undefined. The handle must have the SYNCHRONIZE access right. For more information, see Standard Access Rights.",
 "WaitForSingleObjectEx": "A handle to the object. For a list of the object types whose handles can be specified, see the following Remarks section. If this handle is closed while the wait is still pending, the function's behavior is undefined. The handle must have the SYNCHRONIZE access right. For more information, see Standard Access Rights.",
 "WaitOnAddress": "The address on which to wait. If the value at Address differs from the value at CompareAddress, the function returns immediately. If the values are the same, the function does not return until another thread signals that the value at Address has changed by calling WakeByAddressSingle or WakeByAddressAll or the timeout elapses, whichever comes first.",
 "WaitOrTimerCallback": "The thread data passed to the function using a parameter of the CreateTimerQueueTimer or RegisterWaitForSingleObject function.",
 "WakeByAddressAll": "The address to signal. If any threads have previously called WaitOnAddress for this address, the system wakes all of the waiting threads.",
 "WakeByAddressSingle": "The address to signal. If another thread has previously called WaitOnAddress for this address, the system wakes the waiting thread. If multiple threads are waiting for this address, the system wakes the first thread to wait.",
 "CancelWaitableTimer": "A handle to the timer object. The CreateWaitableTimer or OpenWaitableTimer function returns this handle. The handle must have the TIMER_MODIFY_STATE access right. For more information, see Synchronization Object Security and Access Rights.",
 "CreateWaitableTimer": "A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new timer object and determines whether child processes can inherit the returned handle. If lpTimerAttributes is NULL, the timer object gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a timer come from the primary or impersonation token of the creator.",
 "CreateWaitableTimerEx": "A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the timer handle cannot be inherited by child processes. If lpTimerAttributes is NULL, the timer object gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a timer come from the primary or impersonation token of the creator.",
 "OpenWaitableTimer": "The access to the timer object. The function fails if the security descriptor of the specified object does not permit the requested access for the calling process. For a list of access rights, see Synchronization Object Security and Access Rights.",
 "SetWaitableTimer": "A handle to the timer object. The CreateWaitableTimer or OpenWaitableTimer function returns this handle. The handle must have the TIMER_MODIFY_STATE access right. For more information, see Synchronization Object Security and Access Rights.",
 "SetWaitableTimerEx": "A handle to the timer object. The CreateWaitableTimer or OpenWaitableTimer function returns this handle. The handle must have the TIMER_MODIFY_STATE access right. For more information, see Synchronization Object Security and Access Rights.",
 "TimerAPCProc": "The value passed to the function using the lpArgToCompletionRoutine parameter of the SetWaitableTimer function.",
 "glAccum": "The accumulation buffer operation. ...",
 "glAddSwapHintRectWIN": "The x-coordinate (in window coordinates) of the lower-left corner of the hint region rectangle.",
 "SwapBuffers": "Specifies a device context. If the current pixel format for the window referenced by this device context includes a back buffer, the function exchanges the front and back buffers.",
 "glAlphaFunc": "The alpha comparison function. The following are the accepted symbolic constants and their meanings. ValueMeaning GL_NEVER Never passes. GL_LESS Passes if the incoming alpha value is less than the reference value. GL_EQUAL Passes if the incoming alpha value is equal to the reference value. GL_LEQUAL Passes if the incoming alpha value is less than or equal to the reference value. GL_GREATER Passes if the incoming alpha value is greater than the reference value. GL_NOTEQUAL Passes if the incoming alpha value is not equal to the reference value. GL_GEQUAL Passes if the incoming alpha value is greater than or equal to the reference value. GL_ALWAYS Always passes. This is the default.",
 "glAreTexturesResident": "The number of textures to be queried.",
 "glArrayElement": "An index in the enabled arrays.",
 "glBegin": "The primitive or primitives that will be created from vertices presented between glBegin and the subsequent glend. The following are accepted symbolic constants and their meanings: ValueMeaning GL_POINTS Treats each vertex as a single point. Vertex n defines point n. N points are drawn. GL_LINES Treats each pair of vertices as an independent line segment. Vertices 2n - 1 and 2n define line n. N/2 lines are drawn. GL_LINE_STRIP Draws a connected group of line segments from the first vertex to the last. Vertices n and n+1 define line n. N - 1 lines are drawn. GL_LINE_LOOP Draws a connected group of line segments from the first vertex to the last, then back to the first. Vertices n and n 1 define line n. The last line, however, is defined by vertices N and 1. N lines are drawn. GL_TRIANGLES Treats each triplet of vertices as an independent triangle. Vertices 3n - 2, 3n - 1, and 3n define triangle n. N/3 triangles are drawn. GL_TRIANGLE_STRIP Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. For odd n, vertices n, n 1, and n 2 define triangle n. For even n, vertices n 1, n, and n 2 define triangle n. N - 2 triangles are drawn. GL_TRIANGLE_FAN Draws a connected group of triangles. one triangle is defined for each vertex presented after the first two vertices. Vertices 1, n 1, n 2 define triangle n. N - 2 triangles are drawn. GL_QUADS Treats each group of four vertices as an independent quadrilateral. Vertices 4n - 3, 4n - 2, 4n - 1, and 4n define quadrilateral n. N/4 quadrilaterals are drawn. GL_QUAD_STRIP Draws a connected group of quadrilaterals. One quadrilateral is defined for each pair of vertices presented after the first pair. Vertices 2n - 1, 2n, 2n 2, and 2n 1 define quadrilateral n. N/2 - 1 quadrilaterals are drawn. Note that the order in which vertices are used to construct a quadrilateral from strip data is different from that used with independent data. GL_POLYGON Draws a single, convex polygon. Vertices 1 through N define this polygon.",
 "glEnd": null,
 "glBindTexture": "The target to which the texture is bound. Must have the value GL_TEXTURE_1D or GL_TEXTURE_2D.",
 "glBitmap": "The pixel width of the bitmap image.",
 "glBlendFunc": "Specifies how the red, green, blue, and alpha source-blending factors are computed. Nine symbolic constants are accepted: GL_ZERO, GL_ONE, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, and GL_SRC_ALPHA_SATURATE.",
 "glCallList": "The integer name of the display list to be executed.",
 "glCallLists": "The number of display lists to be executed.",
 "glClear": "Bitwise OR operators of masks that indicate the buffers to be cleared. The four masks are as follows. ValueMeaning GL_COLOR_BUFFER_BIT The buffers currently enabled for color writing. GL_DEPTH_BUFFER_BIT The depth buffer. GL_ACCUM_BUFFER_BIT The accumulation buffer. GL_STENCIL_BUFFER_BIT The stencil buffer.",
 "glClearAccum": "The red value used when the accumulation buffer is cleared. The default value is zero.",
 "glClearColor": "The red value that glClear uses to clear the color buffers. The default value is zero.",
 "glClearDepth": "The depth value used when the depth buffer is cleared.",
 "glClearIndex": "The index used when the color-index buffers are cleared. The default value is zero.",
 "glClearStencil": "The index used when the stencil buffer is cleared. The default value is zero.",
 "glClipPlane": "The clipping plane that is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted.",
 "glColorMask": "Specify whether red can or cannot be written into the framebuffer. The default values is GL_TRUE, indicating that the color component can be written.",
 "glColorMaterial": "Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. The default value is GL_FRONT_AND_BACK.",
 "glColorPointer": "The number of components per color. The value must be either 3 or 4.",
 "glColorTableEXT": "The target texture that is to have its palette changed. Must be TEXTURE_1D, TEXTURE_2D, PROXY_TEXTURE_1D, or PROXY_TEXTURE_2D.",
 "glColorSubTableEXT": "The target paletted texture that is to have its palette changed. Must be TEXTURE_1D or TEXTURE_2D.",
 "glCopyPixels": "The window x-plane coordinate of the lower-left corner of the rectangular region of pixels to be copied.",
 "glCopyTexImage1D": "The target for which the image data will be changed. Must have the value GL_TEXTURE_1D.",
 "glCopyTexImage2D": "The target to which the image data will be changed. Must have the value GL_TEXTURE_2D.",
 "glCopyTexSubImage1D": "The target to which the image data will be changed. Must have the value GL_TEXTURE_1D.",
 "glCopyTexSubImage2D": "The target to which the image data will be changed. Must have the value GL_TEXTURE_2D.",
 "glCullFace": "Specifies whether front-facing or back-facing facets are candidates for culling. The symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The default value is GL_BACK.",
 "glDeleteLists": "The integer name of the first display list to delete.",
 "glDeleteTextures": "The number of textures to be deleted.",
 "glDepthFunc": "Specifies the depth-comparison function. The following symbolic constants are accepted. ValueMeaning GL_NEVER Never passes. GL_LESS Passes if the incoming z value is less than the stored z value. This is the default value. GL_LEQUAL Passes if the incoming z value is less than or equal to the stored z value. GL_EQUAL Passes if the incoming z value is equal to the stored z value. GL_GREATER Passes if the incoming z value is greater than the stored z value. GL_NOTEQUAL Passes if the incoming z value is not equal to the stored z value. GL_GEQUAL Passes if the incoming z value is greater than or equal to the stored z value. GL_ALWAYS Always passes.",
 "glDepthMask": "Specifies whether the depth buffer is enabled for writing. If flag is zero, depth-buffer writing is disabled. Otherwise, it is enabled. Initially, depth-buffer writing is enabled.",
 "glDepthRange": "The mapping of the near clipping plane to window coordinates. The default value is zero.",
 "glDrawArrays": "The kind of primitives to render. The following constants specify acceptable types of primitives: GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON.",
 "glDrawBuffer": "Specifies up to four color buffers to be drawn into with the following acceptable symbolic constants. ValueMeaning GL_NONE No color buffers are written. GL_FRONT_LEFT Only the front-left color buffer is written. GL_FRONT_RIGHT Only the front-right color buffer is written. GL_BACK_LEFT Only the back-left color buffer is written. GL_BACK_RIGHT Only the back-right color buffer is written. GL_FRONT Only the front-left and front-right color buffers are written. If there is no front-right color buffer, only the front left-color buffer is written. GL_BACK Only the back-left and back-right color buffers are written. If there is no back-right color buffer, only the back-left color buffer is written. GL_LEFT Only the front-left and back-left color buffers are written. If there is no back-left color buffer, only the front-left color buffer is written. GL_RIGHT Only the front-right and back-right color buffers are written. If there is no back-right color buffer, only the front-right color buffer is written. GL_FRONT_AND_BACK All the front and back color buffers (front-left, front-right, back-left, back-right) are written. If there are no back color buffers, only the front-left and front-right color buffers are written. If there are no right color buffers, only the front-left and back-left color buffers are written. If there are no right or back color buffers, only the front-left color buffer is written. GL_AUXi Only the auxiliary color buffer i is written; i is between 0 and GL_AUX_BUFFERS - 1. (GL_AUX_BUFFERS is not the upper limit; use glGet to query the number of available auxiliary buffers.) The default value is GL_FRONT for single-buffered contexts, and GL_BACK for double-buffered contexts.",
 "glDrawElements": "The kind of primitives to render. It can assume one of the following symbolic values: GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON.",
 "glDrawPixels": "The width dimension of the pixel rectangle that will be written into the framebuffer.",
 "glEdgeFlagPointer": "The byte offset between consecutive edge flags. When stride is zero, the edge flags are tightly packed in the array.",
 "glEnable": "A symbolic constant indicating an OpenGL capability. For discussion of the values cap can take, see the following Remarks section.",
 "glDisable": "A symbolic constant indicating an OpenGL capability. For discussion of the values cap can take, see the following Remarks section.",
 "glEnableClientState": "A symbolic constant for the array you want to enable or disable. This parameter can assume one of the following values. ValueMeaning GL_COLOR_ARRAY If enabled, use color arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glColorPointer. GL_EDGE_FLAG_ARRAY If enabled, use edge flag arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glEdgeFlagPointer. GL_INDEX_ARRAY If enabled, use index arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glIndexPointer. GL_NORMAL_ARRAY If enabled, use normal arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glNormalPointer. GL_TEXTURE_COORD_ARRAY If enabled, use texture coordinate arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glTexCoordPointer. GL_VERTEX_ARRAY If enabled, use vertex arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glVertexPointer.",
 "glDisableClientState": "A symbolic constant for the array you want to enable or disable. This parameter can assume one of the following values. ValueMeaning GL_COLOR_ARRAY If enabled, use color arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glColorPointer. GL_EDGE_FLAG_ARRAY If enabled, use edge flag arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glEdgeFlagPointer. GL_INDEX_ARRAY If enabled, use index arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glIndexPointer. GL_NORMAL_ARRAY If enabled, use normal arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glNormalPointer. GL_TEXTURE_COORD_ARRAY If enabled, use texture coordinate arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glTexCoordPointer. GL_VERTEX_ARRAY If enabled, use vertex arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glVertexPointer.",
 "glFeedbackBuffer": "The maximum number of values that can be written into buffer.",
 "glFinish": null,
 "glFlush": null,
 "glFrontFace": "The orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The default value is GL_CCW.",
 "glFrustum": "The coordinate for the left-vertical clipping plane.",
 "glGenLists": "The number of contiguous empty display lists to be generated.",
 "glGenTextures": "The number of texture names to be generated.",
 "glGetBooleanv": "The parameter value to be returned. The following symbolic constants are accepted. ValueMeaning GL_ACCUM_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer. GL_ACCUM_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in the accumulation buffer. GL_ACCUM_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum. GL_ACCUM_GREEN_BITS The params parameter returns one value: the number of green bitplanes in the accumulation buffer. GL_ACCUM_RED_BITS The params parameter returns one value: the number of red bitplanes in the accumulation buffer. GL_ALPHA_BIAS The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in each color buffer. GL_ALPHA_SCALE The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_TEST The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc. GL_ALPHA_TEST_FUNC The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc. GL_ALPHA_TEST_REF The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. GL_ATTRIB_STACK_DEPTH The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib. GL_AUTO_NORMAL The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2. GL_AUX_BUFFERS The params parameter returns one value: the number of auxiliary color buffers. GL_BLEND The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc. GL_BLEND_DST The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc. GL_BLEND_SRC The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc. GL_BLUE_BIAS The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer. GL_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in each color buffer. GL_BLUE_SCALE The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer. GL_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib. GL_CLIP_PLANEi The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane. GL_COLOR_ARRAY The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer. GL_COLOR_ARRAY_SIZE The params parameter returns one value, the number of components per color in the color array. See glColorPointer. GL_COLOR_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer. GL_COLOR_ARRAY_TYPE The params parameter returns one value, the data type of each component in the color array. See glColorPointer. GL_COLOR_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor. GL_COLOR_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp. GL_COLOR_MATERIAL The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_FACE The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_PARAMETER The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial. GL_COLOR_WRITEMASK The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask. GL_CULL_FACE The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace. GL_CULL_FACE_MODE The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace. GL_CURRENT_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor. GL_CURRENT_INDEX The params parameter returns one value: the current color index. See glIndex. GL_CURRENT_NORMAL The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal. GL_CURRENT_RASTER_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos. GL_CURRENT_RASTER_DISTANCE The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos. GL_CURRENT_RASTER_INDEX The params parameter returns one value: the color index of the current raster position. See glRasterPos. GL_CURRENT_RASTER_POSITION The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos. GL_CURRENT_RASTER_POSITION_VALID The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos. GL_CURRENT_RASTER_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord. GL_CURRENT_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord. GL_DEPTH_BIAS The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_BITS The params parameter returns one value: the number of bitplanes in the depth buffer. GL_DEPTH_CLEAR_VALUE The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth. GL_DEPTH_FUNC The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc. GL_DEPTH_RANGE The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange. GL_DEPTH_SCALE The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_TEST The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange. GL_DEPTH_WRITEMASK The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask. GL_DITHER The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled. GL_DOUBLEBUFFER The params parameter returns a single Boolean value indicating whether double buffering is supported. GL_DRAW_BUFFER The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer. GL_EDGE_FLAG The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag. GL_EDGE_FLAG_ARRAY The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer. GL_EDGE_FLAG_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer. GL_FOG The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog. GL_FOG_COLOR The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog. GL_FOG_DENSITY The params parameter returns one value: the fog density parameter. See glFog. GL_FOG_END The params parameter returns one value: the end factor for the linear fog equation. See glFog. GL_FOG_HINT The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint. GL_FOG_INDEX The params parameter returns one value: the fog color index. See glFog. GL_FOG_MODE The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog. GL_FOG_START The params parameter returns one value: the start factor for the linear fog equation. See glFog. GL_FRONT_FACE The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace. GL_GREEN_BIAS The params parameter returns one value: the green bias factor used during pixel transfers. GL_GREEN_BITS The params parameter returns one value: the number of green bitplanes in each color buffer. GL_GREEN_SCALE The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer. GL_INDEX_ARRAY The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer. GL_INDEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer. GL_INDEX_ARRAY_TYPE The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer. GL_INDEX_BITS The params parameter returns one value: the number of bitplanes in each color-index buffer. GL_INDEX_CLEAR_VALUE The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex. GL_INDEX_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp. GL_INDEX_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE). GL_INDEX_OFFSET The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer. GL_INDEX_SHIFT The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer. GL_INDEX_WRITEMASK The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask. GL_LIGHTi The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel. GL_LIGHTING The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel. GL_LIGHT_MODEL_AMBIENT The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel. GL_LIGHT_MODEL_LOCAL_VIEWER The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel. GL_LIGHT_MODEL_TWO_SIDE The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel. GL_LINE_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth. GL_LINE_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint. GL_LINE_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple. GL_LINE_STIPPLE_PATTERN The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple. GL_LINE_STIPPLE_REPEAT The params parameter returns one value: the line stipple repeat factor. See glLineStipple. GL_LINE_WIDTH The params parameter returns one value: the line width as specified with glLineWidth. GL_LINE_WIDTH_GRANULARITY The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth. GL_LINE_WIDTH_RANGE The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth. GL_LIST_BASE The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase. GL_LIST_INDEX The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList. GL_LIST_MODE The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList. GL_LOGIC_OP The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp. GL_LOGIC_OP_MODE The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp. GL_MAP1_COLOR_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1. GL_MAP1_GRID_DOMAIN The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid. GL_MAP1_GRID_SEGMENTS The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid. GL_MAP1_INDEX The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1. GL_MAP1_NORMAL The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1. GL_MAP1_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1. GL_MAP1_VERTEX_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1. GL_MAP1_VERTEX_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1. GL_MAP2_COLOR_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2. GL_MAP2_GRID_DOMAIN The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_GRID_SEGMENTS The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_INDEX The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2. GL_MAP2_NORMAL The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2. GL_MAP2_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2. GL_MAP2_VERTEX_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2. GL_MAP2_VERTEX_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2. GL_MAP_COLOR The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MAP_STENCIL The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MATRIX_MODE The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode. GL_MAX_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib. GL_MAX_ATTRIB_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib. GL_MAX_CLIP_PLANES The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane. GL_MAX_EVAL_ORDER The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2. GL_MAX_LIGHTS The params parameter returns one value: the maximum number of lights. See glLight. GL_MAX_LIST_NESTING The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList. GL_MAX_MODELVIEW_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix. GL_MAX_NAME_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName. GL_MAX_PIXEL_MAP_TABLE The params parameter returns one value: the maximum supported size of a glPixelMap lookup table. GL_MAX_PROJECTION_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix. GL_MAX_TEXTURE_SIZE The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D. GL_MAX_TEXTURE_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix. GL_MAX_VIEWPORT_DIMS The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport. GL_MODELVIEW_MATRIX The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix. GL_MODELVIEW_STACK_DEPTH The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix. GL_NAME_STACK_DEPTH The params parameter returns one value: the number of names on the selection name stack. See glPushName. GL_NORMAL_ARRAY The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer. GL_NORMAL_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer. GL_NORMAL_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer. GL_NORMALIZE The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal. GL_PACK_ALIGNMENT The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore. GL_PACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore. GL_PACK_ROW_LENGTH The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore. GL_PACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore. GL_PERSPECTIVE_CORRECTION_HINT The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint. GL_PIXEL_MAP_A_TO_A_SIZE The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap. GL_PIXEL_MAP_B_TO_B_SIZE The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap. GL_PIXEL_MAP_G_TO_G_SIZE The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_A_SIZE The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_B_SIZE The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_G_SIZE The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_I_SIZE The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_R_SIZE The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_R_TO_R_SIZE The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_S_TO_S_SIZE The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap. GL_POINT_SIZE The params parameter returns one value: the point size as specified by glPointSize. GL_POINT_SIZE_GRANULARITY The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize. GL_POINT_SIZE_RANGE The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize. GL_POINT_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize. GL_POINT_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint. GL_POLYGON_MODE The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode. GL_POLYGON_OFFSET_FACTOR The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_UNITS The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_FILL The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset. GL_POLYGON_OFFSET_LINE The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset. GL_POLYGON_OFFSET_POINT The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset. GL_POLYGON_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode. GL_POLYGON_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint. GL_POLYGON_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple. GL_PROJECTION_MATRIX The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix. GL_PROJECTION_STACK_DEPTH The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix. GL_READ_BUFFER The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum. GL_RED_BIAS The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer. GL_RED_BITS The params parameter returns one value: the number of red bitplanes in each color buffer. GL_RED_SCALE The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer. GL_RENDER_MODE The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode. GL_RGBA_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor. GL_SCISSOR_BOX The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor. GL_SCISSOR_TEST The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor. GL_SHADE_MODEL The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel. GL_STENCIL_BITS The params parameter returns one value: the number of bitplanes in the stencil buffer. GL_STENCIL_CLEAR_VALUE The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil. GL_STENCIL_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp. GL_STENCIL_FUNC The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc. GL_STENCIL_PASS_DEPTH_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp. GL_STENCIL_PASS_DEPTH_PASS The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp. GL_STENCIL_REF The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc. GL_STENCIL_TEST The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp. GL_STENCIL_VALUE_MASK The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc. GL_STENCIL_WRITEMASK The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask. GL_STEREO The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported. GL_SUBPIXEL_BITS The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates. GL_TEXTURE_1D The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D. GL_TEXTURE_2D The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D. GL_TEXTURE_COORD_ARRAY The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_SIZE The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_TYPE The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_ENV_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv. GL_TEXTURE_ENV_MODE The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv. GL_TEXTURE_GEN_Q The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_R The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_S The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_T The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen. GL_TEXTURE_MATRIX The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix. GL_TEXTURE_STACK_DEPTH The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix. GL_UNPACK_ALIGNMENT The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore. GL_UNPACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore. GL_UNPACK_ROW_LENGTH The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore. GL_UNPACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore. GL_VERTEX_ARRAY The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer. GL_VERTEX_ARRAY_SIZE The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer. GL_VIEWPORT The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport. GL_ZOOM_X The params parameter returns one value: the x pixel zoom factor. See glPixelZoom. GL_ZOOM_Y The params parameter returns one value: the y pixel zoom factor. See glPixelZoom.",
 "glGetClipPlane": "A clipping plane. ...",
 "glGetColorTableEXT": "The target texture that is to have its palette changed. Must be TEXTURE_1D or TEXTURE_2D.",
 "glGetColorTableParameterfvEXT": "The target texture of the palette for which you want parameter data. Must be TEXTURE_1D, TEXTURE_2D, PROXY_TEXTURE_1D, or PROXY_TEXTURE_2D.",
 "glGetColorTableParameterivEXT": "The target texture of the palette for which you want parameter data. Must be TEXTURE_1D, TEXTURE_2D, PROXY_TEXTURE_1D, or PROXY_TEXTURE_2D.",
 "glGetDoublev": "The parameter value to be returned. The following symbolic constants are accepted. ValueMeaning GL_ACCUM_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer. GL_ACCUM_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in the accumulation buffer. GL_ACCUM_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum. GL_ACCUM_GREEN_BITS The params parameter returns one value: the number of green bitplanes in the accumulation buffer. GL_ACCUM_RED_BITS The params parameter returns one value: the number of red bitplanes in the accumulation buffer. GL_ALPHA_BIAS The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in each color buffer. GL_ALPHA_SCALE The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_TEST The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc. GL_ALPHA_TEST_FUNC The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc. GL_ALPHA_TEST_REF The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. GL_ATTRIB_STACK_DEPTH The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib. GL_AUTO_NORMAL The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2. GL_AUX_BUFFERS The params parameter returns one value: the number of auxiliary color buffers. GL_BLEND The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc. GL_BLEND_DST The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc. GL_BLEND_SRC The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc. GL_BLUE_BIAS The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer. GL_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in each color buffer. GL_BLUE_SCALE The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer. GL_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib. GL_CLIP_PLANEi The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane. GL_COLOR_ARRAY The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer. GL_COLOR_ARRAY_SIZE The params parameter returns one value, the number of components per color in the color array. See glColorPointer. GL_COLOR_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer. GL_COLOR_ARRAY_TYPE The params parameter returns one value, the data type of each component in the color array. See glColorPointer. GL_COLOR_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor. GL_COLOR_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp. GL_COLOR_MATERIAL The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_FACE The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_PARAMETER The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial. GL_COLOR_WRITEMASK The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask. GL_CULL_FACE The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace. GL_CULL_FACE_MODE The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace. GL_CURRENT_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor. GL_CURRENT_INDEX The params parameter returns one value: the current color index. See glIndex. GL_CURRENT_NORMAL The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal. GL_CURRENT_RASTER_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos. GL_CURRENT_RASTER_DISTANCE The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos. GL_CURRENT_RASTER_INDEX The params parameter returns one value: the color index of the current raster position. See glRasterPos. GL_CURRENT_RASTER_POSITION The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos. GL_CURRENT_RASTER_POSITION_VALID The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos. GL_CURRENT_RASTER_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord. GL_CURRENT_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord. GL_DEPTH_BIAS The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_BITS The params parameter returns one value: the number of bitplanes in the depth buffer. GL_DEPTH_CLEAR_VALUE The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth. GL_DEPTH_FUNC The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc. GL_DEPTH_RANGE The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange. GL_DEPTH_SCALE The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_TEST The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange. GL_DEPTH_WRITEMASK The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask. GL_DITHER The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled. GL_DOUBLEBUFFER The params parameter returns a single Boolean value indicating whether double buffering is supported. GL_DRAW_BUFFER The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer. GL_EDGE_FLAG The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag. GL_EDGE_FLAG_ARRAY The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer. GL_EDGE_FLAG_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer. GL_FOG The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog. GL_FOG_COLOR The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog. GL_FOG_DENSITY The params parameter returns one value: the fog density parameter. See glFog. GL_FOG_END The params parameter returns one value: the end factor for the linear fog equation. See glFog. GL_FOG_HINT The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint. GL_FOG_INDEX The params parameter returns one value: the fog color index. See glFog. GL_FOG_MODE The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog. GL_FOG_START The params parameter returns one value: the start factor for the linear fog equation. See glFog. GL_FRONT_FACE The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace. GL_GREEN_BIAS The params parameter returns one value: the green bias factor used during pixel transfers. GL_GREEN_BITS The params parameter returns one value: the number of green bitplanes in each color buffer. GL_GREEN_SCALE The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer. GL_INDEX_ARRAY The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer. GL_INDEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer. GL_INDEX_ARRAY_TYPE The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer. GL_INDEX_BITS The params parameter returns one value: the number of bitplanes in each color-index buffer. GL_INDEX_CLEAR_VALUE The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex. GL_INDEX_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp. GL_INDEX_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE). GL_INDEX_OFFSET The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer. GL_INDEX_SHIFT The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer. GL_INDEX_WRITEMASK The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask. GL_LIGHTi The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel. GL_LIGHTING The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel. GL_LIGHT_MODEL_AMBIENT The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel. GL_LIGHT_MODEL_LOCAL_VIEWER The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel. GL_LIGHT_MODEL_TWO_SIDE The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel. GL_LINE_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth. GL_LINE_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint. GL_LINE_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple. GL_LINE_STIPPLE_PATTERN The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple. GL_LINE_STIPPLE_REPEAT The params parameter returns one value: the line stipple repeat factor. See glLineStipple. GL_LINE_WIDTH The params parameter returns one value: the line width as specified with glLineWidth. GL_LINE_WIDTH_GRANULARITY The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth. GL_LINE_WIDTH_RANGE The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth. GL_LIST_BASE The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase. GL_LIST_INDEX The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList. GL_LIST_MODE The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList. GL_LOGIC_OP The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp. GL_LOGIC_OP_MODE The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp. GL_MAP1_COLOR_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1. GL_MAP1_GRID_DOMAIN The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid. GL_MAP1_GRID_SEGMENTS The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid. GL_MAP1_INDEX The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1. GL_MAP1_NORMAL The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1. GL_MAP1_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1. GL_MAP1_VERTEX_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1. GL_MAP1_VERTEX_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1. GL_MAP2_COLOR_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2. GL_MAP2_GRID_DOMAIN The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_GRID_SEGMENTS The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_INDEX The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2. GL_MAP2_NORMAL The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2. GL_MAP2_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2. GL_MAP2_VERTEX_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2. GL_MAP2_VERTEX_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2. GL_MAP_COLOR The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MAP_STENCIL The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MATRIX_MODE The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode. GL_MAX_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib. GL_MAX_ATTRIB_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib. GL_MAX_CLIP_PLANES The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane. GL_MAX_EVAL_ORDER The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2. GL_MAX_LIGHTS The params parameter returns one value: the maximum number of lights. See glLight. GL_MAX_LIST_NESTING The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList. GL_MAX_MODELVIEW_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix. GL_MAX_NAME_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName. GL_MAX_PIXEL_MAP_TABLE The params parameter returns one value: the maximum supported size of a glPixelMap lookup table. GL_MAX_PROJECTION_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix. GL_MAX_TEXTURE_SIZE The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D. GL_MAX_TEXTURE_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix. GL_MAX_VIEWPORT_DIMS The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport. GL_MODELVIEW_MATRIX The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix. GL_MODELVIEW_STACK_DEPTH The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix. GL_NAME_STACK_DEPTH The params parameter returns one value: the number of names on the selection name stack. See glPushName. GL_NORMAL_ARRAY The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer. GL_NORMAL_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer. GL_NORMAL_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer. GL_NORMALIZE The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal. GL_PACK_ALIGNMENT The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore. GL_PACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore. GL_PACK_ROW_LENGTH The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore. GL_PACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore. GL_PERSPECTIVE_CORRECTION_HINT The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint. GL_PIXEL_MAP_A_TO_A_SIZE The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap. GL_PIXEL_MAP_B_TO_B_SIZE The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap. GL_PIXEL_MAP_G_TO_G_SIZE The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_A_SIZE The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_B_SIZE The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_G_SIZE The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_I_SIZE The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_R_SIZE The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_R_TO_R_SIZE The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_S_TO_S_SIZE The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap. GL_POINT_SIZE The params parameter returns one value: the point size as specified by glPointSize. GL_POINT_SIZE_GRANULARITY The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize. GL_POINT_SIZE_RANGE The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize. GL_POINT_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize. GL_POINT_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint. GL_POLYGON_MODE The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode. GL_POLYGON_OFFSET_FACTOR The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_UNITS The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_FILL The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset. GL_POLYGON_OFFSET_LINE The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset. GL_POLYGON_OFFSET_POINT The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset. GL_POLYGON_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode. GL_POLYGON_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint. GL_POLYGON_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple. GL_PROJECTION_MATRIX The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix. GL_PROJECTION_STACK_DEPTH The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix. GL_READ_BUFFER The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum. GL_RED_BIAS The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer. GL_RED_BITS The params parameter returns one value: the number of red bitplanes in each color buffer. GL_RED_SCALE The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer. GL_RENDER_MODE The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode. GL_RGBA_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor. GL_SCISSOR_BOX The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor. GL_SCISSOR_TEST The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor. GL_SHADE_MODEL The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel. GL_STENCIL_BITS The params parameter returns one value: the number of bitplanes in the stencil buffer. GL_STENCIL_CLEAR_VALUE The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil. GL_STENCIL_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp. GL_STENCIL_FUNC The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc. GL_STENCIL_PASS_DEPTH_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp. GL_STENCIL_PASS_DEPTH_PASS The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp. GL_STENCIL_REF The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc. GL_STENCIL_TEST The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp. GL_STENCIL_VALUE_MASK The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc. GL_STENCIL_WRITEMASK The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask. GL_STEREO The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported. GL_SUBPIXEL_BITS The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates. GL_TEXTURE_1D The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D. GL_TEXTURE_2D The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D. GL_TEXTURE_COORD_ARRAY The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_SIZE The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_TYPE The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_ENV_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv. GL_TEXTURE_ENV_MODE The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv. GL_TEXTURE_GEN_Q The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_R The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_S The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_T The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen. GL_TEXTURE_MATRIX The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix. GL_TEXTURE_STACK_DEPTH The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix. GL_UNPACK_ALIGNMENT The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore. GL_UNPACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore. GL_UNPACK_ROW_LENGTH The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore. GL_UNPACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore. GL_VERTEX_ARRAY The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer. GL_VERTEX_ARRAY_SIZE The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer. GL_VIEWPORT The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport. GL_ZOOM_X The params parameter returns one value: the x pixel zoom factor. See glPixelZoom. GL_ZOOM_Y The params parameter returns one value: the y pixel zoom factor. See glPixelZoom.",
 "glGetError": null,
 "glGetFloatv": "The parameter value to be returned. The following symbolic constants are accepted. ValueMeaning GL_ACCUM_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer. GL_ACCUM_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in the accumulation buffer. GL_ACCUM_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum. GL_ACCUM_GREEN_BITS The params parameter returns one value: the number of green bitplanes in the accumulation buffer. GL_ACCUM_RED_BITS The params parameter returns one value: the number of red bitplanes in the accumulation buffer. GL_ALPHA_BIAS The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in each color buffer. GL_ALPHA_SCALE The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_TEST The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc. GL_ALPHA_TEST_FUNC The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc. GL_ALPHA_TEST_REF The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. GL_ATTRIB_STACK_DEPTH The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib. GL_AUTO_NORMAL The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2. GL_AUX_BUFFERS The params parameter returns one value: the number of auxiliary color buffers. GL_BLEND The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc. GL_BLEND_DST The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc. GL_BLEND_SRC The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc. GL_BLUE_BIAS The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer. GL_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in each color buffer. GL_BLUE_SCALE The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer. GL_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib. GL_CLIP_PLANEi The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane. GL_COLOR_ARRAY The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer. GL_COLOR_ARRAY_SIZE The params parameter returns one value, the number of components per color in the color array. See glColorPointer. GL_COLOR_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer. GL_COLOR_ARRAY_TYPE The params parameter returns one value, the data type of each component in the color array. See glColorPointer. GL_COLOR_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor. GL_COLOR_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp. GL_COLOR_MATERIAL The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_FACE The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_PARAMETER The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial. GL_COLOR_WRITEMASK The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask. GL_CULL_FACE The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace. GL_CULL_FACE_MODE The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace. GL_CURRENT_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor. GL_CURRENT_INDEX The params parameter returns one value: the current color index. See glIndex. GL_CURRENT_NORMAL The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal. GL_CURRENT_RASTER_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos. GL_CURRENT_RASTER_DISTANCE The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos. GL_CURRENT_RASTER_INDEX The params parameter returns one value: the color index of the current raster position. See glRasterPos. GL_CURRENT_RASTER_POSITION The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos. GL_CURRENT_RASTER_POSITION_VALID The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos. GL_CURRENT_RASTER_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord. GL_CURRENT_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord. GL_DEPTH_BIAS The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_BITS The params parameter returns one value: the number of bitplanes in the depth buffer. GL_DEPTH_CLEAR_VALUE The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth. GL_DEPTH_FUNC The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc. GL_DEPTH_RANGE The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange. GL_DEPTH_SCALE The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_TEST The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange. GL_DEPTH_WRITEMASK The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask. GL_DITHER The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled. GL_DOUBLEBUFFER The params parameter returns a single Boolean value indicating whether double buffering is supported. GL_DRAW_BUFFER The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer. GL_EDGE_FLAG The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag. GL_EDGE_FLAG_ARRAY The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer. GL_EDGE_FLAG_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer. GL_FOG The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog. GL_FOG_COLOR The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog. GL_FOG_DENSITY The params parameter returns one value: the fog density parameter. See glFog. GL_FOG_END The params parameter returns one value: the end factor for the linear fog equation. See glFog. GL_FOG_HINT The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint. GL_FOG_INDEX The params parameter returns one value: the fog color index. See glFog. GL_FOG_MODE The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog. GL_FOG_START The params parameter returns one value: the start factor for the linear fog equation. See glFog. GL_FRONT_FACE The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace. GL_GREEN_BIAS The params parameter returns one value: the green bias factor used during pixel transfers. GL_GREEN_BITS The params parameter returns one value: the number of green bitplanes in each color buffer. GL_GREEN_SCALE The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer. GL_INDEX_ARRAY The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer. GL_INDEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer. GL_INDEX_ARRAY_TYPE The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer. GL_INDEX_BITS The params parameter returns one value: the number of bitplanes in each color-index buffer. GL_INDEX_CLEAR_VALUE The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex. GL_INDEX_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp. GL_INDEX_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE). GL_INDEX_OFFSET The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer. GL_INDEX_SHIFT The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer. GL_INDEX_WRITEMASK The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask. GL_LIGHTi The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel. GL_LIGHTING The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel. GL_LIGHT_MODEL_AMBIENT The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel. GL_LIGHT_MODEL_LOCAL_VIEWER The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel. GL_LIGHT_MODEL_TWO_SIDE The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel. GL_LINE_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth. GL_LINE_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint. GL_LINE_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple. GL_LINE_STIPPLE_PATTERN The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple. GL_LINE_STIPPLE_REPEAT The params parameter returns one value: the line stipple repeat factor. See glLineStipple. GL_LINE_WIDTH The params parameter returns one value: the line width as specified with glLineWidth. GL_LINE_WIDTH_GRANULARITY The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth. GL_LINE_WIDTH_RANGE The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth. GL_LIST_BASE The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase. GL_LIST_INDEX The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList. GL_LIST_MODE The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList. GL_LOGIC_OP The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp. GL_LOGIC_OP_MODE The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp. GL_MAP1_COLOR_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1. GL_MAP1_GRID_DOMAIN The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid. GL_MAP1_GRID_SEGMENTS The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid. GL_MAP1_INDEX The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1. GL_MAP1_NORMAL The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1. GL_MAP1_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1. GL_MAP1_VERTEX_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1. GL_MAP1_VERTEX_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1. GL_MAP2_COLOR_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2. GL_MAP2_GRID_DOMAIN The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_GRID_SEGMENTS The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_INDEX The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2. GL_MAP2_NORMAL The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2. GL_MAP2_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2. GL_MAP2_VERTEX_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2. GL_MAP2_VERTEX_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2. GL_MAP_COLOR The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MAP_STENCIL The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MATRIX_MODE The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode. GL_MAX_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib. GL_MAX_ATTRIB_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib. GL_MAX_CLIP_PLANES The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane. GL_MAX_EVAL_ORDER The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2. GL_MAX_LIGHTS The params parameter returns one value: the maximum number of lights. See glLight. GL_MAX_LIST_NESTING The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList. GL_MAX_MODELVIEW_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix. GL_MAX_NAME_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName. GL_MAX_PIXEL_MAP_TABLE The params parameter returns one value: the maximum supported size of a glPixelMap lookup table. GL_MAX_PROJECTION_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix. GL_MAX_TEXTURE_SIZE The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D. GL_MAX_TEXTURE_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix. GL_MAX_VIEWPORT_DIMS The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport. GL_MODELVIEW_MATRIX The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix. GL_MODELVIEW_STACK_DEPTH The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix. GL_NAME_STACK_DEPTH The params parameter returns one value: the number of names on the selection name stack. See glPushName. GL_NORMAL_ARRAY The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer. GL_NORMAL_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer. GL_NORMAL_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer. GL_NORMALIZE The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal. GL_PACK_ALIGNMENT The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore. GL_PACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore. GL_PACK_ROW_LENGTH The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore. GL_PACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore. GL_PERSPECTIVE_CORRECTION_HINT The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint. GL_PIXEL_MAP_A_TO_A_SIZE The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap. GL_PIXEL_MAP_B_TO_B_SIZE The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap. GL_PIXEL_MAP_G_TO_G_SIZE The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_A_SIZE The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_B_SIZE The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_G_SIZE The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_I_SIZE The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_R_SIZE The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_R_TO_R_SIZE The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_S_TO_S_SIZE The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap. GL_POINT_SIZE The params parameter returns one value: the point size as specified by glPointSize. GL_POINT_SIZE_GRANULARITY The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize. GL_POINT_SIZE_RANGE The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize. GL_POINT_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize. GL_POINT_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint. GL_POLYGON_MODE The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode. GL_POLYGON_OFFSET_FACTOR The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_UNITS The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_FILL The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset. GL_POLYGON_OFFSET_LINE The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset. GL_POLYGON_OFFSET_POINT The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset. GL_POLYGON_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode. GL_POLYGON_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint. GL_POLYGON_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple. GL_PROJECTION_MATRIX The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix. GL_PROJECTION_STACK_DEPTH The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix. GL_READ_BUFFER The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum. GL_RED_BIAS The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer. GL_RED_BITS The params parameter returns one value: the number of red bitplanes in each color buffer. GL_RED_SCALE The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer. GL_RENDER_MODE The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode. GL_RGBA_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor. GL_SCISSOR_BOX The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor. GL_SCISSOR_TEST The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor. GL_SHADE_MODEL The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel. GL_STENCIL_BITS The params parameter returns one value: the number of bitplanes in the stencil buffer. GL_STENCIL_CLEAR_VALUE The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil. GL_STENCIL_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp. GL_STENCIL_FUNC The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc. GL_STENCIL_PASS_DEPTH_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp. GL_STENCIL_PASS_DEPTH_PASS The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp. GL_STENCIL_REF The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc. GL_STENCIL_TEST The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp. GL_STENCIL_VALUE_MASK The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc. GL_STENCIL_WRITEMASK The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask. GL_STEREO The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported. GL_SUBPIXEL_BITS The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates. GL_TEXTURE_1D The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D. GL_TEXTURE_2D The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D. GL_TEXTURE_COORD_ARRAY The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_SIZE The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_TYPE The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_ENV_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv. GL_TEXTURE_ENV_MODE The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv. GL_TEXTURE_GEN_Q The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_R The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_S The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_T The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen. GL_TEXTURE_MATRIX The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix. GL_TEXTURE_STACK_DEPTH The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix. GL_UNPACK_ALIGNMENT The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore. GL_UNPACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore. GL_UNPACK_ROW_LENGTH The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore. GL_UNPACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore. GL_VERTEX_ARRAY The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer. GL_VERTEX_ARRAY_SIZE The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer. GL_VIEWPORT The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport. GL_ZOOM_X The params parameter returns one value: the x pixel zoom factor. See glPixelZoom. GL_ZOOM_Y The params parameter returns one value: the y pixel zoom factor. See glPixelZoom.",
 "glGetIntegerv": "The parameter value to be returned. The following symbolic constants are accepted. ValueMeaning GL_ACCUM_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer. GL_ACCUM_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in the accumulation buffer. GL_ACCUM_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum. GL_ACCUM_GREEN_BITS The params parameter returns one value: the number of green bitplanes in the accumulation buffer. GL_ACCUM_RED_BITS The params parameter returns one value: the number of red bitplanes in the accumulation buffer. GL_ALPHA_BIAS The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_BITS The params parameter returns one value: the number of alpha bitplanes in each color buffer. GL_ALPHA_SCALE The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer. GL_ALPHA_TEST The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc. GL_ALPHA_TEST_FUNC The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc. GL_ALPHA_TEST_REF The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. GL_ATTRIB_STACK_DEPTH The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib. GL_AUTO_NORMAL The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2. GL_AUX_BUFFERS The params parameter returns one value: the number of auxiliary color buffers. GL_BLEND The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc. GL_BLEND_DST The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc. GL_BLEND_SRC The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc. GL_BLUE_BIAS The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer. GL_BLUE_BITS The params parameter returns one value: the number of blue bitplanes in each color buffer. GL_BLUE_SCALE The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer. GL_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib. GL_CLIP_PLANEi The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane. GL_COLOR_ARRAY The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer. GL_COLOR_ARRAY_SIZE The params parameter returns one value, the number of components per color in the color array. See glColorPointer. GL_COLOR_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer. GL_COLOR_ARRAY_TYPE The params parameter returns one value, the data type of each component in the color array. See glColorPointer. GL_COLOR_CLEAR_VALUE The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor. GL_COLOR_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp. GL_COLOR_MATERIAL The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_FACE The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial. GL_COLOR_MATERIAL_PARAMETER The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial. GL_COLOR_WRITEMASK The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask. GL_CULL_FACE The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace. GL_CULL_FACE_MODE The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace. GL_CURRENT_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor. GL_CURRENT_INDEX The params parameter returns one value: the current color index. See glIndex. GL_CURRENT_NORMAL The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal. GL_CURRENT_RASTER_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos. GL_CURRENT_RASTER_DISTANCE The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos. GL_CURRENT_RASTER_INDEX The params parameter returns one value: the color index of the current raster position. See glRasterPos. GL_CURRENT_RASTER_POSITION The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos. GL_CURRENT_RASTER_POSITION_VALID The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos. GL_CURRENT_RASTER_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord. GL_CURRENT_TEXTURE_COORDS The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord. GL_DEPTH_BIAS The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_BITS The params parameter returns one value: the number of bitplanes in the depth buffer. GL_DEPTH_CLEAR_VALUE The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth. GL_DEPTH_FUNC The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc. GL_DEPTH_RANGE The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange. GL_DEPTH_SCALE The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer. GL_DEPTH_TEST The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange. GL_DEPTH_WRITEMASK The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask. GL_DITHER The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled. GL_DOUBLEBUFFER The params parameter returns a single Boolean value indicating whether double buffering is supported. GL_DRAW_BUFFER The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer. GL_EDGE_FLAG The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag. GL_EDGE_FLAG_ARRAY The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer. GL_EDGE_FLAG_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer. GL_FOG The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog. GL_FOG_COLOR The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog. GL_FOG_DENSITY The params parameter returns one value: the fog density parameter. See glFog. GL_FOG_END The params parameter returns one value: the end factor for the linear fog equation. See glFog. GL_FOG_HINT The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint. GL_FOG_INDEX The params parameter returns one value: the fog color index. See glFog. GL_FOG_MODE The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog. GL_FOG_START The params parameter returns one value: the start factor for the linear fog equation. See glFog. GL_FRONT_FACE The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace. GL_GREEN_BIAS The params parameter returns one value: the green bias factor used during pixel transfers. GL_GREEN_BITS The params parameter returns one value: the number of green bitplanes in each color buffer. GL_GREEN_SCALE The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer. GL_INDEX_ARRAY The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer. GL_INDEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer. GL_INDEX_ARRAY_TYPE The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer. GL_INDEX_BITS The params parameter returns one value: the number of bitplanes in each color-index buffer. GL_INDEX_CLEAR_VALUE The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex. GL_INDEX_LOGIC_OP The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp. GL_INDEX_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE). GL_INDEX_OFFSET The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer. GL_INDEX_SHIFT The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer. GL_INDEX_WRITEMASK The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask. GL_LIGHTi The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel. GL_LIGHTING The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel. GL_LIGHT_MODEL_AMBIENT The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel. GL_LIGHT_MODEL_LOCAL_VIEWER The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel. GL_LIGHT_MODEL_TWO_SIDE The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel. GL_LINE_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth. GL_LINE_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint. GL_LINE_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple. GL_LINE_STIPPLE_PATTERN The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple. GL_LINE_STIPPLE_REPEAT The params parameter returns one value: the line stipple repeat factor. See glLineStipple. GL_LINE_WIDTH The params parameter returns one value: the line width as specified with glLineWidth. GL_LINE_WIDTH_GRANULARITY The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth. GL_LINE_WIDTH_RANGE The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth. GL_LIST_BASE The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase. GL_LIST_INDEX The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList. GL_LIST_MODE The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList. GL_LOGIC_OP The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp. GL_LOGIC_OP_MODE The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp. GL_MAP1_COLOR_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1. GL_MAP1_GRID_DOMAIN The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid. GL_MAP1_GRID_SEGMENTS The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid. GL_MAP1_INDEX The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1. GL_MAP1_NORMAL The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1. GL_MAP1_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1. GL_MAP1_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1. GL_MAP1_VERTEX_3 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1. GL_MAP1_VERTEX_4 The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1. GL_MAP2_COLOR_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2. GL_MAP2_GRID_DOMAIN The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_GRID_SEGMENTS The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid. GL_MAP2_INDEX The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2. GL_MAP2_NORMAL The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2. GL_MAP2_TEXTURE_COORD_1 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_2 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2. GL_MAP2_TEXTURE_COORD_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2. GL_MAP2_VERTEX_3 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2. GL_MAP2_VERTEX_4 The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2. GL_MAP_COLOR The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MAP_STENCIL The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer. GL_MATRIX_MODE The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode. GL_MAX_CLIENT_ATTRIB_STACK_DEPTH The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib. GL_MAX_ATTRIB_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib. GL_MAX_CLIP_PLANES The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane. GL_MAX_EVAL_ORDER The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2. GL_MAX_LIGHTS The params parameter returns one value: the maximum number of lights. See glLight. GL_MAX_LIST_NESTING The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList. GL_MAX_MODELVIEW_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix. GL_MAX_NAME_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName. GL_MAX_PIXEL_MAP_TABLE The params parameter returns one value: the maximum supported size of a glPixelMap lookup table. GL_MAX_PROJECTION_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix. GL_MAX_TEXTURE_SIZE The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D. GL_MAX_TEXTURE_STACK_DEPTH The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix. GL_MAX_VIEWPORT_DIMS The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport. GL_MODELVIEW_MATRIX The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix. GL_MODELVIEW_STACK_DEPTH The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix. GL_NAME_STACK_DEPTH The params parameter returns one value: the number of names on the selection name stack. See glPushName. GL_NORMAL_ARRAY The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer. GL_NORMAL_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer. GL_NORMAL_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer. GL_NORMALIZE The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal. GL_PACK_ALIGNMENT The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore. GL_PACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore. GL_PACK_ROW_LENGTH The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore. GL_PACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore. GL_PACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore. GL_PERSPECTIVE_CORRECTION_HINT The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint. GL_PIXEL_MAP_A_TO_A_SIZE The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap. GL_PIXEL_MAP_B_TO_B_SIZE The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap. GL_PIXEL_MAP_G_TO_G_SIZE The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_A_SIZE The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_B_SIZE The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_G_SIZE The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_I_SIZE The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap. GL_PIXEL_MAP_I_TO_R_SIZE The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_R_TO_R_SIZE The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap. GL_PIXEL_MAP_S_TO_S_SIZE The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap. GL_POINT_SIZE The params parameter returns one value: the point size as specified by glPointSize. GL_POINT_SIZE_GRANULARITY The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize. GL_POINT_SIZE_RANGE The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize. GL_POINT_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize. GL_POINT_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint. GL_POLYGON_MODE The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode. GL_POLYGON_OFFSET_FACTOR The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_UNITS The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset. GL_POLYGON_OFFSET_FILL The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset. GL_POLYGON_OFFSET_LINE The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset. GL_POLYGON_OFFSET_POINT The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset. GL_POLYGON_SMOOTH The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode. GL_POLYGON_SMOOTH_HINT The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint. GL_POLYGON_STIPPLE The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple. GL_PROJECTION_MATRIX The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix. GL_PROJECTION_STACK_DEPTH The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix. GL_READ_BUFFER The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum. GL_RED_BIAS The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer. GL_RED_BITS The params parameter returns one value: the number of red bitplanes in each color buffer. GL_RED_SCALE The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer. GL_RENDER_MODE The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode. GL_RGBA_MODE The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor. GL_SCISSOR_BOX The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor. GL_SCISSOR_TEST The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor. GL_SHADE_MODEL The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel. GL_STENCIL_BITS The params parameter returns one value: the number of bitplanes in the stencil buffer. GL_STENCIL_CLEAR_VALUE The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil. GL_STENCIL_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp. GL_STENCIL_FUNC The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc. GL_STENCIL_PASS_DEPTH_FAIL The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp. GL_STENCIL_PASS_DEPTH_PASS The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp. GL_STENCIL_REF The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc. GL_STENCIL_TEST The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp. GL_STENCIL_VALUE_MASK The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc. GL_STENCIL_WRITEMASK The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask. GL_STEREO The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported. GL_SUBPIXEL_BITS The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates. GL_TEXTURE_1D The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D. GL_TEXTURE_2D The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D. GL_TEXTURE_COORD_ARRAY The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_SIZE The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_COORD_ARRAY_TYPE The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer. GL_TEXTURE_ENV_COLOR The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv. GL_TEXTURE_ENV_MODE The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv. GL_TEXTURE_GEN_Q The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_R The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_S The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen. GL_TEXTURE_GEN_T The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen. GL_TEXTURE_MATRIX The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix. GL_TEXTURE_STACK_DEPTH The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix. GL_UNPACK_ALIGNMENT The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore. GL_UNPACK_LSB_FIRST The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore. GL_UNPACK_ROW_LENGTH The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore. GL_UNPACK_SKIP_PIXELS The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SKIP_ROWS The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore. GL_UNPACK_SWAP_BYTES The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore. GL_VERTEX_ARRAY The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer. GL_VERTEX_ARRAY_SIZE The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_STRIDE The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer. GL_VERTEX_ARRAY_TYPE The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer. GL_VIEWPORT The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport. GL_ZOOM_X The params parameter returns one value: the x pixel zoom factor. See glPixelZoom. GL_ZOOM_Y The params parameter returns one value: the y pixel zoom factor. See glPixelZoom.",
 "glGetPointerv": "The type of array pointer to return from the following symbolic constants: GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, and GL_VERTEX_ARRAY_POINTER.",
 "glGetPolygonStipple": "Returns the stipple pattern.",
 "glGetString": "One of the following symbolic constants. ValueMeaning GL_VENDOR Returns the company responsible for this OpenGL implementation. This name does not change from release to release. GL_RENDERER Returns the name of the renderer. This name is typically specific to a particular configuration of a hardware platform. It does not change from release to release. GL_VERSION Returns a version or release number. GL_EXTENSIONS Returns a space-separated list of supported extensions to OpenGL.",
 "glGetTexImage": "Specifies which texture is to be obtained. GL_TEXTURE_1D and GL_TEXTURE_2D are accepted.",
 "glHint": "A symbolic constant indicating the behavior to be controlled. The following symbolic constants, along with suggested semantics, are accepted. ValueMeaning GL_FOG_HINT Indicates the accuracy of fog calculation. If per-pixel fog calculation is not efficiently supported by the OpenGL implementation, hinting GL_DONT_CARE or GL_FASTEST can result in per-vertex calculation of fog effects. GL_LINE_SMOOTH_HINT Indicates the sampling quality of antialiased lines. Hinting GL_NICEST can result in more pixel fragments being generated during rasterization, if a larger filter function is applied. GL_PERSPECTIVE_CORRECTION_HINT Indicates the quality of color and texture coordinate interpolation. If perspective-corrected parameter interpolation is not efficiently supported by the OpenGL implementation, hinting GL_DONT_CARE or GL_FASTEST can result in simple linear interpolation of colors and/or texture coordinates. GL_POINT_SMOOTH_HINT Indicates the sampling quality of antialiased points. Hinting GL_NICEST can result in more pixel fragments being generated during rasterization, if a larger filter function is applied. GL_POLYGON_SMOOTH_HINT Indicates the sampling quality of antialiased polygons. Hinting GL_NICEST can result in more pixel fragments being generated during rasterization, if a larger filter function is applied.",
 "glIndexMask": "A bit mask to enable and disable the writing of individual bits in the color-index buffers. Initially, the mask is all ones.",
 "glIndexPointer": "The data type of each color index in the array using the following symbolic constants: GL_SHORT, GL_INT, GL_FLOAT, GL_DOUBLE.",
 "glInitNames": null,
 "glInterleavedArrays": "The type of array to enable. The parameter can assume one of the following symbolic values: GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, or GL_T4F_C4F_N3F_V4F.",
 "glIsEnabled": "A symbolic constant indicating an OpenGL capability. The following capabilities are accepted. ValueMeaning GL_ALPHA_TEST See glAlphaFunc GL_AUTO_NORMAL See glEvalCoord GL_BLEND See glBlendFunc GL_CLIP_PLANE i See glClipPlane GL_COLOR_ARRAY See glColorPointer GL_COLOR_LOGIC_OP See glLogicOp GL_COLOR_MATERIAL See glColorMaterial GL_CULL_FACE See glCullFace GL_DEPTH_TEST See glDepthFunc and glDepthRange GL_DITHER See glEnable GL_FOG See glFog GL_INDEX_ARRAY See glIndexPointer GL_INDEX_LOGIC_OP See glLogicOp GL_LIGHT i See glLightModel and glLight GL_LIGHTING See glMaterial, glLightModel, and glLight GL_LINE_SMOOTH See glLineWidth GL_LINE_STIPPLE See glLineStipple GL_MAP1_COLOR_4 See glMap1 GL_MAP1_INDEX See glMap1 GL_MAP1_NORMAL See glMap1 GL_MAP1_TEXTURE_COORD_1 See glMap1 GL_MAP1_TEXTURE_COORD_2 See glMap1 GL_MAP1_TEXTURE_COORD_3 See glMap1 GL_MAP1_TEXTURE_COORD_4 See glMap1 GL_MAP1_VERTEX_3 See glMap1 GL_MAP1_VERTEX_4 See glMap1 GL_MAP2_COLOR_4 See glMap2 GL_MAP2_INDEX See glMap2 GL_MAP2_NORMAL See glMap2 GL_MAP2_TEXTURE_COORD_1 See glMap2 GL_MAP2_TEXTURE_COORD_2 See glMap2 GL_MAP2_TEXTURE_COORD_3 See glMap2 GL_MAP2_TEXTURE_COORD_4 See glMap2 GL_MAP2_VERTEX_3 See glMap2 GL_MAP2_VERTEX_4 See glMap2 GL_NORMAL_ARRAY See glNormalPointer GL_NORMALIZE See glNormal GL_POINT_SMOOTH See glPointSize GL_POLYGON_OFFSET_FILL See glPolygonOffset GL_POLYGON_OFFSET_LINE See glPolygonOffset GL_POLYGON_OFFSET_POINT See glPolygonOffset GL_POLYGON_SMOOTH See glPolygonMode GL_POLYGON_STIPPLE See glPolygonStipple GL_SCISSOR_TEST See glScissor GL_STENCIL_TEST See glStencilFunc and glStencilOp GL_TEXTURE_1D See glTexImage1D GL_TEXTURE_2D See glTexImage2D GL_TEXTURE_COORD_ARRAY See glTexCoordPointer GL_TEXTURE_GEN_Q See glTexGen GL_TEXTURE_GEN_R See glTexGen GL_TEXTURE_GEN_S See glTexGen GL_TEXTURE_GEN_T See glTexGen GL_VERTEX_ARRAY See glVertexPointer",
 "glIsList": "A potential display list name.",
 "glIsTexture": "A value that is the name of a texture.",
 "glLineStipple": "A multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern will be used three times before the next bit in the pattern is used. The factor parameter is clamped to the range [1, 256] and defaults to one.",
 "glLineWidth": "The width of rasterized lines. The default is 1.0.",
 "glListBase": "An integer offset that will be added to glCallLists offsets to generate display list names. Initial value is zero.",
 "glLoadIdentity": null,
 "glLoadName": "A name that will replace the top value on the name stack.",
 "glLogicOp": "A symbolic constant that selects a logical operation. The following symbols are accepted where s equals the value of the source bit and d is the value of the destination bit. ValueMeaning GL_CLEAR 0 GL_SET 1 GL_COPY s GL_COPY_INVERTED !s GL_NOOP d GL_INVERT !d GL_AND s & d GL_NAND !(s & d) GL_OR s | d GL_NOR !(s | d) GL_XOR s ^ d GL_EQUIV !(s ^ d) GL_AND_REVERSE s & !d GL_AND_INVERTED !s & d GL_OR_REVERSE s | !d GL_OR_INVERTED !s | d",
 "glMatrixMode": "The matrix stack that is the target for subsequent matrix operations. The mode parameter can assume one of three values. ValueMeaning GL_MODELVIEW Applies subsequent matrix operations to the modelview matrix stack. GL_PROJECTION Applies subsequent matrix operations to the projection matrix stack. GL_TEXTURE Applies subsequent matrix operations to the texture matrix stack.",
 "glNewList": "The display list name.",
 "glEndList": null,
 "glNormalPointer": "The data type of each coordinate in the array using the following symbolic constants: GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE.",
 "glOrtho": "The coordinates for the left vertical clipping plane.",
 "glPassThrough": "A marker value to be placed in the feedback buffer. It is indicated with the following unique identifying value. ValueMeaning GL_PASS_THROUGH_TOKEN The order of glPassThrough commands with respect to the specification of graphics primitives is maintained.",
 "glPixelZoom": "The x zoom factor for pixel write operations.",
 "glPointSize": "The diameter of rasterized points. The default is 1.0.",
 "glPolygonMode": "The polygons that mode applies to. Must be GL_FRONT for front-facing polygons, GL_BACK for back-facing polygons, or GL_FRONT_AND_BACK for front- and back-facing polygons.",
 "glPolygonOffset": "Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is zero.",
 "glPolygonStipple": "A pointer to a 32x32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.",
 "glPrioritizeTextures": "The number of textures to be prioritized.",
 "glPushAttrib": "A mask that indicates which attributes to save. The symbolic mask constants and their associated OpenGL state are as follows (the indented paragraphs list which attributes are saved): GL_ACCUM_BUFFER_BIT Accumulation buffer clear value GL_COLOR_BUFFER_BIT GL_ALPHA_TEST enable bit Alpha test function and reference value GL_BLEND enable bit Blending source and destination functions GL_DITHER enable bit GL_DRAW_BUFFER setting GL_LOGIC_OP enable bit Logic op function Color-mode and index-mode clear values Color-mode and index-mode writemasks GL_CURRENT_BIT Current RGBA color Current color index Current normal vector Current texture coordinates Current raster position GL_CURRENT_RASTER_POSITION_VALID flag RGBA color associated with current raster position Color index associated with current raster position Texture coordinates associated with current raster position GL_EDGE_FLAG flag GL_DEPTH_BUFFER_BIT GL_DEPTH_TEST enable bit Depth buffer test function Depth buffer clear value GL_DEPTH_WRITEMASK enable bit GL_ENABLE_BIT GL_ALPHA_TEST flag GL_AUTO_NORMAL flag GL_BLEND flag Enable bits for the user-definable clipping planes GL_COLOR_MATERIAL GL_CULL_FACE flag GL_DEPTH_TEST flag GL_DITHER flag GL_FOG flag GL_LIGHTi where 0 <= i < GL_MAX_LIGHTS GL_LIGHTING flag GL_LINE_SMOOTH flag GL_LINE_STIPPLE flag GL_COLOR_LOGIC_OP flag GL_INDEX_LOGIC_OP flag GL_MAP1_x where x is a map type GL_MAP2_x where x is a map type GL_NORMALIZE flag GL_POINT_SMOOTH flag GL_POLYGON_OFFSET_LINE flag GL_POLYGON_OFFSET_FILL flag GL_POLYGON_OFFSET_POINT flag GL_POLYGON_SMOOTH flag GL_POLYGON_STIPPLE flag GL_SCISSOR_TEST flag GL_STENCIL_TEST flag GL_TEXTURE_1D flag GL_TEXTURE_2D flag Flags GL_TEXTURE_GEN_x where x is S, T, R, or Q GL_EVAL_BIT GL_MAP1_x enable bits, where x is a map type GL_MAP2_x enable bits, where x is a map type 1-D grid endpoints and divisions 2-D grid endpoints and divisions GL_AUTO_NORMAL enable bit GL_FOG_BIT GL_FOG enable flag Fog color Fog density Linear fog start Linear fog end Fog index GL_FOG_MODE value GL_HINT_BIT GL_PERSPECTIVE_CORRECTION_HINT setting GL_POINT_SMOOTH_HINT setting GL_LINE_SMOOTH_HINT setting GL_POLYGON_SMOOTH_HINT setting GL_FOG_HINT setting GL_LIGHTING_BIT GL_COLOR_MATERIAL enable bit GL_COLOR_MATERIAL_FACE value Color material parameters that are tracking the current color Ambient scene color GL_LIGHT_MODEL_LOCAL_VIEWER value GL_LIGHT_MODEL_TWO_SIDE setting GL_LIGHTING enable bit Enable bit for each light Ambient, diffuse, and specular intensity for each light Direction, position, exponent, and cutoff angle for each light Constant, linear, and quadratic attenuation factors for each light Ambient, diffuse, specular, and emissive color for each material Ambient, diffuse, and specular color indexes for each material Specular exponent for each material GL_SHADE_MODEL setting GL_LINE_BIT GL_LINE_SMOOTH flag GL_LINE_STIPPLE enable bit Line stipple pattern and repeat counter Line width GL_LIST_BIT GL_LIST_BASE setting GL_PIXEL_MODE_BIT GL_RED_BIAS and GL_RED_SCALE settings GL_GREEN_BIAS and GL_GREEN_SCALE values GL_BLUE_BIAS and GL_BLUE_SCALE GL_ALPHA_BIAS and GL_ALPHA_SCALE GL_DEPTH_BIAS and GL_DEPTH_SCALE GL_INDEX_OFFSET and GL_INDEX_SHIFT values GL_MAP_COLOR and GL_MAP_STENCIL flags GL_ZOOM_X and GL_ZOOM_Y factors GL_READ_BUFFER setting GL_POINT_BIT GL_POINT_SMOOTH flag Point size GL_POLYGON_BIT GL_CULL_FACE enable bit GL_CULL_FACE_MODE value GL_FRONT_FACE indicator GL_POLYGON_MODE setting GL_POLYGON_SMOOTH flag GL_POLYGON_STIPPLE enable bit GL_POLYGON_OFFSET_FILL flag GL_POLYGON_OFFSET_LINE flag GL_POLYGON_OFFSET_POINT flag GL_POLYGON_OFFSET_FACTOR GL_POLYGON_OFFSET_UNITS GL_POLYGON_STIPPLE_BIT Polygon stipple image GL_SCISSOR_BIT GL_SCISSOR_TEST flag Scissor box GL_STENCIL_BUFFER_BIT GL_STENCIL_TEST enable bit Stencil function and reference value Stencil value mask Stencil fail, pass, and depth buffer pass actions Stencil buffer clear value Stencil buffer writemask GL_TEXTURE_BIT Enable bits for the four texture coordinates Border color for each texture image Minification function for each texture image Magnification function for each texture image Texture coordinates and wrap mode for each texture image Color and mode for each texture environment Enable bits GL_TEXTURE_GEN_x; x is S, T, R, and Q GL_TEXTURE_GEN_MODE setting for S, T, R, and Q glTexGen plane equations for S, T, R, and Q GL_TRANSFORM_BIT Coefficients of the six clipping planes Enable bits for the user-definable clipping planes GL_MATRIX_MODE value GL_NORMALIZE flag GL_VIEWPORT_BIT Depth range (near and far) Viewport origin and extent",
 "glPopAttrib": null,
 "glPushClientAttrib": "A mask that indicates which attributes to save. The following are the symbolic mask constants and their associated OpenGL client states. ValueMeaning GL_CLIENT_PIXEL_STORE_BIT Pixel storage mode attributes. GL_CLIENT_VERTEX_ARRAY_BIT Vertex array attributes. GL_CLIENT_ALL_ATTRIB_BITs all stackable client-state attributes.",
 "glPopClientAttrib": null,
 "glPushMatrix": null,
 "glPopMatrix": null,
 "glPushName": "A name that will be pushed onto the name stack.",
 "glPopName": null,
 "glReadBuffer": "A color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and GL_AUX i, where i is between 0 and GL_AUX_BUFFERS 1.",
 "glReadPixels": "The window x coordinate of the first pixel that is read from the framebuffer. Together with the y coordinate, specifies the location of the lower-left corner of a rectangular block of pixels.",
 "glRenderMode": "The rasterization mode. The following three values are accepted. The default value is GL_RENDER. ValueMeaning GL_RENDER Render mode. Primitives are rasterized, producing pixel fragments, which are written into the framebuffer. This is the normal mode and also the default mode. GL_SELECT Selection mode. No pixel fragments are produced, and no change to the framebuffer contents is made. Instead, a record of the names of primitives that would have been drawn if the render mode was GL_RENDER is returned in a select buffer, which must be created (see glSelectBuffer) before selection mode is entered. GL_FEEDBACK Feedback mode. No pixel fragments are produced, and no change to the framebuffer contents is made. Instead, the coordinates and attributes of vertices that would have been drawn had the render mode been GL_RENDER are returned in a feedback buffer, which must be created (see glFeedbackBuffer) before feedback mode is entered.",
 "glScissor": "The x (vertical axis) coordinate for the lower-left corner of the scissor box.",
 "glSelectBuffer": "The size of buffer.",
 "glShadeModel": "A symbolic value representing a shading technique. Accepted values are GL_FLAT and GL_SMOOTH. The default is GL_SMOOTH.",
 "glStencilFunc": "The test function. ...",
 "glStencilMask": "A bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all ones.",
 "glStencilOp": "The action to take when the stencil test fails. The following six symbolic constants are accepted. ValueMeaning GL_KEEP Keeps the current value. GL_ZERO Sets the stencil buffer value to zero. GL_REPLACE Sets the stencil buffer value to ref, as specified by glStencilFunc. GL_INCR Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. GL_DECR Decrements the current stencil buffer value. Clamps to zero. GL_INVERT Bitwise inverts the current stencil buffer value.",
 "glTexCoordPointer": "The number of coordinates per array element. The value of size must be 1, 2, 3, or 4.",
 "glTexImage1D": "The target texture. Must be GL_TEXTURE_1D.",
 "glTexImage2D": "The target texture. Must be GL_TEXTURE_2D.",
 "glTexSubImage1D": "The target texture. Must be GL_TEXTURE_1D.",
 "glTexSubImage2D": "The target texture. Must be GL_TEXTURE_2D.",
 "glVertexPointer": "The number of coordinates per vertex. The value of size must be 2, 3, or 4.",
 "glViewport": "The lower-left corner of the viewport rectangle, in pixels. The default is (0,0).",
 "GetTextCharset": "Handle to a device context. The function obtains a character set identifier for the font that is selected into this device context.",
 "GetTextCharsetInfo": "Handle to a device context. The function obtains information about the font that is selected into this device context.",
 "IsDBCSLeadByte": "The character to test.",
 "IsDBCSLeadByteEx": "Identifier of the code page used to check lead byte ranges. This parameter can be one of the code page identifiers defined in Unicode and Character Set Constants or one of the following predefined values. This function validates lead byte values only in code pages 932, 936, 949, 950, and 1361. ValueMeaning CP_ACP Use system default Windows ANSI code page. CP_MACCP Use the system default Macintosh code page. CP_OEMCP Use system default OEM code page. CP_THREAD_ACP Use the Windows ANSI code page for the current thread.",
 "IsTextUnicode": "Pointer to the input buffer to examine.",
 "MultiByteToWideChar": "Code page to use in performing the conversion. This parameter can be set to the value of any code page that is installed or available in the operating system. For a list of code pages, see Code Page Identifiers. Your application can also specify one of the values shown in the following table. ValueMeaning CP_ACP The system default Windows ANSI code page. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. CP_MACCP The current system Macintosh code page. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. Note This value is used primarily in legacy code and should not generally be needed since modern Macintosh computers use Unicode for encoding. CP_OEMCP The current system OEM code page. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. CP_SYMBOL Symbol code page (42). CP_THREAD_ACP The Windows ANSI code page for the current thread. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. CP_UTF7 UTF-7. Use this value only when forced by a 7-bit transport mechanism. Use of UTF-8 is preferred. CP_UTF8 UTF-8.",
 "TranslateCharsetInfo": "Pointer to the fsCsb member of a FONTSIGNATURE structure if dwFlags is set to TCI_SRCFONTSIG. Otherwise, this parameter is set to a DWORD value indicating the source.",
 "WideCharToMultiByte": "Code page to use in performing the conversion. This parameter can be set to the value of any code page that is installed or available in the operating system. For a list of code pages, see Code Page Identifiers. Your application can also specify one of the values shown in the following table. ValueMeaning CP_ACP The system default Windows ANSI code page. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. CP_MACCP The current system Macintosh code page. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. Note This value is used primarily in legacy code and should not generally be needed since modern Macintosh computers use Unicode for encoding. CP_OEMCP The current system OEM code page. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. CP_SYMBOL Windows 2000: Symbol code page (42). CP_THREAD_ACP Windows 2000: The Windows ANSI code page for the current thread. Note This value can be different on different computers, even on the same network. It can be changed on the same computer, leading to stored data becoming irrecoverably corrupted. This value is only intended for temporary use and permanent storage should use UTF-16 or UTF-8 if possible. CP_UTF7 UTF-7. Use this value only when forced by a 7-bit transport mechanism. Use of UTF-8 is preferred. With this value set, lpDefaultChar and lpUsedDefaultChar must be set to NULL. CP_UTF8 UTF-8. With this value set, lpDefaultChar and lpUsedDefaultChar must be set to NULL.",
 "BytesToUnicode": "Pointer to the multibyte string to convert.",
 "NlsDllCodePageTranslation": "The value of the code page. The code page value should be 54936. Otherwise, the function returns an error code.",
 "UnicodeToBytes": "Pointer to the Unicode string to convert.",
 "BackupRead": "Handle to the file or directory to be backed up. To obtain the handle, call the CreateFile function. The SACLs are not read unless the file handle was created with the ACCESS_SYSTEM_SECURITY access right. For more information, see File Security and Access Rights. The handle must be synchronous (nonoverlapped). This means that the FILE_FLAG_OVERLAPPED flag must not be set when CreateFile is called. This function does not validate that the handle it receives is synchronous, so it does not return an error code for a synchronous handle, but calling it with an asynchronous (overlapped) handle can result in subtle errors that are very difficult to debug. The BackupRead function may fail if CreateFile was called with the flag FILE_FLAG_NO_BUFFERING. In this case, the GetLastError function returns the value ERROR_INVALID_PARAMETER.",
 "BackupSeek": "Handle to the file or directory. This handle is created by using the CreateFile function. The handle must be synchronous (nonoverlapped). This means that the FILE_FLAG_OVERLAPPED flag must not be set when CreateFile is called. This function does not validate that the handle it receives is synchronous, so it does not return an error code for a synchronous handle, but calling it with an asynchronous (overlapped) handle can result in subtle errors that are very difficult to debug.",
 "BackupWrite": "Handle to the file or directory to be restored. To obtain the handle, call the CreateFile function. The SACLs are not restored unless the file handle was created with the ACCESS_SYSTEM_SECURITY access right. To ensure that the integrity ACEs are restored correctly, the file handle must also have been created with the WRITE_OWNER access right. For more information, see File Security and Access Rights. Windows Server 2003 and Windows XP: The WRITE_OWNER access right is not required. The handle must be synchronous (nonoverlapped). This means that the FILE_FLAG_OVERLAPPED flag must not be set when CreateFile is called. This function does not validate that the handle it receives is synchronous, so it does not return an error code for a synchronous handle, but calling it with an asynchronous (overlapped) handle can result in subtle errors that are very difficult to debug. The BackupWrite function may fail if CreateFile was called with the flag FILE_FLAG_NO_BUFFERING. In this case, the GetLastError function returns the value ERROR_INVALID_PARAMETER.",
 "CreateTapePartition": "Handle to the device where the new partition is to be created. This handle is created by using the CreateFile function.",
 "EraseTape": "Handle to the device where the tape is to be erased. This handle is created by using the CreateFile function.",
 "GetTapeParameters": "Handle to the device about which information is sought. This handle is created by using the CreateFile function.",
 "GetTapePosition": "Handle to the device on which to get the tape position. This handle is created by using CreateFile.",
 "GetTapeStatus": "Handle to the device for which to get the device status. This handle is created by using the CreateFile function.",
 "PrepareTape": "Handle to the device preparing the tape. This handle is created by using the CreateFile function.",
 "SetTapeParameters": "Handle to the device for which to set configuration information. This handle is created by using the CreateFile function.",
 "SetTapePosition": "Handle to the device on which to set the tape position. This handle is created by using the CreateFile function.",
 "WriteTapemark": "Handle to the device on which to write tapemarks. This handle is created by using the CreateFile function.",
 "SisCreateBackupStructure": "File name of the volume root, without the trailing backslash, of the volume to be backed up. For example, specify \"C:\" and not \"C:\\\".",
 "SisCreateRestoreStructure": "File name of the volume root, without the trailing backslash, of the volume to be backed up. For example, specify \"C:\" and not \"C:\\\". The volume cannot be the system or boot volume.",
 "SisCSFilesToBackupForLink": "Pointer to the SIS backup structure returned from SisCreateBackupStructure.",
 "SisFreeAllocatedMemory": "Pointer to the memory allocated by the SIS API.",
 "SisFreeBackupStructure": "Pointer to the SIS backup structure returned from SisCreateBackupStructure.",
 "SisFreeRestoreStructure": "Pointer to a SIS restore structure returned from SisCreateRestoreStructure.",
 "SisRestoredCommonStoreFile": "Pointer to a SIS restore structure returned from SisCreateRestoreStructure.",
 "SisRestoredLink": "Pointer to a SIS restore structure returned from SisCreateRestoreStructure.",
 "CloseEncryptedFileRaw": "A pointer to a system-defined context block. The OpenEncryptedFileRaw function returns the context block.",
 "OpenEncryptedFileRaw": "The name of the file to be opened. The string must consist of characters from the Windows character set.",
 "ReadEncryptedFileRaw": "A pointer to the export callback function. The system calls the callback function multiple times, each time passing a block of the file's data to the callback function until the entire file has been read. For more information, see ExportCallback.",
 "WriteEncryptedFileRaw": "A pointer to the import callback function. The system calls the callback function multiple times, each time passing a buffer that will be filled by the callback function with a portion of backed-up file's data. When the callback function signals that the entire file has been processed, it tells the system that the restore operation is finished. For more information, see ImportCallback.",
 "CloseWindowStation": "A handle to the window station to be closed. This handle is returned by the CreateWindowStation or OpenWindowStation function. Do not specify the handle returned by the GetProcessWindowStation function.",
 "CreateWindowStation": "The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\\). Only members of the Administrators group are allowed to specify a name. If lpwinsta is NULL or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the GetUserObjectInformation function.",
 "EnumWindowStations": "A pointer to an application-defined EnumWindowStationProc callback function.",
 "GetProcessWindowStation": null,
 "GetUserObjectInformation": "A handle to the window station or desktop object. This handle is returned by the CreateWindowStation, OpenWindowStation, CreateDesktop, or OpenDesktop function.",
 "OpenWindowStation": "The name of the window station to be opened. Window station names are case-insensitive. This window station must belong to the current session.",
 "SetProcessWindowStation": "A handle to the window station. This can be a handle returned by the CreateWindowStation, OpenWindowStation, or GetProcessWindowStation function. This window station must be associated with the current session.",
 "SetUserObjectInformation": "A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the CreateWindowStation, OpenWindowStation, CreateDesktop, OpenDesktop or GetCurrentProcess function.",
 "CloseDesktop": "A handle to the desktop to be closed. This can be a handle returned by the CreateDesktop, OpenDesktop, or OpenInputDesktop functions. Do not specify the handle returned by the GetThreadDesktop function.",
 "CreateDesktop": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).",
 "CreateDesktopEx": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).",
 "EnumDesktops": "A handle to the window station whose desktops are to be enumerated. This handle is returned by the CreateWindowStation, GetProcessWindowStation, or OpenWindowStation function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see Window Station Security and Access Rights. If this parameter is NULL, the current window station is used.",
 "EnumDesktopWindows": "A handle to the desktop whose top-level windows are to be enumerated. This handle is returned by the CreateDesktop, GetThreadDesktop, OpenDesktop, or OpenInputDesktop function, and must have the DESKTOP_READOBJECTS access right. For more information, see Desktop Security and Access Rights. If this parameter is NULL, the current desktop is used.",
 "GetThreadDesktop": "The thread identifier. The GetCurrentThreadId and CreateProcess functions return thread identifiers.",
 "OpenDesktop": "The name of the desktop to be opened. Desktop names are case-insensitive. This desktop must belong to the current window station.",
 "OpenInputDesktop": "This parameter can be zero or the following value. ValueMeaning DF_ALLOWOTHERACCOUNTHOOK 0x0001 Allows processes running in other accounts on the desktop to set hooks in this process.",
 "SetThreadDesktop": "A handle to the desktop to be assigned to the calling thread. This handle is returned by the CreateDesktop, GetThreadDesktop, OpenDesktop, or OpenInputDesktop function. This desktop must be associated with the current window station for the process.",
 "SwitchDesktop": "A handle to the desktop. This handle is returned by the CreateDesktop and OpenDesktop functions. This desktop must be associated with the current window station for the process.",
 "CheckDlgButton": "Type: HWND A handle to the dialog box that contains the button.",
 "CheckRadioButton": "Type: HWND A handle to the dialog box that contains the radio button.",
 "IsDlgButtonChecked": "Type: HWND A handle to the dialog box that contains the button control.",
 "DavAddConnection": "A pointer to a variable that receives the connection handle.",
 "DavAuthCallback": "A pointer to a NULL-terminated Unicode string that contains the name of the target server.",
 "DavCancelConnectionsToServer": "Pointer to a null-terminated Unicode string that contains the name of the remote file or server. This string must be in one of the following formats: http://server/path \\\\server\\path server where server is the name of a WebDAV server, and path is the path to a remote file or directory on the server.",
 "DavDeleteConnection": "A handle to an open connection that was created by using the DavAddConnection function.",
 "DavFlushFile": "A handle to an open file on a WebDAV server. The file handle must have the GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "DavFreeCredCallback": "A pointer to the DAV_CALLBACK_AUTH_UNP or DAV_CALLBACK_AUTH_BLOB structure that was used in the DavAuthCallback callback function.",
 "DavGetExtendedError": "A handle to an open file for which the previous I/O operation has failed. If the previous operation is a failed create operation, in which case there is no open file handle, specify INVALID_HANDLE_VALUE for this parameter.",
 "DavGetHTTPFromUNCPath": "A pointer to a null-terminated Unicode string that contains the UNC path. This path must be in the following format: \\\\server[@SSL][@port][\\path] where server is the server name. @SSL is optional and indicates a request for an SSL connection. port is an optional port number. The standard ports are 80 for http and 443 for https (SSL). path is optional and specifies a path to a remote file or directory on the server.",
 "DavGetTheLockOwnerOfTheFile": "A pointer to a null-terminated Unicode string that contains the name of a locked file on the WebDAV server. This string must be in one of the following formats: \\\\server\\path\\filename drive:\\filename where server is the name of a server, path is the path to a remote file on the server, filename is a valid file name, and drive is the drive letter that a remote share is mapped to on the local computer. (A share is a directory on a server that is made available to users over the network.)",
 "DavGetUNCFromHTTPPath": "A pointer to a null-terminated Unicode string that contains the HTTP path. This string can be in any of the following formats, where server is the server name and path is the path to a remote file or directory on the server: http://server/path http://server \\\\http://server/path \\\\http://server https://server/path https://server \\\\https://server/path \\\\https://server \\\\server\\path \\\\server",
 "DavInvalidateCache": "A pointer to a Unicode string that contains the name of a remote file on a WebDAV server. This name can be an HTTP path name (URL) or a UNC path name.",
 "DavRegisterAuthCallback": "A pointer to a function of type PFNDAVAUTHCALLBACK.",
 "DavUnregisterAuthCallback": "The opaque handle that was returned by the DavRegisterAuthCallback function.",
 "DisableThreadProfiling": "The handle that the EnableThreadProfiling function returned.",
 "EnableThreadProfiling": "The handle to the thread on which you want to enable profiling. This must be the current thread.",
 "QueryThreadProfiling": "The handle to the thread of interest.",
 "ReadThreadProfilingData": "The handle that the EnableThreadProfiling function returned.",
 "ProgressNotificationCallback": "Type: LPVOID Component data passed to the callback function.",
 "WICConvertBitmapSource": "Type: REFWICPixelFormatGUID The pixel format to convert to.",
 "WICCreateBitmapFromSection": "Type: UINT The width of the bitmap pixels.",
 "WICCreateBitmapFromSectionEx": "Type: UINT The width of the bitmap pixels.",
 "WICGetMetadataContentSize": "Type: REFGUID The container GUID.",
 "WICMapGuidToShortName": "Type: REFGUID The GUID to retrieve the short name for.",
 "WICMapSchemaToName": "Type: REFGUID The metadata format GUID.",
 "WICMapShortNameToGuid": "Type: const WCHAR* A pointer to the short name.",
 "WICMatchMetadataContent": "Type: REFGUID The container format GUID.",
 "WICSerializeMetadataContent": "Type: REFGUID The container format GUID.",
 "KillTimer": "Type: HWND A handle to the window associated with the specified timer. This value must be the same as the \t\t\t\t\thWnd value passed to the SetTimer function that created the timer.",
 "SetCoalescableTimer": "Type: HWND A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that timer will be replaced in the same way that an existing non-NULL hWnd timer will be.",
 "SetTimer": "Type: HWND A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that timer will be replaced in the same way that an existing non-NULL hWnd timer will be.",
 "TimerProc": "Type: HWND A handle to the window associated with the timer.",
 "ActivateAudioInterfaceAsync": "A device interface ID for an audio device. This is normally retrieved from a DeviceInformation object or one of the methods of the MediaDevice class. The GUIDs DEVINTERFACE_AUDIO_CAPTURE and DEVINTERFACE_AUDIO_RENDER represent the default audio capture and render device respectively. Call StringFromIID to convert either of these GUIDs to an LPCWSTR to use for this argument.",
 "EnumDisplayMonitors": "A handle to a display device context that defines the visible region of interest. If this parameter is NULL, the hdcMonitor parameter passed to the callback function will be NULL, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop.",
 "GetMonitorInfo": "A handle to the display monitor of interest.",
 "MonitorEnumProc": "A handle to the display monitor. This value will always be non-NULL.",
 "MonitorFromPoint": "A POINT structure that specifies the point of interest in virtual-screen coordinates.",
 "MonitorFromRect": "A pointer to a RECT structure that specifies the rectangle of interest in virtual-screen coordinates.",
 "MonitorFromWindow": "A handle to the window of interest.",
 "WebSocketAbortHandle": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
 "WebSocketCreateClientHandle": "Type: const PWEB_SOCKET_PROPERTY Pointer to an array of WEB_SOCKET_PROPERTY structures that contain WebSocket session-related properties.",
 "WebSocketCreateServerHandle": "Type: const PWEB_SOCKET_PROPERTY Pointer to an array of WEB_SOCKET_PROPERTY structures that contain WebSocket session-related properties.",
 "WebSocketBeginClientHandshake": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle.",
 "WebSocketBeginServerHandshake": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateServerHandle.",
 "WebSocketCompleteAction": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
 "WebSocketGetAction": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
 "WebSocketDeleteHandle": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
 "WebSocketEndClientHandshake": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle.",
 "WebSocketEndServerHandshake": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateServerHandle.",
 "WebSocketSend": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
 "WebSocketReceive": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
 "WebSocketGetGlobalProperty": "Type: WEB_SOCKET_PROPERTY A WebSocket property.",
 "DeviceIoControl": "A handle to the device on which the operation is to be performed. The device is typically a volume, directory, file, or stream. To retrieve a device handle, use the CreateFile function. For more information, see Remarks.",
 "InstallNewDevice": "A handle to the top-level window to be used for any required user interface.",
 "RegisterDeviceNotification": "A handle to the window or service that will receive device events for the devices specified in the NotificationFilter parameter. The same window handle can be used in multiple calls to RegisterDeviceNotification. Services can specify either a window handle or service status handle.",
 "UnregisterDeviceNotification": "Device notification handle returned by the RegisterDeviceNotification function.",
 "CdromDisableDigitalPlayback": "A handle to a device information set listing the devices for which information is to be returned. This handle is typically returned by the SetupDiGetClassDevs or SetupDiGetClassDevsEx function.",
 "CdromEnableDigitalPlayback": "A handle to a device information set listing the devices for which information is to be returned. This handle is typically returned by the SetupDiGetClassDevs or SetupDiGetClassDevsEx function.",
 "CdromIsDigitalPlaybackEnabled": "A handle to a device information set listing the devices for which information is to be returned. This handle is typically returned by the SetupDiGetClassDevs or SetupDiGetClassDevsEx function.",
 "CdromKnownGoodDigitalPlayback": "A handle to a device information set listing the devices for which information is to be returned. This handle is typically returned by the SetupDiGetClassDevs or SetupDiGetClassDevsEx function.",
 "DvdLauncher": "A handle to the top-level window to be used for any required user interface.",
 "EnumUILanguages": "Pointer to an application-defined EnumUILanguagesProc callback function. EnumUILanguages calls this function repeatedly to enumerate the languages in the list.",
 "EnumUILanguagesProc": "Pointer to a buffer containing a null-terminated string representing a user interface language identifier or language name, depending on the value for the dwFlags parameter passed in the call to EnumUILanguages.",
 "FreeMUILibrary": "Handle to a resource module loaded by LoadMUILibrary. The handle indicates either a language-specific resource file or an LN file.",
 "LoadMUILibrary": "Pointer to a null-terminated string specifying the name of an LN file.",
 "GetFileMUIInfo": "Flags specifying the information to retrieve. Any combination of the following flags is allowed. The default value of the flags is MUI_QUERY_TYPE | MUI_QUERY_CHECKSUM. ValueMeaning MUI_QUERY_TYPE Retrieve one of the following values in the dwFileType member of FILEMUIINFO: MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL: The specified input file does not have resource configuration data. Thus it is neither an LN file nor a language-specific resource file. This type of file is typical for older executable files. If this file type is specified, the function will not retrieve useful information for the other types. MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN. The input file is an LN file. MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI. The input file is a language-specific resource file associated with an LN file. MUI_QUERY_CHECKSUM Retrieve the resource checksum of the input file in the pChecksum member of FILEMUIINFO. If the input file does not have resource configuration data, this member of the structure contains 0. MUI_QUERY_LANGUAGE_NAME Retrieve the language associated with the input file. For a language-specific resource file, this flag requests the associated language. For an LN file, this flag requests the language of the ultimate fallback resources for the module, which can be either in the LN file or in a separate language-specific resource file referenced by the resource configuration data of the LN file. For more information, see the Remarks section. MUI_QUERY_RESOURCE_TYPES Retrieve lists of resource types in the language-specific resource files and LN files as they are specified in the resource configuration data. See the Remarks section for a way to access this information.",
 "GetFileMUIPath": "Flags identifying language format and filtering. The following flags specify the format of the language indicated by pwszLanguage. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID Retrieve the language string in language identifier format. MUI_LANGUAGE_NAME Retrieve the language string in language name format. The following flags specify the filtering for the function to use in locating language-specific resource files if pwszLanguage is set to NULL. The filtering flags are mutually exclusive, and the default is MUI_USER_PREFERRED_UI_LANGUAGES. ValueMeaning MUI_USE_SEARCH_ALL_LANGUAGES Retrieve all language-specific resource files for the path indicated by pcwszFilePath, without considering file licensing. This flag is relevant only if the application supplies a null string for pwszLanguage. MUI_USER_PREFERRED_UI_LANGUAGES Retrieve only the files that implement languages in the fallback list. Successive calls enumerate the successive fallbacks, in the appropriate order. The first file indicated by the output value of pcchFileMUIPath should be the best fit. This flag is relevant only if the application supplies a null string for pwszLanguage. MUI_USE_INSTALLED_LANGUAGES Retrieve only the files for the languages installed on the computer. This flag is relevant only if the application supplies a null string for pwszLanguage. The following flags allow the user to indicate the type of file that is specified by pcwszFilePath so that the function can determine if it must add \".mui\" to the file name. The flags are mutually exclusive. If the application passes both flags, the function fails. If the application passes neither flag, the function checks the file in the root folder to verify the file type and decide on file naming. ValueMeaning MUI_LANG_NEUTRAL_PE_FILE Do not verify the file passed in pcwszFilePath and append \".mui\" to the file name before processing. For example, change Abc.exe to Abc.exe.mui. MUI_NON_LANG_NEUTRAL_FILE Do not verify the file passed in pcwszFilePath and do not append \".mui\" to the file name before processing. For example, use Abc.txt or Abc.chm.",
 "GetProcessPreferredUILanguages": "Flags identifying the language format to use for the process preferred UI languages. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID Retrieve the language strings in language identifier format. MUI_LANGUAGE_NAME Retrieve the language strings in language name format.",
 "GetSystemDefaultUILanguage": null,
 "GetSystemPreferredUILanguages": "Flags identifying language format and filtering. The following flags specify the format to use for the system preferred UI languages. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID Retrieve the language strings in language identifier format. MUI_LANGUAGE_NAME Retrieve the language strings in language name format. The following flag specifies whether the function is to validate the list of languages (default) or retrieve the system preferred UI languages list exactly as it is stored in the registry. ValueMeaning MUI_MACHINE_LANGUAGE_SETTINGS Retrieve the stored system preferred UI languages list, checking only to ensure that each language name corresponds to a valid NLS locale. If this flag is not set, the function retrieves the system preferred UI languages in pwszLanguagesBuffer, as long as the list is non-empty and meets the validation criteria. Otherwise, the function retrieves the system default user interface language in the language buffer.",
 "GetThreadPreferredUILanguages": "Flags identifying language format and filtering. The following flags specify the language format to use for the thread preferred UI languages. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID Retrieve the language strings in language identifier format. MUI_LANGUAGE_NAME Retrieve the language strings in language name format. The following flags specify filtering for the function to use in retrieving the thread preferred UI languages. The default flag is MUI_MERGE_USER_FALLBACK. ValueMeaning MUI_MERGE_SYSTEM_FALLBACK Use the system fallback to retrieve a list that corresponds exactly to the language list used by the resource loader. This flag can be used only in combination with MUI_MERGE_USER_FALLBACK. Using the flags in combination alters the usual effect of MUI_MERGE_USER_FALLBACK by including fallback and neutral languages in the list. MUI_MERGE_USER_FALLBACK Retrieve a composite list consisting of the thread preferred UI languages, followed by process preferred UI languages, followed by any user preferred UI languages that are distinct from these, followed by the system default UI language, if it is not already in the list. If the user preferred UI languages list is empty, the function retrieves the system preferred UI languages. This flag cannot be combined with MUI_THREAD_LANGUAGES. MUI_THREAD_LANGUAGES Retrieve only the thread preferred UI languages for the current thread, or an empty list if no preferred languages are set for the current thread. This flag cannot be combined with MUI_MERGE_USER_FALLBACK or MUI_MERGE_SYSTEM_FALLBACK. MUI_UI_FALLBACK Retrieve a complete thread preferred UI languages list along with associated fallback and neutral languages. Use of this flag is equivalent to combining MUI_MERGE_SYSTEM_FALLBACK and MUI_MERGE_USER_FALLBACK. (Applicable only for Windows 7 and later).",
 "GetThreadUILanguage": null,
 "GetUILanguageFallbackList": "Pointer to a double null-terminated buffer in which the function retrieves an ordered, null-delimited list of language names. Alternatively, this parameter contains NULL if cchFallbackList is set to 0. In this case, the function retrieves the required size of the language buffer in pcchFallbackListOut.",
 "GetUILanguageInfo": "Flags defining the format of the specified language. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID Retrieve the language strings in language identifier format. MUI_LANGUAGE_NAME Retrieve the language strings in language name format.",
 "GetUserDefaultUILanguage": null,
 "GetUserPreferredUILanguages": "Flags identifying language format and filtering. The following flags specify the language format to use for the user preferred UI languages list. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID Retrieve the language strings in language identifier format. MUI_LANGUAGE_NAME Retrieve the language strings in language name format.",
 "SetProcessPreferredUILanguages": "Flags identifying the language format to use for the process preferred UI languages. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID The input parameter language strings are in language identifier format. MUI_LANGUAGE_NAME The input parameter language strings are in language name format.",
 "SetThreadPreferredUILanguages": "Flags identifying format and filtering for the languages to set. The following flags specify the language format to use for the thread preferred UI languages. The flags are mutually exclusive, and the default is MUI_LANGUAGE_NAME. ValueMeaning MUI_LANGUAGE_ID The input parameter language strings are in language identifier format. MUI_LANGUAGE_NAME The input parameter language strings are in language name format. The following flags specify filtering for the language list. The flags are mutually exclusive. By default, neither MUI_COMPLEX_SCRIPT_FILTER nor MUI_CONSOLE_FILTER is set. For more information about the filtering flags, see the Remarks section. ValueMeaning MUI_COMPLEX_SCRIPT_FILTER GetThreadPreferredUILanguages should replace with the appropriate fallback all languages having complex scripts. When this flag is specified, NULL must be passed for all other parameters. MUI_CONSOLE_FILTER GetThreadPreferredUILanguages should replace with the appropriate fallback all languages that cannot display properly in a console window with the current operating system settings. When this flag is specified, NULL must be passed for all other parameters. MUI_RESET_FILTERS Reset the filtering for the language list by removing any other filter settings. When this flag is specified, NULL must be passed for all other parameters. After setting this flag, the application can call GetThreadPreferredUILanguages to retrieve the complete unfiltered list.",
 "SetThreadUILanguage": "Language identifier for the user interface language for the thread. Windows Vista and later: The application can specify a language identifier of 0 or a nonzero identifier. For more information, see the Remarks section. Windows XP: The application can only set this parameter to 0. This setting causes the function to select the language that best supports the console display. For more information, see the Remarks section.",
 "LVGroupCompare": "Type: INT The ID of the first group.",
 "CopyIcon": "Type: HICON A handle to the icon to be copied.",
 "CreateIcon": "Type: HINSTANCE A handle to the instance of the module creating the icon.",
 "CreateIconFromResource": "Type: PBYTE The buffer containing the icon or cursor resource bits. These bits are typically loaded by calls to the LookupIconIdFromDirectory, LookupIconIdFromDirectoryEx, and LoadResource functions.",
 "CreateIconFromResourceEx": "Type: PBYTE The icon or cursor resource bits. These bits are typically loaded by calls to the LookupIconIdFromDirectoryEx and LoadResource functions.",
 "CreateIconIndirect": "Type: PICONINFO A pointer to an ICONINFO structure the function uses to create the icon or cursor.",
 "DestroyIcon": "Type: HICON A handle to the icon to be destroyed. The icon must not be in use.",
 "DrawIcon": "Type: HDC A handle to the device context into which the icon or cursor will be drawn.",
 "DrawIconEx": "Type: HDC A handle to the device context into which the icon or cursor will be drawn.",
 "DuplicateIcon": "Type: HINSTANCE This parameter is not used; it can be NULL.",
 "ExtractAssociatedIcon": "Type: HINSTANCE A handle to the instance of the application calling the function.",
 "ExtractIcon": "Type: HINSTANCE A handle to the instance of the application calling the function.",
 "ExtractIconEx": "Type: LPCTSTR The name of an executable file, DLL, or icon file from which icons will be extracted.",
 "GetIconInfo": "Type: HICON A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the following values. ValueMeaning IDC_APPSTARTING MAKEINTRESOURCE(32650) Standard arrow and small hourglass cursor. IDC_ARROW MAKEINTRESOURCE(32512) Standard arrow cursor. IDC_CROSS MAKEINTRESOURCE(32515) Crosshair cursor. IDC_HAND MAKEINTRESOURCE(32649) \t\t\t\t\t\t Hand cursor. IDC_HELP MAKEINTRESOURCE(32651) Arrow and question mark cursor. IDC_IBEAM MAKEINTRESOURCE(32513) I-beam cursor. IDC_NO MAKEINTRESOURCE(32648) Slashed circle cursor. IDC_SIZEALL MAKEINTRESOURCE(32646) Four-pointed arrow cursor pointing north, south, east, and west. IDC_SIZENESW MAKEINTRESOURCE(32643) Double-pointed arrow cursor pointing northeast and southwest. IDC_SIZENS MAKEINTRESOURCE(32645) Double-pointed arrow cursor pointing north and south. IDC_SIZENWSE MAKEINTRESOURCE(32642) Double-pointed arrow cursor pointing northwest and southeast. IDC_SIZEWE MAKEINTRESOURCE(32644) Double-pointed arrow cursor pointing west and east. IDC_UPARROW MAKEINTRESOURCE(32516) Vertical arrow cursor. IDC_WAIT MAKEINTRESOURCE(32514) Hourglass cursor. IDI_APPLICATION MAKEINTRESOURCE(32512) Application icon. IDI_ASTERISK MAKEINTRESOURCE(32516) Asterisk icon. IDI_EXCLAMATION MAKEINTRESOURCE(32515) Exclamation point icon. IDI_HAND MAKEINTRESOURCE(32513) Stop sign icon. IDI_QUESTION MAKEINTRESOURCE(32514) Question-mark icon. IDI_WINLOGO MAKEINTRESOURCE(32517) Application icon. Windows 2000: Windows logo icon.",
 "GetIconInfoEx": "Type: HICON A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the following values. ValueMeaning IDC_APPSTARTING MAKEINTRESOURCE(32650) Standard arrow and small hourglass cursor. IDC_ARROW MAKEINTRESOURCE(32512) Standard arrow cursor. IDC_CROSS MAKEINTRESOURCE(32515) Crosshair cursor. IDC_HAND MAKEINTRESOURCE(32649) Hand cursor. IDC_HELP MAKEINTRESOURCE(32651) Arrow and question mark cursor. IDC_IBEAM MAKEINTRESOURCE(32513) I-beam cursor. IDC_NO MAKEINTRESOURCE(32648) Slashed circle cursor. IDC_SIZEALL MAKEINTRESOURCE(32646) Four-pointed arrow cursor pointing north, south, east, and west. IDC_SIZENESW MAKEINTRESOURCE(32643) Double-pointed arrow cursor pointing northeast and southwest. IDC_SIZENS MAKEINTRESOURCE(32645) Double-pointed arrow cursor pointing north and south. IDC_SIZENWSE MAKEINTRESOURCE(32642) Double-pointed arrow cursor pointing northwest and southeast. IDC_SIZEWE MAKEINTRESOURCE(32644) Double-pointed arrow cursor pointing west and east. IDC_UPARROW MAKEINTRESOURCE(32516) Vertical arrow cursor. IDC_WAIT MAKEINTRESOURCE(32514) Hourglass cursor. IDI_APPLICATION MAKEINTRESOURCE(32512) Application icon. IDI_ASTERISK MAKEINTRESOURCE(32516) Asterisk icon. IDI_EXCLAMATION MAKEINTRESOURCE(32515) Exclamation point icon. IDI_HAND MAKEINTRESOURCE(32513) Stop sign icon. IDI_QUESTION MAKEINTRESOURCE(32514) Question-mark icon. IDI_WINLOGO MAKEINTRESOURCE(32517) Application icon. Windows 2000: Windows logo icon.",
 "LoadIcon": "Type: HINSTANCE A handle to an instance of the module whose executable file contains the icon to be loaded. This parameter must be NULL when a standard icon is being loaded.",
 "LookupIconIdFromDirectory": "Type: PBYTE The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if presbits is not pointing to valid resource data.",
 "LookupIconIdFromDirectoryEx": "Type: PBYTE The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if presbits is not pointing to valid resource data.",
 "PrivateExtractIcons": "Type: LPCTSTR The path and name of the file \t\t\t\tfrom which the icon(s) are to be extracted.",
 "FwpmFreeMemory0": "Type: void** Address of the pointer to be freed.",
 "AppendMenu": "Type: HMENU A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.",
 "CheckMenuItem": "Type: HMENU A handle to the menu of interest.",
 "CheckMenuRadioItem": "Type: HMENU A handle to the menu that contains the group of menu items.",
 "CreateMenu": null,
 "CreatePopupMenu": null,
 "DeleteMenu": "Type: HMENU A handle to the menu to be changed.",
 "DestroyMenu": "Type: HMENU A handle to the menu to be destroyed.",
 "DrawMenuBar": "Type: HWND A handle to the window whose menu bar is to be redrawn.",
 "EnableMenuItem": "Type: HMENU A handle to the menu.",
 "EndMenu": null,
 "GetMenu": "Type: HWND A handle to the window whose menu handle is to be retrieved.",
 "GetMenuBarInfo": "Type: HWND A handle to the window (menu bar) whose information is to be retrieved.",
 "GetMenuCheckMarkDimensions": null,
 "GetMenuDefaultItem": "Type: HMENU A handle to the menu for which to retrieve the default menu item.",
 "GetMenuInfo": "Type: HMENU A handle on a menu.",
 "GetMenuItemCount": "Type: HMENU A handle to the menu to be examined.",
 "GetMenuItemID": "Type: HMENU A handle to the menu that contains the item whose identifier is to be retrieved.",
 "GetMenuItemInfo": "Type: HMENU A handle to the menu that contains the menu item.",
 "GetMenuItemRect": "Type: HWND A handle to the window containing the menu. \t\t\t\t\t\t \t\t\t\t\t\tIf this value is NULL and the hMenu \t\t\t\t\t\tparameter represents a popup menu, the function will find the menu window.",
 "GetMenuState": "Type: HMENU A handle to the menu that contains the menu item whose flags are to be retrieved.",
 "GetMenuString": "Type: HMENU A handle to the menu.",
 "GetSubMenu": "Type: HMENU A handle to the menu.",
 "GetSystemMenu": "Type: HWND A handle to the window that will own a copy of the window menu.",
 "HiliteMenuItem": "Type: HWND A handle to the window that contains the menu.",
 "InsertMenu": "Type: HMENU A handle to the menu to be changed.",
 "InsertMenuItem": "Type: HMENU A handle to the menu in which the new menu item is inserted.",
 "IsMenu": "Type: HMENU A handle to be tested.",
 "LoadMenu": "Type: HINSTANCE A handle to the module containing the menu resource to be loaded.",
 "LoadMenuIndirect": "Type: const MENUTEMPLATE* A pointer to a menu template or an extended menu template. A menu template consists of a MENUITEMTEMPLATEHEADER structure followed by one or more contiguous MENUITEMTEMPLATE structures. An extended menu template consists of a MENUEX_TEMPLATE_HEADER structure followed by one or more contiguous MENUEX_TEMPLATE_ITEM structures.",
 "MenuItemFromPoint": "Type: HWND A handle to the window containing the menu. If this value is NULL and the hMenu parameter represents a popup menu, the function will find the menu window.",
 "ModifyMenu": "Type: HMENU A handle to the menu to be changed.",
 "RemoveMenu": "Type: HMENU A handle to the menu to be changed.",
 "SetMenu": "Type: HWND A handle to the window to which the menu is to be assigned.",
 "SetMenuDefaultItem": "Type: HMENU A handle to the menu to set the default item for.",
 "SetMenuInfo": "Type: HMENU A handle to a menu.",
 "SetMenuItemBitmaps": "Type: HMENU A handle to the menu containing the item to receive new check-mark bitmaps.",
 "SetMenuItemInfo": "Type: HMENU A handle to the menu that contains the menu item.",
 "TrackPopupMenu": "Type: HMENU A handle to the shortcut menu to be displayed. The handle can be obtained by calling CreatePopupMenu to create a new shortcut menu, or by calling GetSubMenu to retrieve a handle to a submenu associated with an existing menu item.",
 "TrackPopupMenuEx": "Type: HMENU A handle to the shortcut menu to be displayed. This handle can be obtained by calling the CreatePopupMenu function to create a new shortcut menu or by calling the GetSubMenu function to retrieve a handle to a submenu associated with an existing menu item.",
 "WcmFreeMemory": "Pointer to the memory to be freed.",
 "WcmGetProfileList": "Type: PVOID Reserved.",
 "WcmQueryProperty": "Type: const GUID* The interface to query. For global properties, this parameter is NULL.",
 "WcmSetProfileList": "Type: WCM_PROFILE_INFO_LIST* The list of profiles to be reordered, provided in the preferred order (descending from the most preferred to the least preferred).",
 "WcmSetProperty": "Type: const GUID* The interface to set. For global properties, this parameter is NULL.",
 "CallNtPowerInformation": "The information level requested. This value indicates the specific power information to be set or retrieved. This parameter must be one of the following POWER_INFORMATION_LEVEL enumeration type values. ValueMeaning AdministratorPowerPolicy 9 This information level is not supported. LastSleepTime 15 The lpInBuffer parameter must be NULL; otherwise, the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives a ULONGLONG that specifies the interrupt-time count, in 100-nanosecond units, at the last system sleep time. LastWakeTime 14 The lpInBuffer parameter must be NULL; otherwise, the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives a ULONGLONG that specifies the interrupt-time count, in 100-nanosecond units, at the last system wake time. ProcessorInformation 11 The lpInBuffer parameter must be NULL; otherwise the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives one PROCESSOR_POWER_INFORMATION structure for each processor that is installed on the system. Use the GetSystemInfo function to retrieve the number of processors. ProcessorPowerPolicyAc 18 This information level is not supported. ProcessorPowerPolicyCurrent 22 This information level is not supported. ProcessorPowerPolicyDc 19 This information level is not supported. SystemBatteryState 5 The lpInBuffer parameter must be NULL; otherwise, the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives a SYSTEM_BATTERY_STATE structure containing information about the current system battery. SystemExecutionState 16 The lpInBuffer parameter must be NULL; otherwise the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives a ULONG value containing the system execution state buffer. This value may contain any combination of the following values: ES_SYSTEM_REQUIRED, ES_DISPLAY_REQUIRED, or ES_USER_PRESENT. For more information, see the SetThreadExecutionState function. SystemPowerCapabilities 4 The lpInBuffer parameter must be NULL, otherwise, the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives a SYSTEM_POWER_CAPABILITIES structure containing the current system power capabilities. This information represents the currently supported power capabilities. It may change as drivers are installed in the system. For example, installation of legacy device drivers that do not support power management disables all system sleep states. SystemPowerInformation 12 The lpInBuffer parameter must be NULL; otherwise, the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives a SYSTEM_POWER_INFORMATION structure. Applications can use this level to retrieve information about the idleness of the system. SystemPowerPolicyAc 0 If lpInBuffer is not NULL, the function applies the SYSTEM_POWER_POLICY values passed in lpInBuffer to the current system power policy used while the system is running on AC (utility) power. The lpOutputBuffer buffer receives a SYSTEM_POWER_POLICY structure containing the current system power policy used while the system is running on AC (utility) power. SystemPowerPolicyCurrent 8 The lpInBuffer parameter must be NULL; otherwise, the function returns ERROR_INVALID_PARAMETER. The lpOutputBuffer buffer receives a SYSTEM_POWER_POLICY structure containing the current system power policy used while the system is running on AC (utility) power. SystemPowerPolicyDc 1 If lpInBuffer is not NULL, the function applies the SYSTEM_POWER_POLICY values passed in lpInBuffer to the current system power policy used while the system is running on battery power. The lpOutputBuffer buffer receives a SYSTEM_POWER_POLICY structure containing the current system power policy used while the system is running on battery power. SystemReserveHiberFile 10 If lpInBuffer is not NULL and the current user has sufficient privileges, the function commits or decommits the storage required to hold the hibernation image on the boot volume. The lpInBuffer parameter must point to a BOOLEAN value indicating the desired request. If the value is TRUE, the hibernation file is reserved; if the value is FALSE, the hibernation file is removed. VerifyProcessorPowerPolicyAc 20 This information level is not supported. VerifyProcessorPowerPolicyDc 21 This information level is not supported. VerifySystemPolicyAc 2 This information level is not supported. \t\t\t\t\t\t\t VerifySystemPolicyDc 3 This information level is not supported.",
 "DevicePowerClose": null,
 "DevicePowerEnumDevices": "The index of the requested device. For initial calls, this value should be zero.",
 "DevicePowerOpen": "Reserved; must be 0.",
 "DevicePowerSetDeviceState": "The name or hardware identifier string of the device to be modified.",
 "GetCurrentPowerPolicies": "A pointer to a GLOBAL_POWER_POLICY structure that receives the current global power policy settings.",
 "GetDevicePowerState": "A handle to an object on the device, such as a file or socket, or a handle to the device itself.",
 "GetPwrCapabilities": "A pointer to a SYSTEM_POWER_CAPABILITIES structure that receives the information.",
 "GetSystemPowerStatus": "A pointer to a SYSTEM_POWER_STATUS structure that receives status information.",
 "IsSystemResumeAutomatic": null,
 "PowerCanRestoreIndividualDefaultPowerScheme": "The identifier of the power scheme.",
 "PowerClearRequest": "A handle to a power request object.",
 "PowerCreatePossibleSetting": "This parameter is reserved for future use and must be set to NULL.",
 "PowerCreateRequest": "Points to a REASON_CONTEXT structure that contains information about the power request.",
 "PowerCreateSetting": "This parameter is reserved for future use and must be set to NULL.",
 "PowerDeleteScheme": "This parameter is reserved for future use and must be set to NULL.",
 "PowerDeterminePlatformRole": null,
 "PowerDuplicateScheme": "This parameter is reserved for future use and must be set to NULL.",
 "PowerEnumerate": "This parameter is reserved for future use and must be set to NULL.",
 "PowerGetActiveScheme": "This parameter is reserved for future use and must be set to NULL.",
 "PowerImportPowerScheme": "This parameter is reserved for future use and must be set to NULL.",
 "PowerIsSettingRangeDefined": "The identifier of the subkey to search.",
 "PowerReadACDefaultIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadACValue": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadACValueIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadDCDefaultIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadDCValue": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadDCValueIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadDescription": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadFriendlyName": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadIconResourceSpecifier": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadPossibleDescription": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadPossibleFriendlyName": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadPossibleValue": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadSettingAttributes": "The subgroup of power settings. This parameter can be one of the following values defined in WinNT.h. Use NO_SUBGROUP_GUID to refer to the default power scheme. These values are the subgroup values included with Windows. ValueMeaning NO_SUBGROUP_GUID fea3413e-7e05-4911-9a71-700331f1c294 Settings in this subgroup are part of the default power scheme. GUID_DISK_SUBGROUP 0012ee47-9041-4b5d-9b77-535fba8b1442 Settings in this subgroup control power management configuration of the system's hard disk drives. GUID_SYSTEM_BUTTON_SUBGROUP 4f971e89-eebd-4455-a8de-9e59040e7347 Settings in this subgroup control configuration of the system power buttons. GUID_PROCESSOR_SETTINGS_SUBGROUP 54533251-82be-4824-96c1-47b60b740d00 Settings in this subgroup control configuration of processor power management features. GUID_VIDEO_SUBGROUP 7516b95f-f776-4464-8c53-06167f40cc99 Settings in this subgroup control configuration of the video power management features. GUID_BATTERY_SUBGROUP e73a048d-bf27-4f12-9731-8b2076e8891f Settings in this subgroup control battery alarm trip points and actions. GUID_SLEEP_SUBGROUP 238C9FA8-0AAD-41ED-83F4-97BE242C8F20 Settings in this subgroup control system sleep settings. GUID_PCIEXPRESS_SETTINGS_SUBGROUP 501a4d13-42af-4429-9fd1-a8218c268e20 Settings in this subgroup control PCI Express settings.",
 "PowerReadValueIncrement": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadValueMax": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadValueMin": "This parameter is reserved for future use and must be set to NULL.",
 "PowerReadValueUnitsSpecifier": "This parameter is reserved for future use and must be set to NULL.",
 "PowerRegisterSuspendResumeNotification": "This parameter must be DEVICE_NOTIFY_CALLBACK.",
 "PowerRemovePowerSetting": "The subgroup of power settings. This parameter can be one of the following values defined in WinNT.h. Use NO_SUBGROUP_GUID to refer to the default power scheme. ValueMeaning NO_SUBGROUP_GUID fea3413e-7e05-4911-9a71-700331f1c294 Settings in this subgroup are part of the default power scheme. GUID_DISK_SUBGROUP 0012ee47-9041-4b5d-9b77-535fba8b1442 Settings in this subgroup control power management configuration of the system's hard disk drives. GUID_SYSTEM_BUTTON_SUBGROUP 4f971e89-eebd-4455-a8de-9e59040e7347 Settings in this subgroup control configuration of the system power buttons. GUID_PROCESSOR_SETTINGS_SUBGROUP 54533251-82be-4824-96c1-47b60b740d00 Settings in this subgroup control configuration of processor power management features. GUID_VIDEO_SUBGROUP 7516b95f-f776-4464-8c53-06167f40cc99 Settings in this subgroup control configuration of the video power management features. GUID_BATTERY_SUBGROUP e73a048d-bf27-4f12-9731-8b2076e8891f Settings in this subgroup control battery alarm trip points and actions. GUID_SLEEP_SUBGROUP 238C9FA8-0AAD-41ED-83F4-97BE242C8F20 Settings in this subgroup control system sleep settings. GUID_PCIEXPRESS_SETTINGS_SUBGROUP 501a4d13-42af-4429-9fd1-a8218c268e20 Settings in this subgroup control PCI Express settings.",
 "PowerReplaceDefaultPowerSchemes": null,
 "PowerRestoreDefaultPowerSchemes": null,
 "PowerRestoreIndividualDefaultPowerScheme": "The identifier of the power scheme.",
 "PowerSetActiveScheme": "This parameter is reserved for future use and must be set to NULL.",
 "PowerSetRequest": "A handle to a power request object.",
 "PowerSettingAccessCheck": "The type of access to check for group policy overrides. ValueMeaning ACCESS_AC_POWER_SETTING_INDEX 0 (0x0) Check for overrides on AC power settings. ACCESS_DC_POWER_SETTING_INDEX 1 (0x1) Check for overrides on DC power settings. ACCESS_SCHEME 16 (0x10) Check for restrictions on specific power schemes. ACCESS_ACTIVE_SCHEME 19 (0x13) Check for restrictions on active power schemes. ACCESS_CREATE_SCHEME 20 (0x14) Check for restrictions on creating or restoring power schemes.",
 "PowerSettingAccessCheckEx": "The type of access to check for group policy overrides. ValueMeaning ACCESS_AC_POWER_SETTING_INDEX 0 (0x0) Check for overrides on AC power settings. ACCESS_DC_POWER_SETTING_INDEX 1 (0x1) Check for overrides on DC power settings. ACCESS_SCHEME 16 (0x10) Check for restrictions on specific power schemes. ACCESS_ACTIVE_SCHEME 19 (0x13) Check for restrictions on active power schemes. ACCESS_CREATE_SCHEME 20 (0x14) Check for restrictions on creating or restoring power schemes.",
 "PowerSettingRegisterNotification": "A GUID that represents the power setting.",
 "PowerSettingUnregisterNotification": "A handle to a registration obtained by calling the PowerSettingRegisterNotification function.",
 "PowerUnregisterSuspendResumeNotification": "A handle to a registration obtained by calling the PowerRegisterSuspendResumeNotification function.",
 "PowerWriteACDefaultIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteACValueIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteDCDefaultIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteDCValueIndex": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteDescription": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteFriendlyName": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteIconResourceSpecifier": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWritePossibleDescription": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWritePossibleFriendlyName": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWritePossibleValue": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteSettingAttributes": "The subgroup of power settings. This parameter can be one of the following values defined in WinNT.h. Use NO_SUBGROUP_GUID to refer to the default power scheme. ValueMeaning NO_SUBGROUP_GUID fea3413e-7e05-4911-9a71-700331f1c294 Settings in this subgroup are part of the default power scheme. GUID_DISK_SUBGROUP 0012ee47-9041-4b5d-9b77-535fba8b1442 Settings in this subgroup control power management configuration of the system's hard disk drives. GUID_SYSTEM_BUTTON_SUBGROUP 4f971e89-eebd-4455-a8de-9e59040e7347 Settings in this subgroup control configuration of the system power buttons. GUID_PROCESSOR_SETTINGS_SUBGROUP 54533251-82be-4824-96c1-47b60b740d00 Settings in this subgroup control configuration of processor power management features. GUID_VIDEO_SUBGROUP 7516b95f-f776-4464-8c53-06167f40cc99 Settings in this subgroup control configuration of the video power management features. GUID_BATTERY_SUBGROUP e73a048d-bf27-4f12-9731-8b2076e8891f Settings in this subgroup control battery alarm trip points and actions. GUID_SLEEP_SUBGROUP 238C9FA8-0AAD-41ED-83F4-97BE242C8F20 Settings in this subgroup control system sleep settings. GUID_PCIEXPRESS_SETTINGS_SUBGROUP 501a4d13-42af-4429-9fd1-a8218c268e20 Settings in this subgroup control PCI Express settings.",
 "PowerWriteValueIncrement": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteValueMax": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteValueMin": "This parameter is reserved for future use and must be set to NULL.",
 "PowerWriteValueUnitsSpecifier": "This parameter is reserved for future use and must be set to NULL.",
 "RegisterPowerSettingNotification": "Handle indicating where the power setting notifications are to be sent. For interactive applications, the Flags parameter should be zero, and the hRecipient parameter should be a window handle. For services, the Flags parameter should be one, and the hRecipient parameter should be a SERVICE_STATUS_HANDLE as returned from RegisterServiceCtrlHandlerEx.",
 "RegisterSuspendResumeNotification": "This parameter contains parameters for subscribing to a power notification or a window handle representing the subscribing process. If Flags is DEVICE_NOTIFY_CALLBACK, hRecipient is interpreted as a pointer to a DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS structure. In this case, the callback function is DeviceNotifyCallbackRoutine. When the Callback function executes, the Type parameter is set indicating the type of event that occurred. Possible values include PBT_APMSUSPEND, PBT_APMRESUMESUSPEND, and PBT_APMRESUMEAUTOMATIC - see Power Management Events for more info. The Setting parameter is not used with suspend/resume notifications. If Flags is DEVICE_NOTIFY_WINDOW_HANDLE, hRecipient is a handle to the window to deliver events to.",
 "SetSuspendState": "If this parameter is TRUE, the system hibernates. If the parameter is FALSE, the system is suspended.",
 "SetThreadExecutionState": "The thread's execution requirements. This parameter can be one or more of the following values. ValueMeaning ES_AWAYMODE_REQUIRED 0x00000040 Enables away mode. This value must be specified with ES_CONTINUOUS. Away mode should be used only by media-recording and media-distribution applications that must perform critical background processing on desktop computers while the computer appears to be sleeping. See Remarks. ES_CONTINUOUS 0x80000000 Informs the system that the state being set should remain in effect until the next call that uses ES_CONTINUOUS and one of the other state flags is cleared. ES_DISPLAY_REQUIRED 0x00000002 Forces the display to be on by resetting the display idle timer. ES_SYSTEM_REQUIRED 0x00000001 Forces the system to be in the working state by resetting the system idle timer. ES_USER_PRESENT 0x00000004 This value is not supported. If ES_USER_PRESENT is combined with other esFlags values, the call will fail and none of the specified states will be set.",
 "UnregisterPowerSettingNotification": "The handle returned from the RegisterPowerSettingNotification function.",
 "UnregisterSuspendResumeNotification": "A handle to a registration obtained by calling the RegisterSuspendResumeNotification function.",
 "CanUserWritePwrScheme": null,
 "DeletePwrScheme": "The index of the power scheme to be deleted.",
 "EnumPwrSchemes": "A pointer to a callback function to be called for each power scheme enumerated. For more information, see Remarks.",
 "GetActivePwrScheme": "A pointer to a variable that receives the index of the active power scheme.",
 "GetPwrDiskSpindownRange": "The maximum disk spindown time, in seconds.",
 "IsPwrHibernateAllowed": null,
 "IsPwrShutdownAllowed": null,
 "IsPwrSuspendAllowed": null,
 "ReadGlobalPwrPolicy": "A pointer to a GLOBAL_POWER_POLICY structure that receives the information.",
 "ReadProcessorPwrScheme": "The index of the power scheme to be read.",
 "ReadPwrScheme": "The index of the power scheme to be read.",
 "RequestWakeupLatency": "The latency requirement for the time is takes to wake the computer. This parameter can be one of the following values. ValueMeaning LT_LOWEST_LATENCY 1 PowerSystemSleeping1 state (equivalent to ACPI state S0 and APM state Working). LT_DONT_CARE 0 Any latency (default).",
 "SetActivePwrScheme": "The index of the power scheme to be activated.",
 "SetSystemPowerState": "If this parameter is TRUE, the system is suspended. If the parameter is FALSE, the system hibernates.",
 "WriteGlobalPwrPolicy": "A pointer to a GLOBAL_POWER_POLICY structure that contains the power policy settings to be written.",
 "WriteProcessorPwrScheme": "The index of the power scheme to be written.",
 "WritePwrScheme": "The index of the power scheme to be written. If a power scheme with the same index already exists, it is replaced. Otherwise, a new power scheme is created.",
 "NDdeGetErrorString": "The error code to be converted into an error string.",
 "NDdeGetShareSecurity": "The name of the server on which the DSDM resides.",
 "NDdeGetTrustedShare": "The name of the server on which the DSDM resides.",
 "NDdeIsValidAppTopicList": "A pointer to the application and topic string to validate. This parameter cannot be NULL.",
 "NDdeIsValidShareName": "The share name to be validated. This parameter cannot be NULL.",
 "NDdeSetShareSecurity": "The name of the server whose DSDM is to be modified.",
 "NDdeSetTrustedShare": "The name of the server whose DSDM is to be modified.",
 "NDdeShareAdd": "The name of the server whose DSDM is to be modified.",
 "NDdeShareDel": "The name of the server whose DSDM is to be modified.",
 "NDdeShareEnum": "The name of the server on which the DSDM resides.",
 "NDdeShareGetInfo": "The name of the server on which the DSDM resides.",
 "NDdeShareSetInfo": "The name of the server whose DSDM is to be modified.",
 "NDdeTrustedShareEnum": "The name of the server on which the DSDM resides.",
 "BeginPaint": "Handle to the window to be repainted.",
 "DrawAnimatedRects": "A handle to the window whose caption should be animated on the screen. The animation will be clipped to the parent of this window.",
 "DrawCaption": "A handle to a window that supplies text and an icon for the window caption.",
 "DrawEdge": "A handle to the device context.",
 "DrawFocusRect": "A handle to the device context.",
 "DrawFrameControl": "A handle to the device context of the window in which to draw the control.",
 "DrawState": "A handle to the device context to draw in.",
 "DrawStateProc": "A handle to the device context to draw in. The device context is a memory device context with a bitmap selected, the dimensions of which are at least as great as those specified by the cx and cy parameters.",
 "EndPaint": "Handle to the window that has been repainted.",
 "ExcludeUpdateRgn": "Handle to the device context associated with the clipping region.",
 "GdiFlush": null,
 "GdiGetBatchLimit": null,
 "GdiSetBatchLimit": "Specifies the batch limit to be set. A value of 0 sets the default limit. A value of 1 disables batching.",
 "GetBkColor": "Handle to the device context whose background color is to be returned.",
 "GetBkMode": "Handle to the device context whose background mode is to be returned.",
 "GetBoundsRect": "A handle to the device context whose bounding rectangle the function will return.",
 "GetROP2": "Handle to the device context.",
 "GetUpdateRect": "Handle to the window whose update region is to be retrieved.",
 "GetUpdateRgn": "Handle to the window with an update region that is to be retrieved.",
 "GetWindowDC": "A handle to the window with a device context that is to be retrieved. If this value is NULL, GetWindowDC retrieves the device context for the entire screen. If this parameter is NULL, GetWindowDC retrieves the device context for the primary display monitor. To get the device context for other display monitors, use the EnumDisplayMonitors and CreateDC functions.",
 "GetWindowRgn": "Handle to the window whose window region is to be obtained.",
 "GetWindowRgnBox": "Handle to the window.",
 "GrayString": "A handle to the device context.",
 "InvalidateRect": "A handle to the window whose update region has changed. If this parameter is NULL, the system invalidates and redraws all windows, not just the windows for this application, and sends the WM_ERASEBKGND and WM_NCPAINT messages before the function returns. Setting this parameter to NULL is not recommended.",
 "InvalidateRgn": "A handle to the window with an update region that is to be modified.",
 "LockWindowUpdate": "The window in which drawing will be disabled. If this parameter is NULL, drawing in the locked window is enabled.",
 "OutputProc": "A handle to a device context with a bitmap of at least the width and height specified by the nWidth and nHeight parameters passed to GrayString.",
 "PaintDesktop": "Handle to the device context.",
 "RedrawWindow": "A handle to the window to be redrawn. If this parameter is NULL, the desktop window is updated.",
 "SetBkColor": "A handle to the device context.",
 "SetBkMode": "A handle to the device context.",
 "SetBoundsRect": "A handle to the device context for which to accumulate bounding rectangles.",
 "SetROP2": "A handle to the device context.",
 "SetWindowRgn": "A handle to the window whose window region is to be set.",
 "UpdateWindow": "Handle to the window to be updated.",
 "ValidateRect": "Handle to the window whose update region is to be modified. If this parameter is NULL, the system invalidates and redraws all windows and sends the WM_ERASEBKGND and WM_NCPAINT messages to the window procedure before the function returns.",
 "ValidateRgn": "Handle to the window whose update region is to be modified.",
 "GetLastErrors": "A buffer that, on output, receives the trace output of the most recent validation session. The buffer is allocated by this function. When you have finished using the buffer, free it by calling the LocalFree function.",
 "IsAlreadyGenuine": null,
 "LegitCheck": null,
 "SetPartnerID": "The partner ID to be set.",
 "CloseCompressor": "Handle to the compressor to be closed. This is the handle to the compressor that was returned by CreateCompressor.",
 "CloseDecompressor": "Handle to the decompressor to be closed. This is the handle to the compressor that was returned by CreateDecompressor.",
 "Compress": "Handle to a compressor returned by CreateCompressor.",
 "CreateCompressor": "The type of compression algorithm and mode to be used by this compressor. This parameter can have one of the following values optionally combined with the COMPRESS_RAW flag. Use a \"bitwise OR\" operator to include COMPRESS_RAW and to create a block mode compressor. If COMPRESS_RAW is not included, the Compression API creates a buffer mode compressor. For more information about selecting a compression algorithm and mode, see Using the Compression API. ValueMeaning COMPRESS_ALGORITHM_MSZIP 2 MSZIP compression algorithm COMPRESS_ALGORITHM_XPRESS 3 XPRESS compression algorithm COMPRESS_ALGORITHM_XPRESS_HUFF 4 XPRESS compression algorithm with Huffman encoding COMPRESS_ALGORITHM_LZMS 5 LZMS compression algorithm",
 "CreateDecompressor": "The type of compression algorithm and mode to be used by this decompressor. This parameter can have one of the following values optionally combined with the COMPRESS_RAW flag. Use a \"bitwise OR\" operator to include COMPRESS_RAW and to create a block mode decompressor. If COMPRESS_RAW is not included, the Compression API creates a buffer mode decompressor. For more information about selecting a compression algorithm and mode, see Using the Compression API. ValueMeaning COMPRESS_ALGORITHM_MSZIP 2 MSZIP compression algorithm COMPRESS_ALGORITHM_XPRESS 3 XPRESS compression algorithm COMPRESS_ALGORITHM_XPRESS_HUFF 4 XPRESS compression algorithm with Huffman encoding COMPRESS_ALGORITHM_LZMS 5 LZMS compression algorithm",
 "Decompress": "Handle to a decompressor returned by CreateDecompressor.",
 "QueryCompressorInformation": "Handle to the compressor being queried for information.",
 "QueryDecompressorInformation": "Handle to the decompressor being queried for information.",
 "ResetDecompressor": "Handle to the decompressor returned by CreateDecompressor.",
 "SetCompressorInformation": "Handle to the compressor.",
 "SetDecompressorInformation": "Handle to the decompressor.",
 "AddJob": "A handle that specifies the printer for the print job. This must be a local printer that is configured as a spooled printer. If hPrinter is a handle to a remote printer connection, or if the printer is configured for direct printing, the AddJob function fails. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "ClosePrinter": "A handle to the printer object to be closed. This handle is returned by the OpenPrinter or AddPrinter function.",
 "DocumentEvent": "A handle to a printer object. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "DocumentProperties": "A handle to the parent window of the printer-configuration property sheet.",
 "EndDocPrinter": "Handle to a printer for which the print job should be ended. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "EndPagePrinter": "Handle to the printer for which the page will be concluded. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "EnumJobs": "A handle to the printer object whose print jobs the function enumerates. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "GetJob": "A handle to the printer for which the print-job data is retrieved. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "OpenPrinter": "A pointer to a null-terminated string that specifies the name of the printer or print server, the printer object, the XcvMonitor, or the XcvPort. For a printer object use: PrinterName, Job xxxx. For an XcvMonitor, use: ServerName, XcvMonitor MonitorName. For an XcvPort, use: ServerName, XcvPort PortName. If NULL, it indicates the local printer server.",
 "OpenPrinter2": "A pointer to a constant null-terminated string that specifies the name of the printer or print server, the printer object, the XcvMonitor, or the XcvPort. For a printer object, use: PrinterName,Job xxxx. For an XcvMonitor, use: ServerName,XcvMonitor MonitorName. For an XcvPort, use: ServerName,XcvPort PortName. Windows Vista: If NULL, it indicates the local print server.",
 "ReportJobProcessingProgress": "A printer handle for which the function is to retrieve information. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "ScheduleJob": "A handle to the printer for the print job. This must be a local printer that is configured as a spooled printer. If hPrinter is a handle to a remote printer connection, or if the printer is configured for direct printing, the ScheduleJob function fails. Use the OpenPrinter or AddPrinter function to retrieve a printer handle. hPrinter must be the same printer handle specified in the call to AddJob that obtained the dwJobID print job identifier.",
 "SetJob": "A handle to the printer object of interest. Use the OpenPrinter, OpenPrinter2, or AddPrinter function to retrieve a printer handle.",
 "StartDocPrinter": "A handle to the printer. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "StartPagePrinter": "Handle to a printer. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "AdvancedDocumentProperties": "A handle to the parent window of the printer-configuration dialog box.",
 "ConfigurePort": "Pointer to a null-terminated string that specifies the name of the server on which the specified port exists. If this parameter is NULL, the port is local.",
 "ConnectToPrinterDlg": "Specifies the parent window of the dialog box.",
 "PrinterProperties": "A handle to the parent window of the property sheet.",
 "AbortPrinter": "Handle to the printer from which the spool file is deleted. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "AddPrinter": "A pointer to a null-terminated string that specifies the name of the server on which the printer should be installed. If this string is NULL, the printer is installed locally.",
 "AddPrinterConnection": "A pointer to a null-terminated string that specifies the name of a printer to which the current user wishes to establish a connection.",
 "AddPrinterConnection2": "A handle to the parent window in which the dialog box will be displayed if the print system must download a printer driver from the print server for this connection.",
 "DeletePrinter": "Handle to a printer object that will be deleted. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "DeletePrinterConnection": "Pointer to a null-terminated string that specifies the name of the printer connection to delete.",
 "DeletePrinterData": "A handle to the printer whose configuration data is to be deleted. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "DeletePrinterDataEx": "A handle to the printer for which the function deletes a value. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "DeletePrinterKey": "A handle to the printer for which the function deletes a key. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "EnumPrinterData": "A handle to the printer whose configuration data is to be obtained. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "EnumPrinterDataEx": "A handle to the printer for which the function retrieves configuration data. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "EnumPrinterKey": "A handle to the printer for which the function enumerates subkeys. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "EnumPrinters": "The types of print objects that the function should enumerate. This value can be one or more of the following values. ValueMeaning PRINTER_ENUM_LOCAL If the PRINTER_ENUM_NAME flag is not also passed, the function ignores the Name parameter, and enumerates the locally installed printers. If PRINTER_ENUM_NAME is also passed, the function enumerates the local printers on Name. PRINTER_ENUM_NAME The function enumerates the printer identified by Name. This can be a server, a domain, or a print provider. If Name is NULL, the function enumerates available print providers. PRINTER_ENUM_SHARED The function enumerates printers that have the shared attribute. Cannot be used in isolation; use an OR operation to combine with another PRINTER_ENUM type. PRINTER_ENUM_CONNECTIONS The function enumerates the list of printers to which the user has made previous connections. PRINTER_ENUM_NETWORK The function enumerates network printers in the computer's domain. This value is valid only if Level is 1. PRINTER_ENUM_REMOTE The function enumerates network printers and print servers in the computer's domain. This value is valid only if Level is 1. PRINTER_ENUM_CATEGORY_3D The function enumerates only 3D printers. PRINTER_ENUM_CATEGORY_ALL The function enumerates all print devices, including 3D printers. If Level is 4, you can only use the PRINTER_ENUM_CONNECTIONS and PRINTER_ENUM_LOCAL constants. Note 3D print devices are not enumerated by default. You must include both PRINTER_ENUM_CATEGORY_3D and PRINTER_ENUM_LOCAL to enumerate only 3D printers. To include 3D printers, along with all other local printers, use PRINTER_ENUM_CATEGORY_ALL and PRINTER_ENUM_LOCAL.",
 "FlushPrinter": "A handle to the printer object. This should be the same handle that was used, in a prior WritePrinter call, by the printer driver.",
 "GetDefaultPrinter": "A pointer to a buffer that receives a null-terminated character string containing the default printer name. If this parameter is NULL, the function fails and the variable pointed to by pcchBuffer returns the required buffer size, in characters.",
 "GetPrinter": "A handle to the printer for which the function retrieves information. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "GetPrinterData": "A handle to the printer or print server for which the function retrieves configuration data. Use the OpenPrinter, OpenPrinter2, or AddPrinter function to retrieve a printer handle.",
 "GetPrinterDataEx": "A handle to the printer or print server for which the function retrieves configuration data. Use the OpenPrinter, OpenPrinter2, or AddPrinter function to retrieve a printer handle.",
 "SetPrinterData": "A handle to the printer or print server for which the function sets configuration data. Use the OpenPrinter, OpenPrinter2, or AddPrinter function to retrieve a printer handle.",
 "SetPrinterDataEx": "A handle to the printer or print server for which the function sets configuration data. Use the OpenPrinter, OpenPrinter2, or AddPrinter function to retrieve a printer handle.",
 "IsValidDevmode": "A pointer to the DEVMODE to validate.",
 "ReadPrinter": "A handle to the printer object for which to retrieve data. Use the OpenPrinter function to retrieve a printer object handle. Use the format: Printername, Job xxxx.",
 "ResetPrinter": "Handle to the printer. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "SetDefaultPrinter": "A pointer to a null-terminated string containing the default printer name. For a remote printer connection, the name format is \\\\server\\printername. For a local printer, the name format is printername. If this parameter is NULL or an empty string, that is, \"\", SetDefaultPrinter will select a default printer from one of the installed printers. If a default printer already exists, calling SetDefaultPrinter with a NULL or an empty string in this parameter might change the default printer.",
 "SetPort": "Pointer to a zero-terminated string that specifies the name of the printer server to which the port is connected. Set this parameter to NULL if the port is on the local machine.",
 "SetPrinter": "A handle to the printer. Use the OpenPrinter, OpenPrinter2, or AddPrinter function to retrieve a printer handle.",
 "WritePrinter": "A handle to the printer. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "FindClosePrinterChangeNotification": "A handle to the change notification object to be closed. This is a handle created by calling the FindFirstPrinterChangeNotification function.",
 "FindFirstPrinterChangeNotification": "A handle to the printer or print server that you want to monitor. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "FindNextPrinterChangeNotification": "A handle to a change notification object associated with a printer or print server. You obtain such a handle by calling the FindFirstPrinterChangeNotification function. The operating system sets this change notification object to the signaled state when it detects one of the changes specified in the object's change notification filter.",
 "FreePrinterNotifyInfo": "Pointer to a PRINTER_NOTIFY_INFO buffer returned from a call to the FindNextPrinterChangeNotification function. FreePrinterNotifyInfo deallocates this buffer.",
 "AddForm": "A handle to the printer that supports printing with the specified form. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "DeleteForm": "Indicates the open printer handle that this function is to be performed upon. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "EnumForms": "Handle to the printer for which the forms should be enumerated. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "GetForm": "A handle to the printer. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "SetForm": "A handle to the printer for which the form information is set. Use the OpenPrinter or AddPrinter function to retrieve a printer handle.",
 "CloseSpoolFileHandle": "A handle to the printer to which the job was submitted. This should be the same handle that was used to obtain hSpoolFile with GetSpoolFileHandle.",
 "CommitSpoolData": "A handle to the printer to which the job was submitted. This should be the same handle that was used to obtain hSpoolFile with GetSpoolFileHandle.",
 "GetPrintExecutionData": "A pointer to a variable that receives the address of the PRINT_EXECUTION_DATA structure.",
 "GetSpoolFileHandle": "A handle to the printer to which the job was submitted. This should be the same handle that was used to submit the job. (Use the OpenPrinter or AddPrinter function to retrieve a printer handle.)",
 "RasEapBegin": "Pointer to a pointer that, on successful return, points to a work buffer. This buffer is opaque to RAS; the contents of the buffer are used only by the authentication protocol. The RAS connection manager passes a pointer to this buffer to the authentication protocol in subsequent calls to RasEapMakeMessage.",
 "RasEapEnd": "Pointer to the work buffer to free.",
 "RasEapFreeMemory": "Pointer to the memory to free.",
 "RasEapGetIdentity": "Specifies the authentication protocol for which to invoke the identity user interface.",
 "RasEapGetInfo": "Specifies the authentication protocol for which to obtain information.",
 "RasEapInitialize": "Specifies whether the authentication protocol should initialize or de-initialize. This parameter is TRUE if the protocol initializes and FALSE if the protocol does not initialize.",
 "RasEapInvokeConfigUI": "Specifies the authentication protocol for which to invoke the configuration UI.",
 "RasEapInvokeInteractiveUI": "Specifies the authentication protocol for which to invoke the interactive UI.",
 "RasEapMakeMessage": "Pointer to the work buffer. The authentication protocol provides RAS with a pointer to this buffer via the RasEapBegin function.",
 "MulDiv": "The multiplicand.",
 "Multiply128": "The first integer.",
 "MultiplyExtract128": "The first integer.",
 "MultiplyHigh": "The first integer.",
 "PopulationCount64": "The operand.",
 "ShiftLeft128": "The low 64 bits.",
 "ShiftRight128": "The low 64 bits.",
 "UnsignedMultiply128": "The first integer.",
 "UnsignedMultiplyExtract128": "The first integer.",
 "UnsignedMulitplyHigh": "The first integer.",
 "SystemParametersInfo": "Type: UINT The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters: Accessibility parameters Desktop parameters Icon parameters Input parameters Menu parameters Power parameters Screen saver parameters Time-out parameters UI effect parameters Window parameters The following are the accessibility parameters. Accessibility parameterMeaning SPI_GETACCESSTIMEOUT 0x003C Retrieves information about the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(ACCESSTIMEOUT). SPI_GETAUDIODESCRIPTION 0x0074 Determines whether audio descriptions are enabled or disabled. The pvParam parameter is a pointer to an AUDIODESCRIPTION structure. Set the cbSize member of this structure and the uiParam parameter to sizeof(AUDIODESCRIPTION). While it is possible for users who have visual impairments to hear the audio in video content, there is a lot of action in video that does not have corresponding audio. Specific audio description of what is happening in a video helps these users understand the content better. This flag enables you to determine whether audio descriptions have been enabled and in which language. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETCLIENTAREAANIMATION 0x1042 Determines whether animations are enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if animations are enabled, or FALSE otherwise. Display features such as flashing, blinking, flickering, and moving content can cause seizures in users with photo-sensitive epilepsy. This flag enables you to determine whether such animations have been disabled in the client area. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETDISABLEOVERLAPPEDCONTENT 0x1040 Determines whether overlapped content is enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Display features such as background images, textured backgrounds, water marks on documents, alpha blending, and transparency can reduce the contrast between the foreground and background, making it harder for users with low vision to see objects on the screen. This flag enables you to determine whether such overlapped content has been disabled. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETFILTERKEYS 0x0032 Retrieves information about the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(FILTERKEYS). SPI_GETFOCUSBORDERHEIGHT 0x2010 Retrieves the height, in pixels, of the top and bottom edges of the focus rectangle drawn with DrawFocusRect. The pvParam parameter must point to a UINT value. Windows 2000: This parameter is not supported. SPI_GETFOCUSBORDERWIDTH 0x200E Retrieves the width, in pixels, of the left and right edges of the focus rectangle drawn with DrawFocusRect. The pvParam parameter must point to a UINT. Windows 2000: This parameter is not supported. SPI_GETHIGHCONTRAST 0x0042 Retrieves information about the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(HIGHCONTRAST). For a general discussion, see Remarks. SPI_GETLOGICALDPIOVERRIDE 0x009E Retrieves a value that determines whether Windows 8 is displaying apps using the default scaling plateau for the hardware or going to the next higher plateau. This value is based on the current \"Make everything on your screen bigger\" setting, found in the Ease of Access section of PC settings: 1 is on, 0 is off. Apps can provide text and image resources for each of several scaling plateaus: 100%, 140%, and 180%. Providing separate resources optimized for a particular scale avoids distortion due to resizing. Windows 8 determines the appropriate scaling plateau based on a number of factors, including screen size and pixel density. When \"Make everything on your screen bigger\" is selected (SPI_GETLOGICALDPIOVERRIDE returns a value of 1), Windows uses resources from the next higher plateau. For example, in the case of hardware that Windows determines should use a scale of SCALE_100_PERCENT, this override causes Windows to use the SCALE_140_PERCENT scale value, assuming that it does not violate other constraints. Note You should not use this value. It might be altered or unavailable in subsequent versions of Windows. Instead, use the GetScaleFactorForDevice function or the DisplayProperties class to retrieve the preferred scaling factor. Desktop applications should use desktop logical DPI rather than scale factor. Desktop logical DPI can be retrieved through the GetDeviceCaps function. SPI_GETMESSAGEDURATION 0x2016 Retrieves the time that notification pop-ups should be displayed, in seconds. The pvParam parameter must point to a ULONG that receives the message duration. Users with visual impairments or cognitive conditions such as ADHD and dyslexia might need a longer time to read the text in notification messages. This flag enables you to retrieve the message duration. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETMOUSECLICKLOCK 0x101E Retrieves the state of the Mouse ClickLock feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. For more information, see About Mouse Input. Windows 2000: This parameter is not supported. SPI_GETMOUSECLICKLOCKTIME 0x2008 Retrieves the time delay before the primary mouse button is locked. The pvParam parameter must point to DWORD that receives the time delay, in milliseconds. This is only enabled if SPI_SETMOUSECLICKLOCK is set to TRUE. For more information, see About Mouse Input. Windows 2000: This parameter is not supported. SPI_GETMOUSEKEYS 0x0036 Retrieves information about the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(MOUSEKEYS). SPI_GETMOUSESONAR 0x101C Retrieves the state of the Mouse Sonar feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE otherwise. For more information, see About Mouse Input. Windows 2000: This parameter is not supported. SPI_GETMOUSEVANISH 0x1020 Retrieves the state of the Mouse Vanish feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE otherwise. For more information, see About Mouse Input. Windows 2000: This parameter is not supported. SPI_GETSCREENREADER 0x0046 Determines whether a screen reviewer utility is running. A screen reviewer utility directs textual information to an output device, such as a speech synthesizer or Braille display. When this flag is set, an application should provide textual information in situations where it would otherwise present the information graphically. The pvParam parameter is a pointer to a BOOLvariable that receives TRUE if a screen reviewer utility is running, or FALSE otherwise. Note Narrator, the screen reader that is included with Windows, does not set the SPI_SETSCREENREADER or SPI_GETSCREENREADER flags. SPI_GETSERIALKEYS 0x003E This parameter is not supported. Windows Server 2003 and Windows XP/2000: The user should control this setting through the Control Panel. SPI_GETSHOWSOUNDS 0x0038 Determines whether the Show Sounds accessibility flag is on or off. If it is on, the user requires an application to present information visually in situations where it would otherwise present the information only in audible form. The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. Using this value is equivalent to calling GetSystemMetrics with SM_SHOWSOUNDS. That is the recommended call. SPI_GETSOUNDSENTRY 0x0040 Retrieves information about the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(SOUNDSENTRY). SPI_GETSTICKYKEYS 0x003A Retrieves information about the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(STICKYKEYS). SPI_GETTOGGLEKEYS 0x0034 Retrieves information about the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(TOGGLEKEYS). SPI_SETACCESSTIMEOUT 0x003D Sets the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(ACCESSTIMEOUT). SPI_SETAUDIODESCRIPTION 0x0075 Turns the audio descriptions feature on or off. The pvParam parameter is a pointer to an AUDIODESCRIPTION structure. While it is possible for users who are visually impaired to hear the audio in video content, there is a lot of action in video that does not have corresponding audio. Specific audio description of what is happening in a video helps these users understand the content better. This flag enables you to enable or disable audio descriptions in the languages they are provided in. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETCLIENTAREAANIMATION 0x1043 Turns client area animations on or off. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable animations and other transient effects in the client area, or FALSE to disable them. Display features such as flashing, blinking, flickering, and moving content can cause seizures in users with photo-sensitive epilepsy. This flag enables you to enable or disable all such animations. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETDISABLEOVERLAPPEDCONTENT 0x1041 Turns overlapped content (such as background images and watermarks) on or off. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to disable overlapped content, or FALSE to enable overlapped content. Display features such as background images, textured backgrounds, water marks on documents, alpha blending, and transparency can reduce the contrast between the foreground and background, making it harder for users with low vision to see objects on the screen. This flag enables you to enable or disable all such overlapped content. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETFILTERKEYS 0x0033 Sets the parameters of the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(FILTERKEYS). SPI_SETFOCUSBORDERHEIGHT 0x2011 Sets the height of the top and bottom edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter. Windows 2000: This parameter is not supported. SPI_SETFOCUSBORDERWIDTH 0x200F Sets the height of the left and right edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter. Windows 2000: This parameter is not supported. SPI_SETHIGHCONTRAST 0x0043 Sets the parameters of the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(HIGHCONTRAST). SPI_SETLOGICALDPIOVERRIDE 0x009F Do not use. SPI_SETMESSAGEDURATION 0x2017 Sets the time that notification pop-ups should be displayed, in seconds. The pvParam parameter specifies the message duration. Users with visual impairments or cognitive conditions such as ADHD and dyslexia might need a longer time to read the text in notification messages. This flag enables you to set the message duration. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETMOUSECLICKLOCK 0x101F Turns the Mouse ClickLock accessibility feature on or off. This feature temporarily locks down the primary mouse button when that button is clicked and held down for the time specified by SPI_SETMOUSECLICKLOCKTIME. The pvParam parameter specifies TRUE for on, or FALSE for off. The default is off. For more information, see Remarks and AboutMouse Input. Windows 2000: This parameter is not supported. SPI_SETMOUSECLICKLOCKTIME 0x2009 Adjusts the time delay before the primary mouse button is locked. The uiParam parameter should be set to 0. The pvParam parameter points to a DWORD that specifies the time delay in milliseconds. For example, specify 1000 for a 1 second delay. The default is 1200. For more information, see About Mouse Input. Windows 2000: This parameter is not supported. SPI_SETMOUSEKEYS 0x0037 Sets the parameters of the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(MOUSEKEYS). SPI_SETMOUSESONAR 0x101D Turns the Sonar accessibility feature on or off. This feature briefly shows several concentric circles around the mouse pointer when the user presses and releases the CTRL key. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. For more information, see About Mouse Input. Windows 2000: This parameter is not supported. SPI_SETMOUSEVANISH 0x1021 Turns the Vanish feature on or off. This feature hides the mouse pointer when the user types; the pointer reappears when the user moves the mouse. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. For more information, see About Mouse Input. Windows 2000: This parameter is not supported. SPI_SETSCREENREADER 0x0047 Determines whether a screen review utility is running. The uiParam parameter specifies TRUE for on, or FALSE for off. Note Narrator, the screen reader that is included with Windows, does not set the SPI_SETSCREENREADER or SPI_GETSCREENREADER flags. SPI_SETSERIALKEYS 0x003F This parameter is not supported. Windows Server 2003 and Windows XP/2000: The user should control this setting through the Control Panel. SPI_SETSHOWSOUNDS 0x0039 Turns the ShowSounds accessibility feature on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. SPI_SETSOUNDSENTRY 0x0041 Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(SOUNDSENTRY). SPI_SETSTICKYKEYS 0x003B Sets the parameters of the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(STICKYKEYS). SPI_SETTOGGLEKEYS 0x0035 Sets the parameters of the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(TOGGLEKEYS). The following are the desktop parameters. Desktop parameterMeaning SPI_GETCLEARTYPE 0x1048 Determines whether ClearType is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if ClearType is enabled, or FALSE otherwise. ClearType is a software technology that improves the readability of text on liquid crystal display (LCD) monitors. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETDESKWALLPAPER 0x0073 Retrieves the full path of the bitmap file for the desktop wallpaper. The pvParam parameter must point to a buffer to receive the null-terminated path string. Set the uiParam parameter to the size, in characters, of the pvParam buffer. The returned string will not exceed MAX_PATH characters. If there is no desktop wallpaper, the returned string is empty. SPI_GETDROPSHADOW 0x1024 Determines whether the drop shadow effect is enabled. The pvParam parameter must point to a BOOL variable that returns TRUE if enabled or FALSE if disabled. Windows 2000: This parameter is not supported. SPI_GETFLATMENU 0x1022 Determines whether native User menus have flat menu appearance. The pvParam parameter must point to a BOOL variable that returns TRUE if the flat menu appearance is set, or FALSE otherwise. Windows 2000: This parameter is not supported. SPI_GETFONTSMOOTHING 0x004A Determines whether the font smoothing feature is enabled. This feature uses font antialiasing to make font curves appear smoother by painting pixels at different gray levels. The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is enabled, or FALSE if it is not. SPI_GETFONTSMOOTHINGCONTRAST 0x200C Retrieves a contrast value that is used in ClearType smoothing. The pvParam parameter must point to a UINT that receives the information. Valid contrast values are from 1000 to 2200. The default value is 1400. Windows 2000: This parameter is not supported. SPI_GETFONTSMOOTHINGORIENTATION 0x2012 Retrieves the font smoothing orientation. The pvParam parameter must point to a UINT that receives the information. The possible values are FE_FONTSMOOTHINGORIENTATIONBGR (blue-green-red) and FE_FONTSMOOTHINGORIENTATIONRGB (red-green-blue). Windows XP/2000: This parameter is not supported until Windows XP with SP2. SPI_GETFONTSMOOTHINGTYPE 0x200A Retrieves the type of font smoothing. The pvParam parameter must point to a UINT that receives the information. The possible values are FE_FONTSMOOTHINGSTANDARD and FE_FONTSMOOTHINGCLEARTYPE. Windows 2000: This parameter is not supported. SPI_GETWORKAREA 0x0030 Retrieves the size of the work area on the primary display monitor. The work area is the portion of the screen not obscured by the system taskbar or by application desktop toolbars. The pvParam parameter must point to a RECT structure that receives the coordinates of the work area, expressed in physical pixel size. Any DPI virtualization mode of the caller has no effect on this output. To get the work area of a monitor other than the primary display monitor, call the GetMonitorInfo function. SPI_SETCLEARTYPE 0x1049 Turns ClearType on or off. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable ClearType, or FALSE to disable it. ClearType is a software technology that improves the readability of text on LCD monitors. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETCURSORS 0x0057 Reloads the system cursors. Set the uiParam parameter to zero and the pvParam parameter to NULL. SPI_SETDESKPATTERN 0x0015 Sets the current desktop pattern by causing Windows to read the Pattern= setting from the WIN.INI file. SPI_SETDESKWALLPAPER 0x0014 Note When the SPI_SETDESKWALLPAPER flag is used, SystemParametersInfo returns TRUE unless there is an error (like when the specified file doesn't exist). SPI_SETDROPSHADOW 0x1025 Enables or disables the drop shadow effect. Set pvParam to TRUE to enable the drop shadow effect or FALSE to disable it. You must also have CS_DROPSHADOW in the window class style. Windows 2000: This parameter is not supported. SPI_SETFLATMENU 0x1023 Enables or disables flat menu appearance for native User menus. Set pvParam to TRUE to enable flat menu appearance or FALSE to disable it. When enabled, the menu bar uses COLOR_MENUBAR for the menubar background, COLOR_MENU for the menu-popup background, COLOR_MENUHILIGHT for the fill of the current menu selection, and COLOR_HILIGHT for the outline of the current menu selection. If disabled, menus are drawn using the same metrics and colors as in Windows 2000. Windows 2000: This parameter is not supported. SPI_SETFONTSMOOTHING 0x004B Enables or disables the font smoothing feature, which uses font antialiasing to make font curves appear smoother by painting pixels at different gray levels. To enable the feature, set the uiParam parameter to TRUE. To disable the feature, set uiParam to FALSE. SPI_SETFONTSMOOTHINGCONTRAST 0x200D Sets the contrast value used in ClearType smoothing. The pvParam parameter is the contrast value. Valid contrast values are from 1000 to 2200. The default value is 1400. SPI_SETFONTSMOOTHINGTYPE must also be set to FE_FONTSMOOTHINGCLEARTYPE. Windows 2000: This parameter is not supported. SPI_SETFONTSMOOTHINGORIENTATION 0x2013 Sets the font smoothing orientation. The pvParam parameter is either FE_FONTSMOOTHINGORIENTATIONBGR (blue-green-red) or FE_FONTSMOOTHINGORIENTATIONRGB (red-green-blue). Windows XP/2000: This parameter is not supported until Windows XP with SP2. SPI_SETFONTSMOOTHINGTYPE 0x200B Sets the font smoothing type. The pvParam parameter is either FE_FONTSMOOTHINGSTANDARD, if standard anti-aliasing is used, or FE_FONTSMOOTHINGCLEARTYPE, if ClearType is used. The default is FE_FONTSMOOTHINGSTANDARD. SPI_SETFONTSMOOTHING must also be set. Windows 2000: This parameter is not supported. SPI_SETWORKAREA 0x002F Sets the size of the work area. The work area is the portion of the screen not obscured by the system taskbar or by application desktop toolbars. The pvParam parameter is a pointer to a RECT structure that specifies the new work area rectangle, expressed in virtual screen coordinates. In a system with multiple display monitors, the function sets the work area of the monitor that contains the specified rectangle. The following are the icon parameters. Icon parameterMeaning SPI_GETICONMETRICS 0x002D Retrieves the metrics associated with icons. The pvParam parameter must point to an ICONMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(ICONMETRICS). SPI_GETICONTITLELOGFONT 0x001F Retrieves the logical font information for the current icon-title font. The uiParam parameter specifies the size of a LOGFONT structure, and the pvParam parameter must point to the LOGFONT structure to fill in. SPI_GETICONTITLEWRAP 0x0019 Determines whether icon-title wrapping is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. SPI_ICONHORIZONTALSPACING 0x000D Sets or retrieves the width, in pixels, of an icon cell. The system uses this rectangle to arrange icons in large icon view. To set this value, set uiParam to the new value and set pvParam to NULL. You cannot set this value to less than SM_CXICON. To retrieve this value, pvParam must point to an integer that receives the current value. SPI_ICONVERTICALSPACING 0x0018 Sets or retrieves the height, in pixels, of an icon cell. To set this value, set uiParam to the new value and set pvParam to NULL. You cannot set this value to less than SM_CYICON. To retrieve this value, pvParam must point to an integer that receives the current value. SPI_SETICONMETRICS 0x002E Sets the metrics associated with icons. The pvParam parameter must point to an ICONMETRICS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(ICONMETRICS). SPI_SETICONS 0x0058 Reloads the system icons. Set the uiParam parameter to zero and the pvParam parameter to NULL. SPI_SETICONTITLELOGFONT 0x0022 Sets the font that is used for icon titles. The uiParam parameter specifies the size of a LOGFONT structure, and the pvParam parameter must point to a LOGFONT structure. SPI_SETICONTITLEWRAP 0x001A Turns icon-title wrapping on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. The following are the input parameters. They include parameters related to the keyboard, mouse, pen, input language, and the warning beeper. Input parameterMeaning SPI_GETBEEP 0x0001 Determines whether the warning beeper is on. The pvParam parameter must point to a BOOL variable that receives TRUE if the beeper is on, or FALSE if it is off. SPI_GETBLOCKSENDINPUTRESETS 0x1026 Retrieves a BOOL indicating whether an application can reset the screensaver's timer by calling the SendInput function to simulate keyboard or mouse input. The pvParam parameter must point to a BOOL variable that receives TRUE if the simulated input will be blocked, or FALSE otherwise. SPI_GETCONTACTVISUALIZATION 0x2018 Retrieves the current contact visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Contact Visualization. SPI_GETDEFAULTINPUTLANG 0x0059 Retrieves the input locale identifier for the system default input language. The pvParam parameter must point to an HKL variable that receives this value. For more information, see Languages, Locales, and Keyboard Layouts. SPI_GETGESTUREVISUALIZATION 0x201A Retrieves the current gesture visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Gesture Visualization. SPI_GETKEYBOARDCUES 0x100A Determines whether menu access keys are always underlined. The pvParam parameter must point to a BOOL variable that receives TRUE if menu access keys are always underlined, and FALSE if they are underlined only when the menu is activated by the keyboard. SPI_GETKEYBOARDDELAY 0x0016 Retrieves the keyboard repeat-delay setting, which is a value in the range from 0 (approximately 250 ms delay) through 3 (approximately 1 second delay). The actual delay associated with each value may vary depending on the hardware. The pvParam parameter must point to an integer variable that receives the setting. SPI_GETKEYBOARDPREF 0x0044 Determines whether the user relies on the keyboard instead of the mouse, and wants applications to display keyboard interfaces that would otherwise be hidden. The pvParam parameter must point to a BOOL variable that receives TRUE if the user relies on the keyboard; or FALSE otherwise. SPI_GETKEYBOARDSPEED 0x000A Retrieves the keyboard repeat-speed setting, which is a value in the range from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%. The pvParam parameter must point to a DWORD variable that receives the setting. SPI_GETMOUSE 0x0003 Retrieves the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an array of three integers that receives these values. See mouse_event for further information. SPI_GETMOUSEHOVERHEIGHT 0x0064 Retrieves the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the height. SPI_GETMOUSEHOVERTIME 0x0066 Retrieves the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the time. SPI_GETMOUSEHOVERWIDTH 0x0062 Retrieves the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the width. SPI_GETMOUSESPEED 0x0070 Retrieves the current mouse speed. The mouse speed determines how far the pointer will move based on the distance the mouse moves. The pvParam parameter must point to an integer that receives a value which ranges between 1 (slowest) and 20 (fastest). A value of 10 is the default. The value can be set by an end-user using the mouse control panel application or by an application using SPI_SETMOUSESPEED. SPI_GETMOUSETRAILS 0x005E Determines whether the Mouse Trails feature is enabled. This feature improves the visibility of mouse cursor movements by briefly showing a trail of cursors and quickly erasing them. The pvParam parameter must point to an integer variable that receives a value. if the value is zero or 1, the feature is disabled. If the value is greater than 1, the feature is enabled and the value indicates the number of cursors drawn in the trail. The uiParam parameter is not used. Windows 2000: This parameter is not supported. SPI_GETMOUSEWHEELROUTING 0x201C Retrieves the routing setting for wheel button input. The routing setting determines whether wheel button input is sent to the app with focus (foreground) or the app under the mouse cursor. The pvParam parameter must point to a DWORD variable that receives the routing option. If the value is zero or MOUSEWHEEL_ROUTING_FOCUS, mouse wheel input is delivered to the app with focus. If the value is 1 or MOUSEWHEEL_ROUTING_HYBRID (default), mouse wheel input is delivered to the app with focus (desktop apps) or the app under the mouse cursor (Windows Store apps). The uiParam parameter is not used. SPI_GETPENVISUALIZATION 0x201E Retrieves the current pen gesture visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Pen Visualization. SPI_GETSNAPTODEFBUTTON 0x005F Determines whether the snap-to-default-button feature is enabled. If enabled, the mouse cursor automatically moves to the default button, such as OK or Apply, of a dialog box. The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. SPI_GETSYSTEMLANGUAGEBAR 0x1050 Starting with Windows 8: Determines whether the system language bar is enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if the language bar is enabled, or FALSE otherwise. SPI_GETTHREADLOCALINPUTSETTINGS 0x104E Starting with Windows 8: Determines whether the active input settings have Local (per-thread, TRUE) or Global (session, FALSE) scope. The pvParam parameter must point to a BOOL variable. SPI_GETWHEELSCROLLCHARS 0x006C Retrieves the number of characters to scroll when the horizontal mouse wheel is moved. The pvParam parameter must point to a UINT variable that receives the number of lines. The default value is 3. SPI_GETWHEELSCROLLLINES 0x0068 Retrieves the number of lines to scroll when the vertical mouse wheel is moved. The pvParam parameter must point to a UINT variable that receives the number of lines. The default value is 3. SPI_SETBEEP 0x0002 Turns the warning beeper on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. SPI_SETBLOCKSENDINPUTRESETS 0x1027 Determines whether an application can reset the screensaver's timer by calling the SendInput function to simulate keyboard or mouse input. The uiParam parameter specifies TRUE if the screensaver will not be deactivated by simulated input, or FALSE if the screensaver will be deactivated by simulated input. SPI_SETCONTACTVISUALIZATION 0x2019 Sets the current contact visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Contact Visualization. Note If contact visualizations are disabled, gesture visualizations cannot be enabled. SPI_SETDEFAULTINPUTLANG 0x005A Sets the default input language for the system shell and applications. The specified language must be displayable using the current system character set. The pvParam parameter must point to an HKL variable that contains the input locale identifier for the default language. For more information, see Languages, Locales, and Keyboard Layouts. SPI_SETDOUBLECLICKTIME 0x0020 Sets the double-click time for the mouse to the value of the uiParam parameter. If the uiParam value is greater than 5000 milliseconds, the system sets the double-click time to 5000 milliseconds. The double-click time is the maximum number of milliseconds that can occur between the first and second clicks of a double-click. You can also call the SetDoubleClickTime function to set the double-click time. To get the current double-click time, call the GetDoubleClickTime function. SPI_SETDOUBLECLKHEIGHT 0x001E Sets the height of the double-click rectangle to the value of the uiParam parameter. The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered as a double-click. To retrieve the height of the double-click rectangle, call GetSystemMetrics with the SM_CYDOUBLECLK flag. SPI_SETDOUBLECLKWIDTH 0x001D Sets the width of the double-click rectangle to the value of the uiParam parameter. The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered as a double-click. To retrieve the width of the double-click rectangle, call GetSystemMetrics with the SM_CXDOUBLECLK flag. SPI_SETGESTUREVISUALIZATION 0x201B Sets the current gesture visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Gesture Visualization. Note If contact visualizations are disabled, gesture visualizations cannot be enabled. SPI_SETKEYBOARDCUES 0x100B Sets the underlining of menu access key letters. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to always underline menu access keys, or FALSE to underline menu access keys only when the menu is activated from the keyboard. SPI_SETKEYBOARDDELAY 0x0017 Sets the keyboard repeat-delay setting. The uiParam parameter must specify 0, 1, 2, or 3, where zero sets the shortest delay approximately 250 ms) and 3 sets the longest delay (approximately 1 second). The actual delay associated with each value may vary depending on the hardware. SPI_SETKEYBOARDPREF 0x0045 Sets the keyboard preference. The uiParam parameter specifies TRUE if the user relies on the keyboard instead of the mouse, and wants applications to display keyboard interfaces that would otherwise be hidden; uiParam is FALSE otherwise. SPI_SETKEYBOARDSPEED 0x000B Sets the keyboard repeat-speed setting. The uiParam parameter must specify a value in the range from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%. If uiParam is greater than 31, the parameter is set to 31. SPI_SETLANGTOGGLE 0x005B Sets the hot key set for switching between input languages. The uiParam and pvParam parameters are not used. The value sets the shortcut keys in the keyboard property sheets by reading the registry again. The registry must be set before this flag is used. the path in the registry is HKEY_CURRENT_USER\\Keyboard Layout\\Toggle. Valid values are \"1\" = ALT+SHIFT, \"2\" = CTRL+SHIFT, and \"3\" = none. SPI_SETMOUSE 0x0004 Sets the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an array of three integers that specifies these values. See mouse_event for further information. SPI_SETMOUSEBUTTONSWAP 0x0021 Swaps or restores the meaning of the left and right mouse buttons. The uiParam parameter specifies TRUE to swap the meanings of the buttons, or FALSE to restore their original meanings. To retrieve the current setting, call GetSystemMetrics with the SM_SWAPBUTTON flag. SPI_SETMOUSEHOVERHEIGHT 0x0065 Sets the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new height. SPI_SETMOUSEHOVERTIME 0x0067 Sets the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent to generate a WM_MOUSEHOVER message. This is used only if you pass HOVER_DEFAULT in the dwHoverTime parameter in the call to TrackMouseEvent. Set the uiParamparameter to the new time. The time specified should be between USER_TIMER_MAXIMUM and USER_TIMER_MINIMUM. If uiParam is less than USER_TIMER_MINIMUM, the function will use USER_TIMER_MINIMUM. If uiParam is greater than USER_TIMER_MAXIMUM, the function will be USER_TIMER_MAXIMUM. Windows Server 2003 and Windows XP: The operating system does not enforce the use of USER_TIMER_MAXIMUM and USER_TIMER_MINIMUM until Windows Server 2003 with SP1 and Windows XP with SP2. SPI_SETMOUSEHOVERWIDTH 0x0063 Sets the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new width. SPI_SETMOUSESPEED 0x0071 Sets the current mouse speed. The pvParam parameter is an integer between 1 (slowest) and 20 (fastest). A value of 10 is the default. This value is typically set using the mouse control panel application. SPI_SETMOUSETRAILS 0x005D Enables or disables the Mouse Trails feature, which improves the visibility of mouse cursor movements by briefly showing a trail of cursors and quickly erasing them. To disable the feature, set the uiParam parameter to zero or 1. To enable the feature, set uiParam to a value greater than 1 to indicate the number of cursors drawn in the trail. Windows 2000: This parameter is not supported. SPI_SETMOUSEWHEELROUTING 0x201D Sets the routing setting for wheel button input. The routing setting determines whether wheel button input is sent to the app with focus (foreground) or the app under the mouse cursor. The pvParam parameter must point to a DWORD variable that receives the routing option. If the value is zero or MOUSEWHEEL_ROUTING_FOCUS, mouse wheel input is delivered to the app with focus. If the value is 1 or MOUSEWHEEL_ROUTING_HYBRID (default), mouse wheel input is delivered to the app with focus (desktop apps) or the app under the mouse cursor (Windows Store apps). Set the uiParam parameter to zero. SPI_SETPENVISUALIZATION 0x201F Sets the current pen gesture visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Pen Visualization. SPI_SETSNAPTODEFBUTTON 0x0060 Enables or disables the snap-to-default-button feature. If enabled, the mouse cursor automatically moves to the default button, such as OK or Apply, of a dialog box. Set the uiParam parameter to TRUE to enable the feature, or FALSE to disable it. Applications should use the ShowWindow function when displaying a dialog box so the dialog manager can position the mouse cursor. SPI_SETSYSTEMLANGUAGEBAR 0x1051 Starting with Windows 8: Turns the legacy language bar feature on or off. The pvParam parameter is a pointer to a BOOL variable. Set pvParam to TRUE to enable the legacy language bar, or FALSE to disable it. The flag is supported on Windows 8 where the legacy language bar is replaced by Input Switcher and therefore turned off by default. Turning the legacy language bar on is provided for compatibility reasons and has no effect on the Input Switcher. SPI_SETTHREADLOCALINPUTSETTINGS 0x104F Starting with Windows 8: Determines whether the active input settings have Local (per-thread, TRUE) or Global (session, FALSE) scope. The pvParam parameter must point to a BOOL variable, casted by PVOID. SPI_SETWHEELSCROLLCHARS 0x006D Sets the number of characters to scroll when the horizontal mouse wheel is moved. The number of characters is set from the uiParam parameter. SPI_SETWHEELSCROLLLINES 0x0069 Sets the number of lines to scroll when the vertical mouse wheel is moved. The number of lines is set from the uiParam parameter. The number of lines is the suggested number of lines to scroll when the mouse wheel is rolled without using modifier keys. If the number is 0, then no scrolling should occur. If the number of lines to scroll is greater than the number of lines viewable, and in particular if it is WHEEL_PAGESCROLL (#defined as UINT_MAX), the scroll operation should be interpreted as clicking once in the page down or page up regions of the scroll bar. The following are the menu parameters. Menu parameterMeaning SPI_GETMENUDROPALIGNMENT 0x001B Determines whether pop-up menus are left-aligned or right-aligned, relative to the corresponding menu-bar item. The pvParam parameter must point to a BOOL variable that receives TRUE if right-aligned, or FALSE otherwise. SPI_GETMENUFADE 0x1012 Determines whether menu fade animation is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE when fade animation is enabled and FALSE when it isdisabled. If fade animation is disabled, menus use slide animation. This flag is ignored unless menu animation is enabled, which you can do using the SPI_SETMENUANIMATION flag. For more information, see AnimateWindow. SPI_GETMENUSHOWDELAY 0x006A Retrieves the time, in milliseconds, that the system waits before displaying a shortcut menu when the mouse cursor is over a submenu item. The pvParam parameter must point to a DWORD variable that receives the time of the delay. SPI_SETMENUDROPALIGNMENT 0x001C Sets the alignment value of pop-up menus. The uiParam parameter specifies TRUE for right alignment, or FALSE for left alignment. SPI_SETMENUFADE 0x1013 Enables or disables menu fade animation. Set pvParam to TRUE to enable the menu fade effect or FALSE to disable it. If fade animation is disabled, menus use slide animation. he The menu fade effect is possible only if the system has a color depth of more than 256 colors. This flag is ignored unless SPI_MENUANIMATION is also set. For more information, see AnimateWindow. SPI_SETMENUSHOWDELAY 0x006B Sets uiParam to the time, in milliseconds, that the system waits before displaying a shortcut menu when the mouse cursor is over a submenu item. The following are the power parameters. Beginning with Windows Server 2008 and Windows Vista, these power parameters are not supported. Instead, to determine the current display power state, an application should register for GUID_MONITOR_POWER_STATE notifications. To determine the current display power down time-out, an application should register for notification of changes to the GUID_VIDEO_POWERDOWN_TIMEOUT power setting. For more information, see Registering for Power Events. Windows Server 2003 and Windows XP/2000: To determine the current display power state, use the following power parameters. Power parameterMeaning SPI_GETLOWPOWERACTIVE 0x0053 This parameter is not supported. Windows Server 2003 and Windows XP/2000: Determines whether the low-power phase of screen saving is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE if disabled. This flag is supported for 32-bit applications only. SPI_GETLOWPOWERTIMEOUT 0x004F This parameter is not supported. Windows Server 2003 and Windows XP/2000: Retrieves the time-out value for the low-power phase of screen saving. The pvParam parameter must point to an integer variable that receives the value. This flag is supported for 32-bit applications only. SPI_GETPOWEROFFACTIVE 0x0054 This parameter is not supported. When the power-off phase of screen saving is enabled, the GUID_VIDEO_POWERDOWN_TIMEOUT power setting is greater than zero. Windows Server 2003 and Windows XP/2000: Determines whether the power-off phase of screen saving is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE if disabled. This flag is supported for 32-bit applications only. SPI_GETPOWEROFFTIMEOUT 0x0050 This parameter is not supported. Instead, check the GUID_VIDEO_POWERDOWN_TIMEOUT power setting. Windows Server 2003 and Windows XP/2000: Retrieves the time-out value for the power-off phase of screen saving. The pvParam parameter must point to an integer variable that receives the value. This flag is supported for 32-bit applications only. SPI_SETLOWPOWERACTIVE 0x0055 This parameter is not supported. Windows Server 2003 and Windows XP/2000: Activates or deactivates the low-power phase of screen saving. Set uiParam to 1 to activate, or zero to deactivate. The pvParam parameter must be NULL. This flag is supported for 32-bit applications only. SPI_SETLOWPOWERTIMEOUT 0x0051 This parameter is not supported. Windows Server 2003 and Windows XP/2000: Sets the time-out value, in seconds, for the low-power phase of screen saving. The uiParam parameter specifies the new value. The pvParam parameter must be NULL. This flag is supported for 32-bit applications only. SPI_SETPOWEROFFACTIVE 0x0056 This parameter is not supported. Instead, set the GUID_VIDEO_POWERDOWN_TIMEOUT power setting. Windows Server 2003 and Windows XP/2000: Activates or deactivates the power-off phase of screen saving. Set uiParam to 1 to activate, or zero to deactivate. The pvParam parameter must be NULL. This flag is supported for 32-bit applications only. SPI_SETPOWEROFFTIMEOUT 0x0052 This parameter is not supported. Instead, set the GUID_VIDEO_POWERDOWN_TIMEOUT power setting to a time-out value. Windows Server 2003 and Windows XP/2000: Sets the time-out value, in seconds, for the power-off phase of screen saving. The uiParam parameter specifies the new value. The pvParam parameter must be NULL. This flag is supported for 32-bit applications only. The following are the screen saver parameters. Screen saver parameterMeaning SPI_GETSCREENSAVEACTIVE 0x0010 Determines whether screen saving is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if screen saving is enabled, or FALSE otherwise. Windows 7, Windows Server 2008 R2 and Windows 2000: The function returns TRUE even when screen saving is not enabled. For more information and a workaround, see KB318781. SPI_GETSCREENSAVERRUNNING 0x0072 Determines whether a screen saver is currently running on the window station of the calling process. The pvParam parameter must point to a BOOL variable that receives TRUE if a screen saver is currently running, or FALSE otherwise. Note that only the interactive window station, WinSta0, can have a screen saver running. SPI_GETSCREENSAVESECURE 0x0076 Determines whether the screen saver requires a password to display the Windows desktop. The pvParam parameter must point to a BOOL variable that receives TRUE if the screen saver requires a password, or FALSE otherwise. The uiParam parameter is ignored. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETSCREENSAVETIMEOUT 0x000E Retrieves the screen saver time-out value, in seconds. The pvParam parameter must point to an integer variable that receives the value. SPI_SETSCREENSAVEACTIVE 0x0011 Sets the state of the screen saver. The uiParam parameter specifies TRUE to activate screen saving, or FALSE to deactivate it. If the machine has entered power saving mode or system lock state, an ERROR_OPERATION_IN_PROGRESS exception occurs. SPI_SETSCREENSAVESECURE 0x0077 Sets whether the screen saver requires the user to enter a password to display the Windows desktop. The uiParam parameter is a BOOL variable. The pvParam parameter is ignored. Set uiParam to TRUE to require a password, or FALSE to not require a password. If the machine has entered power saving mode or system lock state, an ERROR_OPERATION_IN_PROGRESS exception occurs. Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETSCREENSAVETIMEOUT 0x000F Sets the screen saver time-out value to the value of the uiParam parameter. This value is the amount of time, in seconds, that the system must be idle before the screen saver activates. If the machine has entered power saving mode or system lock state, an ERROR_OPERATION_IN_PROGRESS exception occurs. The following are the time-out parameters for applications and services. Time-out parameterMeaning SPI_GETHUNGAPPTIMEOUT 0x0078 Retrieves the number of milliseconds that a thread can go without dispatching a message before the system considers it unresponsive. The pvParam parameter must point to an integer variable that receives the value. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETWAITTOKILLTIMEOUT 0x007A Retrieves the number of milliseconds that the system waits before terminating an application that does not respond to a shutdown request. The pvParam parameter must point to an integer variable that receives the value. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETWAITTOKILLSERVICETIMEOUT 0x007C Retrieves the number of milliseconds that the service control manager waits before terminating a service that does not respond to a shutdown request. The pvParam parameter must point to an integer variable that receives the value. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETHUNGAPPTIMEOUT 0x0079 Sets the hung application time-out to the value of the uiParam parameter. This value is the number of milliseconds that a thread can go without dispatching a message before the system considers it unresponsive. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETWAITTOKILLTIMEOUT 0x007B Sets the application shutdown request time-out to the value of the uiParam parameter. This value is the number of milliseconds that the system waits before terminating an application that does not respond to a shutdown request. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETWAITTOKILLSERVICETIMEOUT 0x007D Sets the service shutdown request time-out to the value of the uiParam parameter. This value is the number of milliseconds that the system waits before terminating a service that does not respond to a shutdown request. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. The following are the UI effects. The SPI_SETUIEFFECTS value is used to enable or disable all UI effects at once. This table contains the complete list of UI effect values. UI effects parameterMeaning SPI_GETCOMBOBOXANIMATION 0x1004 Determines whether the slide-open effect for combo boxes is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. SPI_GETCURSORSHADOW 0x101A Determines whether the cursor has a shadow around it. The pvParam parameter must point to a BOOL variable that receives TRUE if the shadow is enabled, FALSE if it is disabled. This effect appears only if the system has a color depth of more than 256 colors. SPI_GETGRADIENTCAPTIONS 0x1008 Determines whether the gradient effect for window title bars is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. For more information about the gradient effect, see the GetSysColor function. SPI_GETHOTTRACKING 0x100E Determines whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. Hot tracking means that when the cursor moves over an item, it is highlighted but not selected. You can query this value to decide whether to use hot tracking in the user interface of your application. SPI_GETLISTBOXSMOOTHSCROLLING 0x1006 Determines whether the smooth-scrolling effect for list boxes is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. SPI_GETMENUANIMATION 0x1002 Determines whether the menu animation feature is enabled. This master switch must be on to enable menu animation effects. The pvParam parameter must point to a BOOL variable that receives TRUE if animation is enabled and FALSE if it is disabled. If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation. SPI_GETMENUUNDERLINES 0x100A Same as SPI_GETKEYBOARDCUES. SPI_GETSELECTIONFADE 0x1014 Determines whether the selection fade effect is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE if disabled. The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out after the menu is dismissed. SPI_GETTOOLTIPANIMATION 0x1016 Determines whether ToolTip animation is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE if disabled. If ToolTip animation is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTips use fade or slide animation. SPI_GETTOOLTIPFADE 0x1018 If SPI_SETTOOLTIPANIMATION is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTip animation uses a fade effect or a slide effect. The pvParam parameter must point to a BOOL variable that receives TRUE for fade animation or FALSE for slide animation. For more information on slide and fade effects, see AnimateWindow. SPI_GETUIEFFECTS 0x103E Determines whether UI effects are enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if all UI effects are enabled, or FALSE if they are disabled. SPI_SETCOMBOBOXANIMATION 0x1005 Enables or disables the slide-open effect for combo boxes. Set the pvParam parameter to TRUE to enable the gradient effect, or FALSE to disable it. SPI_SETCURSORSHADOW 0x101B Enables or disables a shadow around the cursor. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable the shadow or FALSE to disable the shadow. This effect appears only if the system has a color depth of more than 256 colors. SPI_SETGRADIENTCAPTIONS 0x1009 Enables or disables the gradient effect for window title bars. Set the pvParam parameter to TRUE to enable it, or FALSE to disable it. The gradient effect is possible only if the system has a color depth of more than 256 colors. For more information about the gradient effect, see the GetSysColor function. SPI_SETHOTTRACKING 0x100F Enables or disables hot tracking of user-interface elements such as menu names on menu bars. Set the pvParam parameter to TRUE to enable it, or FALSE to disable it. Hot-tracking means that when the cursor moves over an item, it is highlighted but not selected. SPI_SETLISTBOXSMOOTHSCROLLING 0x1007 Enables or disables the smooth-scrolling effect for list boxes. Set the pvParam parameter to TRUE to enable the smooth-scrolling effect, or FALSE to disable it. SPI_SETMENUANIMATION 0x1003 Enables or disables menu animation. This master switch must be on for any menu animation to occur. The pvParam parameter is a BOOL variable; set pvParam to TRUE to enable animation and FALSE to disable animation. If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation. SPI_SETMENUUNDERLINES 0x100B Same as SPI_SETKEYBOARDCUES. SPI_SETSELECTIONFADE 0x1015 Set pvParam to TRUE to enable the selection fade effect or FALSE to disable it. The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out after the menu is dismissed. The selection fade effect is possible only if the system has a color depth of more than 256 colors. SPI_SETTOOLTIPANIMATION 0x1017 Set pvParam to TRUE to enable ToolTip animation or FALSE to disable it. If enabled, you can use SPI_SETTOOLTIPFADE to specify fade or slide animation. SPI_SETTOOLTIPFADE 0x1019 If the SPI_SETTOOLTIPANIMATION flag is enabled, use SPI_SETTOOLTIPFADE to indicate whether ToolTip animation uses a fade effect or a slide effect. Set pvParam to TRUE for fade animation or FALSE for slide animation. The tooltip fade effect is possible only if the system has a color depth of more than 256 colors. For more information on the slide and fade effects, see the AnimateWindowfunction. SPI_SETUIEFFECTS 0x103F Enables or disables UI effects. Set the pvParam parameter to TRUE to enable all UI effects or FALSE to disable all UI effects. The following are the window parameters. Window parameterMeaning SPI_GETACTIVEWINDOWTRACKING 0x1000 Determines whether active window tracking (activating the window the mouse is on) is on or off. The pvParam parameter must point to a BOOL variable that receives TRUE for on, or FALSE for off. SPI_GETACTIVEWNDTRKZORDER 0x100C Determines whether windows activated through active window tracking will be brought to the top. The pvParam parameter must point to a BOOL variable that receives TRUE for on, or FALSE for off. SPI_GETACTIVEWNDTRKTIMEOUT 0x2002 Retrieves the active window tracking delay, in milliseconds. The pvParam parameter must point to a DWORD variable that receives the time. SPI_GETANIMATION 0x0048 Retrieves the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(ANIMATIONINFO). SPI_GETBORDER 0x0005 Retrieves the border multiplier factor that determines the width of a window's sizing border. The pvParamparameter must point to an integer variable that receives this value. SPI_GETCARETWIDTH 0x2006 Retrieves the caret width in edit controls, in pixels. The pvParam parameter must point to a DWORD variable that receives this value. SPI_GETDOCKMOVING 0x0090 Determines whether a window is docked when it is moved to the top, left, or right edges of a monitor or monitor array. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETDRAGFROMMAXIMIZE 0x008C Determines whether a maximized window is restored when its caption bar is dragged. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETDRAGFULLWINDOWS 0x0026 Determines whether dragging of full windows is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. SPI_GETFOREGROUNDFLASHCOUNT 0x2004 Retrieves the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. The pvParam parameter must point to a DWORD variable that receives the value. SPI_GETFOREGROUNDLOCKTIMEOUT 0x2000 Retrieves the amount of time following user input, in milliseconds, during which the system will not allow applications to force themselves into the foreground. The pvParam parameter must point to a DWORD variable that receives the time. SPI_GETMINIMIZEDMETRICS 0x002B Retrieves the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(MINIMIZEDMETRICS). SPI_GETMOUSEDOCKTHRESHOLD 0x007E Retrieves the threshold in pixels where docking behavior is triggered by using a mouse to drag a window to the edge of a monitor or monitor array. The default threshold is 1. The pvParam parameter must point to a DWORD variable that receives the value. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETMOUSEDRAGOUTTHRESHOLD 0x0084 Retrieves the threshold in pixels where undocking behavior is triggered by using a mouse to drag a window from the edge of a monitor or a monitor array toward the center. The default threshold is 20. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETMOUSESIDEMOVETHRESHOLD 0x0088 Retrieves the threshold in pixels from the top of a monitor or a monitor array where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETNONCLIENTMETRICS 0x0029 Retrieves the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point to a NONCLIENTMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(NONCLIENTMETRICS). SPI_GETPENDOCKTHRESHOLD 0x0080 Retrieves the threshold in pixels where docking behavior is triggered by using a pen to drag a window to the edge of a monitor or monitor array. The default is 30. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETPENDRAGOUTTHRESHOLD 0x0086 Retrieves the threshold in pixels where undocking behavior is triggered by using a pen to drag a window from the edge of a monitor or monitor array toward its center. The default threshold is 30. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETPENSIDEMOVETHRESHOLD 0x008A Retrieves the threshold in pixels from the top of a monitor or monitor array where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETSHOWIMEUI 0x006E Determines whether the IME status window is visible (on a per-user basis). The pvParam parameter must point to a BOOL variable that receives TRUE if the status window is visible, or FALSE if it is not. SPI_GETSNAPSIZING 0x008E Determines whether a window is vertically maximized when it is sized to the top or bottom of a monitor or monitor array. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_GETWINARRANGING 0x0082 Determines whether window arrangement is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Window arrangement reduces the number of mouse, pen, or touch interactions needed to move and size top-level windows by simplifying the default behavior of a window when it is dragged or sized. The following parameters retrieve individual window arrangement settings: SPI_GETDOCKMOVING SPI_GETMOUSEDOCKTHRESHOLD SPI_GETMOUSEDRAGOUTTHRESHOLD SPI_GETMOUSESIDEMOVETHRESHOLD SPI_GETPENDOCKTHRESHOLD SPI_GETPENDRAGOUTTHRESHOLD SPI_GETPENSIDEMOVETHRESHOLD SPI_GETSNAPSIZING Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETACTIVEWINDOWTRACKING 0x1001 Sets active window tracking (activating the window the mouse is on) either on or off. Set pvParam to TRUE for on or FALSE for off. SPI_SETACTIVEWNDTRKZORDER 0x100D Determines whether or not windows activated through active window tracking should be brought to the top. Set pvParam to TRUE for on or FALSE for off. SPI_SETACTIVEWNDTRKTIMEOUT 0x2003 Sets the active window tracking delay. Set pvParam to the number of milliseconds to delay before activating the window under the mouse pointer. SPI_SETANIMATION 0x0049 Sets the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(ANIMATIONINFO). SPI_SETBORDER 0x0006 Sets the border multiplier factor that determines the width of a window's sizing border. The uiParam parameter specifies the new value. SPI_SETCARETWIDTH 0x2007 Sets the caret width in edit controls. Set pvParam to the desired width, in pixels. The default and minimum value is 1. SPI_SETDOCKMOVING 0x0091 Sets whether a window is docked when it is moved to the top, left, or right docking targets on a monitor or monitor array. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETDRAGFROMMAXIMIZE 0x008D Sets whether a maximized window is restored when its caption bar is dragged. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETDRAGFULLWINDOWS 0x0025 Sets dragging of full windows either on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. SPI_SETDRAGHEIGHT 0x004D Sets the height, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. To retrieve the drag height, call GetSystemMetrics with the SM_CYDRAG flag. SPI_SETDRAGWIDTH 0x004C Sets the width, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. To retrieve the drag width, call GetSystemMetrics with the SM_CXDRAG flag. SPI_SETFOREGROUNDFLASHCOUNT 0x2005 Sets the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. Set pvParam to the number of times to flash. SPI_SETFOREGROUNDLOCKTIMEOUT 0x2001 Sets the amount of time following user input, in milliseconds, during which the system does not allow applications to force themselves into the foreground. Set pvParam to the new time-out value. The calling thread must be able to change the foreground window, otherwise the call fails. SPI_SETMINIMIZEDMETRICS 0x002C Sets the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(MINIMIZEDMETRICS). SPI_SETMOUSEDOCKTHRESHOLD 0x007F Sets the threshold in pixels where docking behavior is triggered by using a mouse to drag a window to the edge of a monitor or monitor array. The default threshold is 1. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETMOUSEDRAGOUTTHRESHOLD 0x0085 Sets the threshold in pixels where undocking behavior is triggered by using a mouse to drag a window from the edge of a monitor or monitor array to its center. The default threshold is 20. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETMOUSESIDEMOVETHRESHOLD 0x0089 Sets the threshold in pixels from the top of the monitor where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETNONCLIENTMETRICS 0x002A Sets the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point to a NONCLIENTMETRICS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(NONCLIENTMETRICS). Also, the lfHeight member of the LOGFONT structure must be a negative value. SPI_SETPENDOCKTHRESHOLD 0x0081 Sets the threshold in pixels where docking behavior is triggered by using a pen to drag a window to the edge of a monitor or monitor array. The default threshold is 30. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETPENDRAGOUTTHRESHOLD 0x0087 Sets the threshold in pixels where undocking behavior is triggered by using a pen to drag a window from the edge of a monitor or monitor array to its center. The default threshold is 30. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETPENSIDEMOVETHRESHOLD 0x008B Sets the threshold in pixels from the top of the monitor where a vertically maximized window is restored when dragged with a pen. The default threshold is 50. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETSHOWIMEUI 0x006F Sets whether the IME status window is visible or not on a per-user basis. The uiParam parameter specifies TRUE for on or FALSE for off. SPI_SETSNAPSIZING 0x008F Sets whether a window is vertically maximized when it is sized to the top or bottom of the monitor. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. SPI_SETWINARRANGING 0x0083 Sets whether window arrangement is enabled. Set pvParam to TRUE for on or FALSE for off. Window arrangement reduces the number of mouse, pen, or touch interactions needed to move and size top-level windows by simplifying the default behavior of a window when it is dragged or sized. The following parameters set individual window arrangement settings: SPI_SETDOCKMOVING SPI_SETMOUSEDOCKTHRESHOLD SPI_SETMOUSEDRAGOUTTHRESHOLD SPI_SETMOUSESIDEMOVETHRESHOLD SPI_SETPENDOCKTHRESHOLD SPI_SETPENDRAGOUTTHRESHOLD SPI_SETPENSIDEMOVETHRESHOLD SPI_SETSNAPSIZING Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported.",
 "CreateMailslot": "The name of the mailslot. This name must have the following form: \\\\.\\mailslot\\[path]name The name field must be unique. The name may include multiple levels of pseudo directories separated by backslashes. For example, both \\\\.\\mailslot\\example_mailslot_name and \\\\.\\mailslot\\abc\\def\\ghi are valid names.",
 "GetMailslotInfo": "A handle to a mailslot. The CreateMailslot function must create this handle.",
 "SetMailslotInfo": "A handle to a mailslot. The CreateMailslot function must create this handle.",
 "DefRawInputProc": "Type: PRAWINPUT* An array of RAWINPUT structures.",
 "GetRawInputBuffer": "Type: PRAWINPUT A pointer to a buffer of RAWINPUT structures that contain the raw input data. If NULL, the minimum required buffer, in bytes, is returned in *pcbSize.",
 "GetRawInputData": "Type: HRAWINPUT A handle to the RAWINPUT structure. This comes from the \t\t\t\t\tlParam in WM_INPUT.",
 "GetRawInputDeviceInfo": "Type: HANDLE A handle to the raw input device. This comes from the hDevice member of RAWINPUTHEADER or from GetRawInputDeviceList.",
 "GetRawInputDeviceList": "Type: PRAWINPUTDEVICELIST An array of RAWINPUTDEVICELIST structures for the devices attached to the system. If NULL, the number of devices are returned in *puiNumDevices.",
 "GetRegisteredRawInputDevices": "Type: PRAWINPUTDEVICE An array of RAWINPUTDEVICE structures for the application.",
 "RegisterRawInputDevices": "Type: PCRAWINPUTDEVICE An array of RAWINPUTDEVICE structures that represent the devices that supply the raw input.",
 "D2D1ComputeMaximumScaleFactor": "The input transform matrix.",
 "D2D1CreateDevice": "The DXGI device the Direct2D device is associated with.",
 "D2D1CreateDeviceContext": "The DXGI surface the Direct2D device context is associated with.",
 "D2D1CreateFactory(D2D1_FACTORY_TYPE,REFIID,void**)": "Type: D2D1_FACTORY_TYPE The threading model of the factory and the resources it creates.",
 "D2D1CreateFactory(D2D1_FACTORY_TYPE,REFIID,D2D1_FACTORY_OPTIONS*,void**)": "Type: D2D1_FACTORY_TYPE The threading model of the factory and the resources it creates.",
 "D2D1GetGradientMeshInteriorPointsFromCoonsPatch": "Type: D2D1_POINT_2F* The coordinate-space location of the control point at position 0.",
 "D2D1InvertMatrix": "Type: D2D1_MATRIX_3X2_F* The matrix to invert.",
 "D2D1IsMatrixInvertible": "Type: const D2D1_MATRIX_3X2_F* The matrix to test.",
 "D2D1MakeRotateMatrix": "Type: FLOAT The clockwise rotation angle, in degrees.",
 "D2D1MakeSkewMatrix": "Type: FLOAT The x-axis skew angle, which is measured in degrees counterclockwise from the y-axis.",
 "operator*(const D2D1_MATRIX_3X2_F&,const D2D1_MATRIX_3X2_F&)": "Type: const D2D1_MATRIX_3X2_F The first matrix to multiply.",
 "GetType": "Type: UINT32 The index of the property for which the type will be retrieved.",
 "StringGetter": "Type: const IUnknown* The effect with the property.",
 "StringSetter": "Type: IUnknown* The effect with the property.",
 "ValueGetter": "The effect with the property.",
 "ValueSetter": "The effect with the property.",
 "D2D1ConvertColorSpace": "Type: D2D1_COLOR_SPACE The source color space.",
 "D2D1SinCos": "Type: FLOAT The angle to calculate.",
 "D2D1Tan": "Type: FLOAT The angle to calculate the tangent for.",
 "D2D1Vec3Length": "Type: FLOAT The x value of the vector.",
 "PD2D1_PROPERTY_GET_FUNCTION pointer": "A pointer to the IUnknown interface for the effect on which the property will be retrieved.",
 "PD2D1_PROPERTY_SET_FUNCTION pointer": "A pointer to the IUnknown interface for the effect on which the property will be set.",
 "AddUsersToEncryptedFile": "The name of the encrypted file.",
 "AreFileApisANSI": null,
 "CancelIo": "A handle to the file. The function cancels all pending I/O operations for this file handle.",
 "CancelIoEx": "A handle to the file.",
 "CancelSynchronousIo": "A handle to the thread.",
 "CheckNameLegalDOS8Dot3": "The file name, in 8.3 format.",
 "CopyFile": "The name of an existing file. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (CopyFileW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details. If lpExistingFileName does not exist, CopyFile fails, and GetLastError returns ERROR_FILE_NOT_FOUND.",
 "CopyFile2": "The name of an existing file. To extend this limit to 32,767 wide characters, prepend \"\\\\?\\\" to the path. For more information, see Naming Files, Paths, and Namespaces. Tip Starting in Windows 10, version 1607, you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details. If lpExistingFileName does not exist, the CopyFile2 function fails returns HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND).",
 "CopyFile2ProgressRoutine": "Pointer to a COPYFILE2_MESSAGE structure.",
 "CopyFileEx": "The name of an existing file. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting in Windows 10, version 1607, for the unicode version of this function (CopyFileExW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details. If lpExistingFileName does not exist, the CopyFileEx function fails, and the GetLastError function returns ERROR_FILE_NOT_FOUND.",
 "CopyFileTransacted": "The name of an existing file. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. If lpExistingFileName does not exist, the CopyFileTransacted function fails, and the GetLastError function returns ERROR_FILE_NOT_FOUND. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "CopyProgressRoutine": "The total size of the file, in bytes.",
 "MoveFileTransacted": "The current name of the existing file or directory on the local computer. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File.",
 "MoveFileWithProgress": "The name of the existing file or directory on the local computer. If dwFlags specifies MOVEFILE_DELAY_UNTIL_REBOOT, the file cannot exist on a remote share because delayed operations are performed before the network is available. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (MoveFileWithProgressW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "CreateFile2": "The name of the file or device to be created or opened. For information on special device names, see Defining an MS-DOS Device Name. To create a file stream, specify the name of the file, a colon, and then the name of the stream. For more information, see File Streams. Tip Starting with Windows 10, version 1607, you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "CreateFileTransacted": "The name of an object to be created or opened. The object must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. For information on special device names, see Defining an MS-DOS Device Name. To create a file stream, specify the name of the file, a colon, and then the name of the stream. For more information, see File Streams.",
 "CreateHardLink": "The name of the new file. This parameter may include the path but cannot specify the name of a directory. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (CreateHardLinkW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "CreateHardLinkTransacted": "The name of the new file. This parameter cannot specify the name of a directory.",
 "CreateIoCompletionPort": "An open file handle or INVALID_HANDLE_VALUE. The handle must be to an object that supports overlapped I/O. If a handle is provided, it has to have been opened for overlapped I/O completion. For example, you must specify the FILE_FLAG_OVERLAPPED flag when using the CreateFile function to obtain the handle. If INVALID_HANDLE_VALUE is specified, the function creates an I/O completion port without associating it with a file handle. In this case, the ExistingCompletionPort parameter must be NULL and the CompletionKey parameter is ignored.",
 "CreateSymbolicLink": "The symbolic link to be created. This parameter may include the path. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (CreateSymbolicLinkW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "CreateSymbolicLinkTransacted": "The symbolic link to be created.",
 "DecryptFile": "The name of the file or directory to be decrypted. The caller must have the FILE_READ_DATA, FILE_WRITE_DATA, FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE access rights. For more information, see File Security and Access Rights.",
 "DeleteFileTransacted": "The name of the file to be deleted. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "DuplicateEncryptionInfoFile": "The name of the file or directory from which the EFS metadata is to be copied. This source file or directory must be encrypted.",
 "EncryptFile": "The name of the file or directory to be encrypted. The caller must have the FILE_READ_DATA, FILE_WRITE_DATA, FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE access rights. For more information, see File Security and Access Rights.",
 "EncryptionDisable": "The name of the directory for which to enable or disable encryption.",
 "ExportCallback": "A pointer to a block of the encrypted file's data to be backed up. This block of data is allocated by the system.",
 "FileEncryptionStatus": "The name of the file.",
 "FileIOCompletionRoutine": "The I/O completion status. This parameter can be one of the system error codes.",
 "ReadFileEx": "A handle to the file or I/O device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe). This parameter can be any handle opened with the FILE_FLAG_OVERLAPPED flag by the CreateFile function, or a socket handle returned by the socket or accept function. This handle also must have the GENERIC_READ access right. For more information on access rights, see File Security and Access Rights.",
 "WriteFileEx": "A handle to the file or I/O device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe). This parameter can be any handle opened with the FILE_FLAG_OVERLAPPED flag by the CreateFile function, or a socket handle returned by the socket or accept function. Do not associate an I/O completion port with this handle. For more information, see the Remarks section. This handle also must have the GENERIC_WRITE access right. For more information on access rights, see File Security and Access Rights.",
 "FindClose": "The file search handle.",
 "FindFirstFile": "The directory or path, and the file name. The file name can include wildcard characters, for example, an asterisk (*) or a question mark (?). This parameter should not be NULL, an invalid string (for example, an empty string or a string that is missing the terminating null character), or end in a trailing backslash (\\). If the string ends with a wildcard, period (.), or directory name, the user must have access permissions to the root and all subdirectories on the path. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting in Windows 10, version 1607, for the unicode version of this function (FindFirstFileW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "FindFirstFileEx": "The directory or path, and the file name. The file name can include wildcard characters, for example, an asterisk (*) or a question mark (?). This parameter should not be NULL, an invalid string (for example, an empty string or a string that is missing the terminating null character), or end in a trailing backslash (\\). If the string ends with a wildcard, period, or directory name, the user must have access to the root and all subdirectories on the path. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to approximately 32,000 wide characters, call the Unicode version of the function (FindFirstFileExW), and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting in Windows 10, version 1607, for the unicode version of this function (FindFirstFileExW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "FindFirstFileNameW": "The name of the file. Tip Starting with Windows 10, version 1607, you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "FindFirstFileNameTransactedW": "The name of the file. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE (6805).",
 "FindFirstFileTransacted": "The directory or path, and the file name. The file name can include wildcard characters, for example, an asterisk (*) or a question mark (?). This parameter should not be NULL, an invalid string (for example, an empty string or a string that is missing the terminating null character), or end in a trailing backslash (\\). If the string ends with a wildcard, period (.), or directory name, the user must have access to the root and all subdirectories on the path. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "FindFirstStreamTransactedW": "The fully qualified file name. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE (6805).",
 "FindFirstStreamW": "The fully qualified file name.",
 "FindNextFileNameW": "A handle to the enumeration that is returned by a successful call to FindFirstFileNameW.",
 "FindNextFile": "The search handle returned by a previous call to the FindFirstFile or FindFirstFileEx function.",
 "FindNextStreamW": "The search handle returned by a previous call to the FindFirstStreamW function.",
 "FlushFileBuffers": "A handle to the open file. The file handle must have the GENERIC_WRITE access right. For more information, see File Security and Access Rights. If hFile is a handle to a communications device, the function only flushes the transmit buffer. If hFile is a handle to the server end of a named pipe, the function does not return until the client has read all buffered data from the pipe.",
 "FreeEncryptionCertificateHashList": "A pointer to a certificate hash list structure, ENCRYPTION_CERTIFICATE_HASH_LIST, which was returned by the QueryUsersOnEncryptedFile or QueryRecoveryAgentsOnEncryptedFile function.",
 "GetBinaryType": "The full path of the file whose executable type is to be determined. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File.",
 "GetCompressedFileSize": "The name of the file. Do not specify the name of a file on a nonseeking device, such as a pipe or a communications device, as its file size has no meaning. This parameter may include the path. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (GetCompressedFileSizeW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "GetCompressedFileSizeTransacted": "The name of the file. Do not specify the name of a file on a nonseeking device, such as a pipe or a communications device, as its file size has no meaning. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "GetExpandedName": "The name of the compressed file.",
 "GetFileAttributes": "The name of the file or directory. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function (GetFileAttributesW), and prepend \"\\\\?\\\" to the path. For more information, see File Names, Paths, and Namespaces. Tip Starting in Windows 10, version 1607, for the unicode version of this function (GetFileAttributesW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "GetFileAttributesEx": "The name of the file or directory. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function (GetFileAttributesExW), and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting in Windows 10, version 1607, for the unicode version of this function (GetFileAttributesExW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "GetFileAttributesTransacted": "The name of the file or directory. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. The file or directory must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "GetFileBandwidthReservation": "A handle to the file.",
 "GetFileInformationByHandle": "A handle to the file that contains the information to be retrieved. This handle should not be a pipe handle.",
 "GetFileInformationByHandleEx": "A handle to the file that contains the information to be retrieved. This handle should not be a pipe handle.",
 "GetFileSize": "A handle to the file.",
 "GetFileSizeEx": "A handle to the file. The handle must have been created with the FILE_READ_ATTRIBUTES access right or equivalent, or the caller must have sufficient permission on the directory that contains the file. For more information, see File Security and Access Rights.",
 "GetFileType": "A handle to the file.",
 "GetFinalPathNameByHandle": "A handle to a file or directory.",
 "GetFullPathName": "The name of the file. This parameter can be a short (the 8.3 form) or long file name. This string can also be a share or volume name. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function (GetFullPathNameW), and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting in Windows 10, version 1607, for the unicode version of this function (GetFullPathNameW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "GetFullPathNameTransacted": "The name of the file. This string can use short (the 8.3 form) or long file names. This string can be a share or volume name. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "GetLongPathName": "The path to be converted. In the ANSI version of this function, GetLongPathNameA, the name is limited to MAX_PATH (260) characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function, GetLongPathNameW, and prepend \"\\\\?\\\" to the path. For more information, see Naming Files, Paths, and Namespaces. Tip Starting with Windows 10, version 1607, for the unicode version of this function (GetLongPathNameW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "GetLongPathNameTransacted": "The path to be converted. In the ANSI version of this function, the name is limited to MAX_PATH (260) characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming Files, Paths, and Namespaces. The path must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "GetQueuedCompletionStatus": "A handle to the completion port. To create a completion port, use the CreateIoCompletionPort function.",
 "GetQueuedCompletionStatusEx": "A handle to the completion port. To create a completion port, use the CreateIoCompletionPort function.",
 "GetShortPathName": "The path string. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming Files, Paths, and Namespaces.",
 "GetTempFileName": "The directory path for the file name. ...",
 "GetTempPath": "The size of the string buffer identified by lpBuffer, in TCHARs.",
 "ImportCallback": "A pointer to a system-supplied buffer that will receive a block of data to be restored.",
 "LockFile": "A handle to the file. The file handle must have been created with the GENERIC_READ or GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "LockFileEx": "A handle to the file. The handle must have been created with either the GENERIC_READ or GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "LZClose": "A handle to the file to be closed.",
 "LZOpenFile": "The name of the file.",
 "LZCopy": "A handle to the source file.",
 "LZInit": "A handle to the file.",
 "LZRead": "A handle to the file.",
 "LZSeek": "A handle to the file.",
 "MoveFile": "The current name of the file or directory on the local computer. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (MoveFileW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "MoveFileEx": "The current name of the file or directory on the local computer. If dwFlags specifies MOVEFILE_DELAY_UNTIL_REBOOT, the file cannot exist on a remote share, because delayed operations are performed before the network is available. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File Tip Starting with Windows 10, version 1607, for the unicode version of this function (MoveFileExW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "OpenFile": "The name of the file. The string must consist of characters from the 8-bit Windows character set. The OpenFile function does not support Unicode file names or opening named pipes.",
 "OpenFileById": "A handle to any file on a volume or share on which the file to be opened is stored.",
 "PostQueuedCompletionStatus": "A handle to an I/O completion port to which the I/O completion packet is to be posted.",
 "QueryRecoveryAgentsOnEncryptedFile": "The name of the file.",
 "QueryUsersOnEncryptedFile": "The name of the file.",
 "ReadFile": "A handle to the device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe). The hFile parameter must have been created with read access. For more information, see Generic Access Rights and File Security and Access Rights. For asynchronous read operations, hFile can be any handle that is opened with the FILE_FLAG_OVERLAPPED flag by the CreateFile function, or a socket handle returned by the socket or accept function.",
 "ReadFileScatter": "A handle to the file to be read. The file handle must be created with the GENERIC_READ right, and the FILE_FLAG_OVERLAPPED and FILE_FLAG_NO_BUFFERING flags. For more information, see File Security and Access Rights.",
 "RemoveUsersFromEncryptedFile": "The name of the file.",
 "ReOpenFile": "A handle to the object to be reopened. The object must have been created by the CreateFile function.",
 "ReplaceFile": "The name of the file to be replaced. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting with Windows 10, version 1607, for the unicode version of this function (ReplaceFileW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details. This file is opened with the GENERIC_READ, DELETE, and SYNCHRONIZE access rights. The sharing mode is FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE. The caller must have write access to the file to be replaced. For more information, see File Security and Access Rights.",
 "SearchPath": "The path to be searched for the file. If this parameter is NULL, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section.",
 "SetEndOfFile": "A handle to the file to be extended or truncated. The file handle must be created with the GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "SetFileApisToANSI": null,
 "SetFileApisToOEM": null,
 "SetFileAttributes": "The name of the file whose attributes are to be set. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function (SetFileAttributesW) and prepend \"\\\\?\\\" to the path. For more information, see File Names, Paths, and Namespaces. Tip Starting in Windows 10, version 1607, for the unicode version of this function (SetFileAttributesW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "SetFileAttributesTransacted": "The name of the file whose attributes are to be set. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see File Names, Paths, and Namespaces. The file must reside on the local computer; otherwise, the function fails and the last error code is set to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.",
 "SetFileBandwidthReservation": "A handle to the file.",
 "SetFileCompletionNotificationModes": "A handle to the file.",
 "SetFileInformationByHandle": "A handle to the file for which to change information. This handle must be opened with the appropriate permissions for the requested change. For more information, see the Remarks and Example Code sections. This handle should not be a pipe handle.",
 "SetFileIoOverlappedRange": "A handle to the file. This file handle must be opened with FILE_READ_ATTRIBUTES access rights.",
 "SetFilePointer": "A handle to the file. The file handle must be created with the GENERIC_READ or GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "SetFilePointerEx": "A handle to the file. The file handle must have been created with the GENERIC_READ or GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "SetFileShortName": "A handle to the file. The file must be opened with either the GENERIC_ALL access right or GENERIC_WRITE|DELETE, and with the FILE_FLAG_BACKUP_SEMANTICS file attribute.",
 "SetFileValidData": "A handle to the file. The file must have been opened with the GENERIC_WRITE access right, and the SE_MANAGE_VOLUME_NAME privilege enabled. For more information, see File Security and Access Rights. Note The file cannot be a network file, or be compressed, sparse, or transacted.",
 "SetSearchPathMode": "The search mode to use. ValueMeaning BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE 0x00000001 Enable safe process search mode for the process. BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE 0x00010000 Disable safe process search mode for the process. BASE_SEARCH_PATH_PERMANENT 0x00008000 Optional flag to use in combination with BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE to make this mode permanent for this process. This is done by bitwise OR operation: (BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE | BASE_SEARCH_PATH_PERMANENT) This flag cannot be combined with the BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE flag.",
 "SetUserFileEncryptionKey": "A pointer to a certificate that will be the user's key. This parameter is a pointer to an ENCRYPTION_CERTIFICATE structure.",
 "UnlockFile": "A handle to the file that contains a region locked with LockFile. The file handle must have been created with either the GENERIC_READ or GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "UnlockFileEx": "A handle to the file. The handle must have been created with either the GENERIC_READ or GENERIC_WRITE access right. For more information, see File Security and Access Rights.",
 "WofEnumEntries": "The volume name hosting the files for which the backing data sources are requested.",
 "WofEnumEntryProc": "The structure that contains specific provider info. The Type of EntryInfo is provider-specific. For WOF_PROVIDER_WIM, it will be PWIM_ENTRY_INFO.",
 "WofEnumFilesProc": "Specifies the path to the file which is backed by an external data source.",
 "WofFileEnumFiles": "A full path to the volume containing the files to enumerate.",
 "WofGetDriverVersion": "A handle to a file or volume opened with CreateFile or a similar API.",
 "WofIsExternalFile": "Specifies the path to the file for which the backing state is desired.",
 "WofSetFileDataLocation": "A handle to a file opened with CreateFile or a similar API.",
 "WofShouldCompressBinaries": "Specifies the path to the volume whose compression state is desired.",
 "WofWimAddEntry": "The path to the volume upon which files residing in the WIM should be created.",
 "WofWimEnumFiles": "The path to the volume which hosts WIM-backed files.",
 "WofWimRemoveEntry": "The volume name which contained files whose data was provided by the WIM.",
 "WofWimSuspendEntry": "The volume name which contained files whose data was provided by the WIM.",
 "WofWimUpdateEntry": "The volume name which contains files whose data is provided by the WIM.",
 "Wow64DisableWow64FsRedirection": "The WOW64 file system redirection value. The system uses this parameter to store information necessary to revert (re-enable) file system redirection. Note This value is for system use only. To avoid unpredictable behavior, do not modify this value in any way.",
 "Wow64EnableWow64FsRedirection": "Indicates the type of request for WOW64 system folder redirection. If TRUE, requests redirection be enabled; if FALSE, requests redirection be disabled.",
 "Wow64RevertWow64FsRedirection": "The WOW64 file system redirection value. This value is obtained from the Wow64DisableWow64FsRedirection function.",
 "WriteFile": "A handle to the file or I/O device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe). The hFile parameter must have been created with the write access. For more information, see Generic Access Rights and File Security and Access Rights. For asynchronous write operations, hFile can be any handle opened with the CreateFile function using the FILE_FLAG_OVERLAPPED flag or a socket handle returned by the socket or accept function.",
 "WriteFileGather": "A handle to the file. The file handle must be created with the GENERIC_WRITE access right, and the FILE_FLAG_OVERLAPPED and FILE_FLAG_NO_BUFFERING flags. For more information, see File Security and Access Rights.",
 "CreateProcessWithLogonW": "The name of the user. This is the name of the user account to log on to. If you use the UPN format, user@DNS_domain_name, the lpDomain parameter must be NULL. The user account must have the Log On Locally permission on the local computer. This permission is granted to all users on workstations and servers, but only to administrators on domain controllers.",
 "CreateProcessWithTokenW": "A handle to the primary token that represents a user. The handle must have the TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY access rights. For more information, see Access Rights for Access-Token Objects. The user represented by the token must have read and execute access to the application specified by the lpApplicationName or the lpCommandLine parameter. To get a primary token that represents the specified user, call the LogonUser function. Alternatively, you can call the DuplicateTokenEx function to convert an impersonation token into a primary token. This allows a server application that is impersonating a client to create a process that has the security context of the client. Terminal Services: The process is run in the session specified in the token. By default, this is the same session that called LogonUser. To change the session, use the SetTokenInformation function.",
 "ExitProcess": "The exit code for the process and all threads.",
 "FlushProcessWriteBuffers": null,
 "FreeEnvironmentStrings": "A pointer to a block of environment strings. The pointer to the block must be obtained by calling the GetEnvironmentStrings function.",
 "GetCommandLine": null,
 "GetCurrentProcess": null,
 "GetCurrentProcessId": null,
 "GetCurrentProcessorNumber": null,
 "GetEnvironmentStrings": null,
 "GetEnvironmentVariable": "The name of the environment variable.",
 "GetExitCodeProcess": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetGuiResources": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "GetLogicalProcessorInformation": "A pointer to a buffer that receives an array of SYSTEM_LOGICAL_PROCESSOR_INFORMATION structures. If the function fails, the contents of this buffer are undefined.",
 "GetPriorityClass": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessAffinityMask": "A handle to the process whose affinity mask is desired. This handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessGroupAffinity": "A handle to the process. This handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "GetProcessHandleCount": "A handle to the process whose handle count is being requested. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessId": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessIdOfThread": "A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003: The handle must have the THREAD_QUERY_INFORMATION access right.",
 "GetProcessIoCounters": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessMitigationPolicy": "A handle to the process. This handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "GetProcessPriorityBoost": "A handle to the process. This handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessShutdownParameters": "A pointer to a variable that receives the shutdown priority level. Higher levels shut down first. System level shutdown orders are reserved for system components. Higher numbers shut down first. Following are the level conventions. ValueMeaning 000-0FF System reserved last shutdown range. 100-1FF Application reserved last shutdown range. 200-2FF Application reserved \"in between\" shutdown range. 300-3FF Application reserved first shutdown range. 400-4FF System reserved first shutdown range. All processes start at shutdown level 0x280.",
 "GetProcessTimes": "A handle to the process whose timing information is sought. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessVersion": "The process identifier of the process of interest. A value of zero specifies the calling process.",
 "GetProcessWorkingSetSize": "A handle to the process whose working set sizes will be obtained. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessWorkingSetSizeEx": "A handle to the process whose working set sizes will be obtained. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessorSystemCycleTime": "The number of the processor group for which to retrieve the cycle time.",
 "GetStartupInfo": "A pointer to a STARTUPINFO structure that receives the startup information.",
 "IsImmersiveProcess": "Target process handle.",
 "NeedCurrentDirectoryForExePath": "The name of the executable file.",
 "OpenProcess": "The access to the process object. This access right is checked against the security descriptor for the process. This parameter can be one or more of the process access rights. If the caller has enabled the SeDebugPrivilege privilege, the requested access is granted regardless of the contents of the security descriptor.",
 "QueryFullProcessImageName": "A handle to the process. This handle must be created with the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "QueryProcessAffinityUpdateMode": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "QueryProcessCycleTime": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "SetEnvironmentVariable": "The name of the environment variable. The operating system creates the environment variable if it does not exist and lpValue is not NULL.",
 "SetPriorityClass": "A handle to the process. The handle must have the PROCESS_SET_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "SetProcessAffinityMask": "A handle to the process whose affinity mask is to be set. This handle must have the PROCESS_SET_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "SetProcessAffinityUpdateMode": "A handle to the process. This handle must be returned by the GetCurrentProcess function.",
 "SetProcessInformation": "A handle to the process. This handle must have the PROCESS_SET_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "SetProcessMitigationPolicy": "The mitigation policy to apply. This parameter can be one of the following values. ValueMeaning ProcessDEPPolicy The data execution prevention (DEP) policy of the process. The lpBuffer parameter points to a PROCESS_MITIGATION_DEP_POLICY structure that specifies the DEP policy flags. ProcessASLRPolicy The Address Space Layout Randomization (ASLR) policy of the process. The lpBuffer parameter points to a PROCESS_MITIGATION_ASLR_POLICY structure that specifies the ASLR policy flags. ProcessDynamicCodePolicy The dynamic code policy of the process. When turned on, the process cannot generate dynamic code or modify existing executable code. The lpBuffer parameter points to a PROCESS_MITIGATION_DYNAMIC_CODE_POLICY structure that specifies the dynamic code policy flags. ProcessStrictHandleCheckPolicy The process will receive a fatal error if it manipulates a handle that is not valid. The lpBuffer parameter points to a PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY structure that specifies the handle check policy flags. ProcessSystemCallDisablePolicy Disables the ability to use NTUser/GDI functions at the lowest layer. The lpBuffer parameter points to a PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY structure that specifies the system call disable policy flags. ProcessMitigationOptionsMask Returns the mask of valid bits for all the mitigation options on the system. An application can set many mitigation options without querying the operating system for mitigation options by combining bitwise with the mask to exclude all non-supported bits at once. The lpBuffer parameter points to a ULONG64 bit vector for the mask, or to accommodate more than 64 bits, a two-element array of ULONG64 bit vectors. ProcessExtensionPointDisablePolicy The lpBuffer parameter points to a PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY structure that specifies the extension point disable policy flags. ProcessControlFlowGuardPolicy The Control Flow Guard (CFG) policy of the process. The lpBuffer parameter points to a PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY structure that specifies the CFG policy flags. Note This value is not currently supported. ProcessSignaturePolicy The policy of a process that can restrict image loading to those images that are either signed by Microsoft, by the Windows Store, or by Microsoft, the Windows Store and the Windows Hardware Quality Labs (WHQL). he lpBuffer parameter points to a PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY structure that specifies the signature policy flags. ProcessFontDisablePolicy The policy regarding font loading for the process. When turned on, the process cannot load non-system fonts. The lpBuffer parameter points to a PROCESS_MITIGATION_FONT_DISABLE_POLICY structure that specifies the policy flags for font loading. ProcessImageLoadPolicy The policy regarding image loading for the process, which determines the types of executable images that are allowed to be mapped into the process. When turned on, images cannot be loaded from some locations, such a remote devices or files that have the low mandatory label. The lpBuffer parameter points to a PROCESS_MITIGATION_IMAGE_LOAD_POLICY structure that specifies the policy flags for image loading.",
 "SetProcessPriorityBoost": "A handle to the process. This handle must have the PROCESS_SET_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "SetProcessRestrictionExemption": "When set to TRUE, indicates a request to disable exemption for the calling process.",
 "SetProcessShutdownParameters": "The shutdown priority for a process relative to other processes in the system. The system shuts down processes from high dwLevel values to low. The highest and lowest shutdown priorities are reserved for system components. This parameter must be in the following range of values. ValueMeaning 000-0FF System reserved last shutdown range. 100-1FF Application reserved last shutdown range. 200-2FF Application reserved \"in between\" shutdown range. 300-3FF Application reserved first shutdown range. 400-4FF System reserved first shutdown range. All processes start at shutdown level 0x280.",
 "SetProcessWorkingSetSize": "A handle to the process whose working set sizes is to be set. The handle must have the PROCESS_SET_QUOTA access right. For more information, see Process Security and Access Rights.",
 "SetProcessWorkingSetSizeEx": "A handle to the process whose working set sizes is to be set. The handle must have PROCESS_SET_QUOTA access rights. For more information, see Process Security and Access Rights.",
 "TerminateProcess": "A handle to the process to be terminated. The handle must have the PROCESS_TERMINATE access right. For more information, see Process Security and Access Rights.",
 "Process32First": "A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.",
 "Process32Next": "A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.",
 "WTSEnumerateProcesses": "Handle to an RD Session Host server. Specify a handle opened by the WTSOpenServer function, or specify WTS_CURRENT_SERVER_HANDLE to indicate the RD Session Host server on which your application is running.",
 "QueryProtectedPolicy": "The globally-unique identifier of the policy to query.",
 "SetProtectedPolicy": "The globally-unique identifier of the policy to set.",
 "AttachThreadInput": "The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.",
 "CreateRemoteThread": "A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights, and may fail without these rights on certain platforms. For more information, see Process Security and Access Rights.",
 "CreateRemoteThreadEx": "A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights. In Windows 10, version 1607, your code must obtain these access rights for the new handle. However, starting in Windows 10, version 1703, if the new handle is entitled to these access rights, the system obtains them for you. For more information, see Process Security and Access Rights.",
 "CreateThread": "A pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpThreadAttributes is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new thread. If lpThreadAttributes is NULL, the thread gets a default security descriptor. The ACLs in the default security descriptor for a thread come from the primary token of the creator.",
 "GetCurrentThread": null,
 "GetCurrentThreadId": null,
 "GetExitCodeThread": "A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the THREAD_QUERY_INFORMATION access right.",
 "GetThreadDescription": "A handle to the thread for which to retrieve the description. The handle must have THREAD_QUERY_LIMITED_INFORMATION access.",
 "SetThreadDescription": "A handle for the thread for which you want to set the description. The handle must have THREAD_SET_LIMITED_INFORMATION access.",
 "GetThreadGroupAffinity": "A handle to the thread for which the processor group affinity is desired. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "GetThreadId": "A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information about access rights, see Thread Security and Access Rights. Windows Server 2003: The handle must have the THREAD_QUERY_INFORMATION access right.",
 "GetThreadIdealProcessorEx": "A handle to the thread for which to retrieve the ideal processor. This handle must have been created with the THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "GetThreadInformation": "A handle to the thread. The handle must have THREAD_QUERY_INFORMATION access rights. For more information, see Thread Security and Access Rights.",
 "GetThreadIOPendingFlag": "A handle to the thread in question. This handle must have been created with the THREAD_QUERY_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "GetThreadPriority": "A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003: The handle must have the THREAD_QUERY_INFORMATION access right.",
 "GetThreadPriorityBoost": "A handle to the thread. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the THREAD_QUERY_INFORMATION access right.",
 "GetThreadTimes": "A handle to the thread whose timing information is sought. The handle must have the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the THREAD_QUERY_INFORMATION access right.",
 "OpenThread": "The access to the thread object. This access right is checked against the security descriptor for the thread. This parameter can be one or more of the thread access rights. If the caller has enabled the SeDebugPrivilege privilege, the requested access is granted regardless of the contents of the security descriptor.",
 "QueryIdleProcessorCycleTime": "On input, specifies the size of the ProcessorIdleCycleTime buffer, in bytes. This buffer is expected to be 8 times the number of processors in the group. On output, specifies the number of elements written to the buffer. If the buffer size is not sufficient, the function fails and this parameter receives the required length of the buffer.",
 "QueryThreadCycleTime": "A handle to the thread. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "ResumeThread": "A handle to the thread to be restarted. This handle must have the THREAD_SUSPEND_RESUME access right. For more information, see Thread Security and Access Rights.",
 "SetThreadAffinityMask": "A handle to the thread whose affinity mask is to be set. This handle must have the THREAD_SET_INFORMATION or THREAD_SET_LIMITED_INFORMATION access right and the THREAD_QUERY_INFORMATION or THREAD_QUERY_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the THREAD_SET_INFORMATION and THREAD_QUERY_INFORMATION access rights.",
 "SetThreadGroupAffinity": "A handle to the thread. The handle must have the THREAD_SET_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "SetThreadIdealProcessor": "A handle to the thread whose preferred processor is to be set. The handle must have the THREAD_SET_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "SetThreadIdealProcessorEx": "A handle to the thread for which to set the ideal processor. This handle must have been created with the THREAD_SET_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "SetThreadInformation": "A handle to the thread. The handle must have THREAD_QUERY_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "SetThreadPriority": "A handle to the thread whose priority value is to be set. The handle must have the THREAD_SET_INFORMATION or THREAD_SET_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights.Windows Server 2003: The handle must have the THREAD_SET_INFORMATION access right.",
 "SetThreadPriorityBoost": "A handle to the thread whose priority is to be boosted. The handle must have the THREAD_SET_INFORMATION or THREAD_SET_LIMITED_INFORMATION access right. For more information, see Thread Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the THREAD_SET_INFORMATION access right.",
 "SetThreadStackGuarantee": "The size of the stack, in bytes. On return, this value is set to the size of the previous stack, in bytes. If this parameter is 0 (zero), the function succeeds and the parameter contains the size of the current stack. If the specified size is less than the current size, the function succeeds but ignores this request. Therefore, you cannot use this function to reduce the size of the stack. This value cannot be larger than the reserved stack size.",
 "Sleep": "The time interval for which execution is to be suspended, in milliseconds. A value of zero causes the thread to relinquish the remainder of its time slice to any other thread that is ready to run. If there are no other threads ready to run, the function returns immediately, and the thread continues execution.Windows XP: A value of zero causes the thread to relinquish the remainder of its time slice to any other thread of equal priority that is ready to run. If there are no other threads of equal priority ready to run, the function returns immediately, and the thread continues execution. This behavior changed starting with Windows Server 2003. A value of INFINITE indicates that the suspension should not time out.",
 "SleepEx": "The time interval for which execution is to be suspended, in milliseconds. A value of zero causes the thread to relinquish the remainder of its time slice to any other thread of equal priority that is ready to run. If there are no other threads of equal priority ready to run, the function returns immediately, and the thread continues execution. A value of INFINITE indicates that the suspension should not time out.",
 "SuspendThread": "A handle to the thread that is to be suspended. The handle must have the THREAD_SUSPEND_RESUME access right. For more information, see Thread Security and Access Rights.",
 "SwitchToThread": null,
 "TerminateThread": "A handle to the thread to be terminated. The handle must have the THREAD_TERMINATE access right. For more information, see Thread Security and Access Rights.",
 "ThreadProc": "The thread data passed to the function using the lpParameter parameter of the CreateThread, CreateRemoteThread, or CreateRemoteThreadEx function.",
 "TlsAlloc": null,
 "TlsFree": "The TLS index that was allocated by the TlsAlloc function.",
 "TlsGetValue": "The TLS index that was allocated by the TlsAlloc function.",
 "TlsSetValue": "The TLS index that was allocated by the TlsAlloc function.",
 "WaitForInputIdle": "A handle to the process. If this process is a console application or does not have a message queue, WaitForInputIdle returns immediately.",
 "DeleteProcThreadAttributeList": "The attribute list. This list is created by the InitializeProcThreadAttributeList function.",
 "InitializeProcThreadAttributeList": "The attribute list. This parameter can be NULL to determine the buffer size required to support the specified number of attributes.",
 "UpdateProcThreadAttribute": "A pointer to an attribute list created by the InitializeProcThreadAttributeList function.",
 "IsWow64Message": null,
 "IsWow64Process": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "Wow64SuspendThread": "A handle to the thread that is to be suspended. The handle must have the THREAD_SUSPEND_RESUME access right. For more information, see Thread Security and Access Rights.",
 "AssignProcessToJobObject": "A handle to the job object to which the process will be associated. The CreateJobObject or OpenJobObject function returns this handle. The handle must have the JOB_OBJECT_ASSIGN_PROCESS access right. For more information, see Job Object Security and Access Rights.",
 "CreateJobObject": "A pointer to a SECURITY_ATTRIBUTES structure that specifies the security descriptor for the job object and determines whether child processes can inherit the returned handle. If lpJobAttributes is NULL, the job object gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a job object come from the primary or impersonation token of the creator.",
 "IsProcessInJob": "A handle to the process to be tested. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "OpenJobObject": "The access to the job object. This parameter can be one or more of the job object access rights. This access right is checked against any security descriptor for the object.",
 "QueryInformationJobObject": "A handle to the job whose information is being queried. The CreateJobObject or OpenJobObject function returns this handle. The handle must have the JOB_OBJECT_QUERY access right. For more information, see Job Object Security and Access Rights. If this value is NULL and the calling process is associated with a job, the job associated with the calling process is used. If the job is nested, the immediate job of the calling process is used.",
 "SetInformationJobObject": "A handle to the job whose limits are being set. The CreateJobObject or OpenJobObject function returns this handle. The handle must have the JOB_OBJECT_SET_ATTRIBUTES access right. For more information, see Job Object Security and Access Rights.",
 "TerminateJobObject": "A handle to the job whose processes will be terminated. The CreateJobObject or OpenJobObject function returns this handle. This handle must have the JOB_OBJECT_TERMINATE access right. For more information, see Job Object Security and Access Rights. The handle for each process in the job object must have the PROCESS_TERMINATE access right. For more information, see Process Security and Access Rights.",
 "UserHandleGrantAccess": "A handle to the User object.",
 "CallbackMayRunLong": "A TP_CALLBACK_INSTANCE structure that defines the callback instance. The structure is passed to the callback function.",
 "CancelThreadpoolIo": "A TP_IO structure that defines the I/O completion object. The CreateThreadpoolIo function returns this structure.",
 "StartThreadpoolIo": "A TP_IO structure that defines the I/O completion object. The CreateThreadpoolIo function returns this structure.",
 "CloseThreadpool": "A TP_POOL structure that defines the thread pool. The CreateThreadpool function returns this structure.",
 "CloseThreadpoolCleanupGroup": "A TP_CLEANUP_GROUP structure that defines the cleanup group. The CreateThreadpoolCleanupGroup returns this structure.",
 "CloseThreadpoolCleanupGroupMembers": "A TP_CLEANUP_GROUP structure that defines the cleanup group. The CreateThreadpoolCleanupGroup function returns this structure.",
 "CloseThreadpoolIo": "A TP_IO structure that defines the I/O completion object. The CreateThreadpoolIo function returns this structure.",
 "CloseThreadpoolTimer": "A TP_TIMER structure that defines the timer object. The CreateThreadpoolTimer function returns this structure.",
 "CloseThreadpoolWait": "A TP_WAIT structure that defines the wait object. The CreateThreadpoolWait function returns this structure.",
 "CloseThreadpoolWork": "A TP_WORK structure that defines the work object. The CreateThreadpoolWork function returns this structure.",
 "CreateThreadpool": "This parameter is reserved and must be NULL.",
 "CreateThreadpoolCleanupGroup": null,
 "CreateThreadpoolIo": "The file handle to bind to this I/O completion object.",
 "CreateThreadpoolTimer": "The callback function to call each time the timer object expires. For details, see TimerCallback.",
 "CreateThreadpoolWait": "The callback function to call when the wait completes or times out. For details, see WaitCallback.",
 "CreateThreadpoolWork": "The callback function. A worker thread calls this callback each time you call SubmitThreadpoolWork to post the work object. For details, see WorkCallback.",
 "DestroyThreadpoolEnvironment": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "DisassociateCurrentThreadFromCallback": "A TP_CALLBACK_INSTANCE structure that defines the callback instance. The structure is passed to the callback function.",
 "FreeLibraryWhenCallbackReturns": "A TP_CALLBACK_INSTANCE structure that defines the callback instance. The structure is passed to the callback function.",
 "InitializeThreadpoolEnvironment": "A TP_CALLBACK_ENVIRON structure that defines a callback environment.",
 "IsThreadpoolTimerSet": "A TP_TIMER structure that defines the timer object. The CreateThreadpoolTimer function returns this structure.",
 "LeaveCriticalSectionWhenCallbackReturns": "A TP_CALLBACK_INSTANCE structure that defines the callback instance. The structure is passed to the callback function.",
 "QueryThreadpoolStackInformation": "A TP_POOL structure that specifies the thread pool. The CreateThreadpool function returns this structure.",
 "ReleaseMutexWhenCallbackReturns": "A TP_CALLBACK_INSTANCE structure that defines the callback instance. The structure is passed to the callback function.",
 "ReleaseSemaphoreWhenCallbackReturns": "A TP_CALLBACK_INSTANCE structure that defines the callback instance. The structure is passed to the callback function.",
 "SetEventWhenCallbackReturns": "A TP_CALLBACK_INSTANCE structure that defines the callback instance. The structure is passed to the callback function.",
 "SetThreadpoolCallbackCleanupGroup": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "SetThreadpoolCallbackLibrary": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "SetThreadpoolCallbackPersistent": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "SetThreadpoolCallbackPool": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "SetThreadpoolCallbackPriority": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "SetThreadpoolCallbackRunsLong": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "SetThreadpoolStackInformation": "A TP_POOL structure that specifies the thread pool. The CreateThreadpool function returns this structure.",
 "SetThreadpoolThreadMaximum": "A TP_POOL structure that defines the thread pool. The CreateThreadpool function returns this structure.",
 "SetThreadpoolThreadMinimum": "A TP_POOL structure that defines the thread pool. The CreateThreadpool function returns this structure.",
 "SetThreadpoolTimerEx": "A pointer to a TP_TIMER structure that defines the timer object to set. The CreateThreadpoolTimer function returns this structure.",
 "SetThreadpoolTimer": "A pointer to a TP_TIMER structure that defines the timer object to set. The CreateThreadpoolTimer function returns this structure.",
 "SetThreadpoolWait": "A pointer to a TP_WAIT structure that defines the wait object. The CreateThreadpoolWait function returns this structure.",
 "SetThreadpoolWaitEx": "A pointer to a TP_WAIT structure that defines the wait object. The CreateThreadpoolWait function returns this structure.",
 "SubmitThreadpoolWork": "A TP_WORK structure that defines the work object. The CreateThreadpoolWork function returns this structure.",
 "TpInitializeCallbackEnviron": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. Allocate space for this structure and initialize it using this function.",
 "TpDestroyCallbackEnviron": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackActivationContext": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackCleanupGroup": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackFinalizationCallback": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackLongFunction": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackNoActivationContext": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackPersistent": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackPriority": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TpSetCallbackRaceWithDll": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The InitializeThreadpoolEnvironment function returns this structure.",
 "TpSetCallbackThreadpool": "A TP_CALLBACK_ENVIRON structure that defines the callback environment. The TpInitializeCallbackEnviron function returns this structure.",
 "TrySubmitThreadpoolCallback": "The callback function. For details, see SimpleCallback.",
 "WaitForThreadpoolIoCallbacks": "A TP_IO structure that defines the I/O completion object. The CreateThreadpoolIo function returns this structure.",
 "WaitForThreadpoolTimerCallbacks": "A TP_TIMER structure that defines the timer object. The CreateThreadpoolTimer function returns the TP_TIMER structure.",
 "WaitForThreadpoolWaitCallbacks": "A TP_WAIT structure that defines the wait object. The CreateThreadpoolWait function returns the TP_WAIT structure.",
 "WaitForThreadpoolWorkCallbacks": "A TP_WORK structure that defines the work object. The CreateThreadpoolWork function returns this structure.",
 "BindIoCompletionCallback": "A handle to the file opened for overlapped I/O completion. This handle is returned by the CreateFile function, with the FILE_FLAG_OVERLAPPED flag.",
 "QueueUserWorkItem": "A pointer to the application-defined callback function of type LPTHREAD_START_ROUTINE to be executed by the thread in the thread pool. This value represents the starting address of the thread. This callback function must not call the TerminateThread function. For more information, see ThreadProc.",
 "RegisterWaitForSingleObject": "A pointer to a variable that receives a wait handle on return. Note that a wait handle cannot be used in functions that require an object handle, such as CloseHandle.",
 "UnregisterWaitEx": "The wait handle. This handle is returned by the RegisterWaitForSingleObject function.",
 "AvQuerySystemResponsiveness": "A handle to the task. This handle is returned by the AvSetMmThreadCharacteristics or AvSetMmMaxThreadCharacteristics function.",
 "AvRtCreateThreadOrderingGroup": "A pointer to a context handle.",
 "AvRtCreateThreadOrderingGroupEx": "A pointer to a context handle.",
 "AvRtDeleteThreadOrderingGroup": "A context handle. This handle is returned by the AvRtCreateThreadOrderingGroup function when creating the group.",
 "AvRtJoinThreadOrderingGroup": "A pointer to a context handle.",
 "AvRtLeaveThreadOrderingGroup": "A context handle. This handle is returned by the AvRtJoinThreadOrderingGroup function.",
 "AvRtWaitOnThreadOrderingGroup": "A context handle. This handle is returned by the AvRtCreateThreadOrderingGroup or AvRtJoinThreadOrderingGroup function.",
 "AvRevertMmThreadCharacteristics": "A handle to the task. This handle is returned by the AvSetMmThreadCharacteristics or AvSetMmMaxThreadCharacteristics function.",
 "AvSetMmMaxThreadCharacteristics": "The name of the first task to be performed. This name must match the name of one of the subkeys of the following key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Multimedia\\SystemProfile\\Tasks.",
 "AvSetMmThreadCharacteristics": "The name of the task to be performed. This name must match the name of one of the subkeys of the following key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Multimedia\\SystemProfile\\Tasks.",
 "AvSetMmThreadPriority": "A handle to the task. This handle is returned by the AvSetMmThreadCharacteristics or AvSetMmMaxThreadCharacteristics function.",
 "ConvertFiberToThread": null,
 "ConvertThreadToFiber": "A pointer to a variable that is passed to the fiber. The fiber can retrieve this data by using the GetFiberData macro.",
 "ConvertThreadToFiberEx": "A pointer to a variable that is passed to the fiber. The fiber can retrieve this data by using the GetFiberData macro.",
 "CreateFiber": "The initial size of the stack, in bytes. If this parameter is zero, the new fiber uses the default stack size for the executable. For more information, see Thread Stack Size.",
 "CreateFiberEx": "The initial commit size of the stack, in bytes. If this parameter is zero, the new fiber uses the default commit stack size for the executable. For more information, see Thread Stack Size.",
 "DeleteFiber": "The address of the fiber to be deleted.",
 "FiberProc": "The fiber data passed using the lpParameter parameter of the CreateFiber function.",
 "FlsAlloc": "A pointer to the application-defined callback function of type PFLS_CALLBACK_FUNCTION. This parameter is optional. For more information, see FlsCallback.",
 "FlsFree": "The FLS index that was allocated by the FlsAlloc function.",
 "FlsGetValue": "The FLS index that was allocated by the FlsAlloc function.",
 "FlsSetValue": "The FLS index that was allocated by the FlsAlloc function.",
 "IsThreadAFiber": null,
 "SwitchToFiber": "The address of the fiber to be scheduled.",
 "AllocateUserPhysicalPagesNuma": "A handle to a process. The function allocates memory that can later be mapped within the virtual address space of this process. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights.",
 "GetNumaAvailableMemoryNode": "The number of the node.",
 "GetNumaAvailableMemoryNodeEx": "The number of the node.",
 "GetNumaHighestNodeNumber": "The number of the highest node.",
 "GetNumaNodeNumberFromHandle": "A handle to a file or I/O device. Examples of I/O devices include files, file streams, volumes, physical disks, and sockets. For more information, see the CreateFile function.",
 "GetNumaNodeProcessorMask": "The number of the node.",
 "GetNumaNodeProcessorMaskEx": "The node number.",
 "GetNumaProcessorNode": "The processor number. On a system with more than 64 logical processors, the processor number is relative to the processor group that contains the processor on which the calling thread is running.",
 "GetNumaProcessorNodeEx": "A pointer to a PROCESSOR_NUMBER structure that represents the logical processor and the processor group to which it is assigned.",
 "GetNumaProximityNode": "The proximity domain identifier of the node.",
 "GetNumaProximityNodeEx": "The proximity identifier of the node.",
 "VirtualAllocExNuma": "The handle to a process. The function allocates memory within the virtual address space of this process. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights.",
 "GetActiveProcessorCount": "The processor group number. If this parameter is ALL_PROCESSOR_GROUPS, the function returns the number of active processors in the system.",
 "GetActiveProcessorGroupCount": null,
 "GetCurrentProcessorNumberEx": "A pointer to a PROCESSOR_NUMBER structure that receives the processor group to which the logical processor is assigned and the number of the logical processor within its group.",
 "GetLogicalProcessorInformationEx": "The type of relationship to retrieve. This parameter can be one of the following LOGICAL_PROCESSOR_RELATIONSHIP values. ValueMeaning RelationCache 2 Retrieves information about logical processors that share a cache. RelationNumaNode 1 Retrieves information about logical processors that are part of the same NUMA node. RelationProcessorCore 0 Retrieves information about logical processors that share a single processor core. RelationProcessorPackage 3 Retrieves information about logical processors that share a physical package. RelationGroup 4 Retrieves information about logical processors that share a processor group. RelationAll 0xffff Retrieves information about logical processors for all relationship types (cache, NUMA node, processor core, physical package, and processor group).",
 "GetMaximumProcessorCount": "The processor group number. If this parameter is ALL_PROCESSOR_GROUPS, the function returns the maximum number of processors that the system can have.",
 "GetMaximumProcessorGroupCount": null,
 "QueryIdleProcessorCycleTimeEx": "The number of the processor group for which to retrieve the cycle time.",
 "CreateUmsCompletionList": "A PUMS_COMPLETION_LIST variable. On output, this parameter receives a pointer to an empty UMS completion list.",
 "CreateUmsThreadContext": "A PUMS_CONTEXT variable. On output, this parameter receives a pointer to a UMS thread context.",
 "DeleteUmsCompletionList": "A pointer to the UMS completion list to be deleted. The CreateUmsCompletionList function provides this pointer.",
 "DeleteUmsThreadContext": "A pointer to the UMS thread context to be deleted. The CreateUmsThreadContext function provides this pointer.",
 "DequeueUmsCompletionListItems": "A pointer to the completion list from which to retrieve worker threads.",
 "EnterUmsSchedulingMode": "A pointer to a UMS_SCHEDULER_STARTUP_INFO structure that specifies UMS attributes for the thread, including a completion list and a UmsSchedulerProc entry point function.",
 "ExecuteUmsThread": "A pointer to the UMS thread context of the worker thread to run.",
 "GetCurrentUmsThread": null,
 "GetNextUmsListItem": "A pointer to a UMS context in a list of thread contexts. This list is retrieved by the DequeueUmsCompletionListItems function.",
 "GetUmsCompletionListEvent": "A pointer to a UMS completion list. The CreateUmsCompletionList function provides this pointer.",
 "GetUmsSystemThreadInformation": "A handle to a thread. The thread handle must have the THREAD_QUERY_INFORMATION access right. For more information, see Thread Security and Access Rights.",
 "QueryUmsThreadInformation": "A pointer to a UMS thread context.",
 "SetUmsThreadInformation": "A pointer to a UMS thread context.",
 "UmsSchedulerProc": "The reason the scheduler entry point is being called. This parameter can be one of the following values. ValueMeaning UmsSchedulerStartup 0 A UMS scheduler thread was created. The entry point is called with this reason once each time EnterUmsSchedulingMode is called. UmsSchedulerThreadBlocked 1 A UMS worker thread blocked. UmsSchedulerThreadYield 2 An executing UMS worker thread yielded control by calling the UmsThreadYield function.",
 "UmsThreadYield": "A parameter to pass to the scheduler thread's UmsSchedulerProc function.",
 "NtGetCurrentProcessorNumber": null,
 "NtQueryInformationProcess": "A handle to the process for which information is to be retrieved.",
 "NtQueryInformationThread": "A handle to the thread about which information is being requested.",
 "WinExec": "The command line (file name plus optional parameters) for the application to be executed. If the name of the executable file in the lpCmdLine parameter does not contain a directory path, the system searches for the executable file in this sequence: The directory from which the application loaded. The current directory. The Windows system directory. The GetSystemDirectory function retrieves the path of this directory. The Windows directory. The GetWindowsDirectory function retrieves the path of this directory. The directories listed in the PATH environment variable.",
 "ZwQueryInformationProcess": "A handle to the process for which information is to be retrieved.",
 "ApplySnapshotVhdSet": "A handle to an open virtual disk. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "AddVirtualDiskParent": "Handle to a virtual disk.",
 "AttachVirtualDisk": "A handle to an open virtual disk. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "BreakMirrorVirtualDisk": "A handle to the open mirrored virtual disk. For information on how to open a virtual disk, see the OpenVirtualDisk function. For information on how to mirror a virtual disk, see the MirrorVirtualDisk function.",
 "CompactVirtualDisk": "A handle to the open virtual disk, which must have been opened using the VIRTUAL_DISK_ACCESS_METAOPS flag in the VirtualDiskAccessMask parameter passed to OpenVirtualDisk. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "CreateVirtualDisk": "A pointer to a VIRTUAL_STORAGE_TYPE structure that contains the desired disk type and vendor information.",
 "DeleteSnapshotVhdSet": "A handle to the open virtual disk. This must be a VHD Set file.",
 "DeleteVirtualDiskMetadata": "A handle to the open virtual disk.",
 "DetachVirtualDisk": "A handle to an open virtual disk, which must have been opened using the VIRTUAL_DISK_ACCESS_DETACH flag set in the VirtualDiskAccessMask parameter to the OpenVirtualDisk function. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "EnumerateVirtualDiskMetadata": "Handle to an open virtual disk.",
 "ExpandVirtualDisk": "A handle to the open virtual disk, which must have been opened using the VIRTUAL_DISK_ACCESS_METAOPS flag. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "GetStorageDependencyInformation": "A handle to a volume or root directory if the Flags parameter does not specify the GET_STORAGE_DEPENDENCY_FLAG_DISK_HANDLE flag. For information on how to open a volume or root directory, see the CreateFile function. If the Flags parameter specifies the GET_STORAGE_DEPENDENCY_FLAG_DISK_HANDLE flag, this handle should be a handle to a disk.",
 "GetVirtualDiskInformation": "A handle to the open VHD, which must have been opened using the VIRTUAL_DISK_ACCESS_GET_INFO flag set in the VirtualDiskAccessMask parameter to the OpenVirtualDisk function. For information on how to open a VHD, see the OpenVirtualDisk function.",
 "GetVirtualDiskMetadata": "Handle to an open virtual disk.",
 "GetVirtualDiskOperationProgress": "A valid handle to a virtual disk with a pending asynchronous operation.",
 "GetVirtualDiskPhysicalPath": "A handle to the open virtual disk, which must have been opened using the VIRTUAL_DISK_ACCESS_GET_INFO flag. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "MergeVirtualDisk": "A handle to the open virtual disk, which must have been opened using the VIRTUAL_DISK_ACCESS_METAOPS flag. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "MirrorVirtualDisk": "A handle to the open virtual disk. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "ModifyVhdSet": "A handle to the open virtual disk. This must be a VHD Set file.",
 "OpenVirtualDisk": "A pointer to a valid VIRTUAL_STORAGE_TYPE structure.",
 "QueryChangesVirtualDisk": "A handle to the open VHD, which must have been opened using the VIRTUAL_DISK_ACCESS_GET_INFO flag set in the VirtualDiskAccessMask parameter to the OpenVirtualDisk function. For information on how to open a VHD, see the OpenVirtualDisk function.",
 "RawSCSIVirtualDisk": "A handle to an open virtual disk. For information on how to open a virtual disk, see the OpenVirtualDisk function. This handle may also be a handle to a Remote Shared Virtual Disk. For information on how to open a Remote Shared Virtual Disk, see the Remote Shared Virtual Disk Protocol documentation.",
 "ResizeVirtualDisk": "Handle to an open virtual disk.",
 "SetVirtualDiskInformation": "A handle to the open virtual disk, which must have been opened using the VIRTUAL_DISK_ACCESS_METAOPS flag. For information on how to open a virtual disk, see the OpenVirtualDisk function.",
 "SetVirtualDiskMetadata": "Handle to an open virtual disk.",
 "TakeSnapshotVhdSet": "A handle to the open virtual disk. This must be a VHD Set file.",
 "CounterPathCallBack": "User-defined value passed to the callback function by the Browse dialog box. You set this value in the dwCallBackArg member of the PDH_BROWSE_DLG_CONFIG structure.",
 "PdhAddCounter": "Handle to the query to which you want to add the counter. This handle is returned by the PdhOpenQuery function.",
 "PdhAddEnglishCounter": "Handle to the query to which you want to add the counter. This handle is returned by the PdhOpenQuery function.",
 "PdhBindInputDataSource": "Handle to the bound data sources.",
 "PdhBrowseCounters": "A PDH_BROWSE_DLG_CONFIG structure that specifies the behavior of the dialog box.",
 "PdhBrowseCountersH": "A PDH_BROWSE_DLG_CONFIG_H structure that specifies the behavior of the dialog box.",
 "PdhCalculateCounterFromRawValue": "Handle to the counter to calculate. The function uses information from the counter to determine how to calculate the value. This handle is returned by the PdhAddCounter function.",
 "PdhCloseLog": "Handle to the log file to be closed. This handle is returned by the PdhOpenLog function.",
 "PdhCloseQuery": "Handle to the query to close. This handle is returned by the PdhOpenQuery function.",
 "PdhCollectQueryData": "Handle of the query for which you want to collect data. The PdhOpenQuery function returns this handle.",
 "PdhCollectQueryDataEx": "Handle of the query. The query identifies the counters that you want to collect. The PdhOpenQuery function returns this handle.",
 "PdhCollectQueryDataWithTime": "Handle of the query for which you want to collect data. The PdhOpenQuery function returns this handle.",
 "PdhComputeCounterStatistics": "Handle of the counter for which you want to compute statistics. The PdhAddCounter function returns this handle.",
 "PdhConnectMachine": "Null-terminated string that specifies the name of the computer to connect to. If NULL, PDH connects to the local computer.",
 "PdhEnumLogSetNames": "Null-terminated string that specifies the DSN.",
 "PdhEnumMachines": "Null-terminated string that specifies the name of a log file. The function enumerates the names of the computers whose counter data is in the log file. If NULL, the function enumerates the list of computers that were specified when adding counters to a real time query or when calling the PdhConnectMachine function.",
 "PdhEnumMachinesH": "Handle to a data source returned by the PdhBindInputDataSource function.",
 "PdhEnumObjectItems": "Null-terminated string that specifies the name of the log file used to enumerate the counter and instance names. If NULL, the function uses the computer specified in the szMachineName parameter to enumerate the names.",
 "PdhEnumObjectItemsH": "Handle to a data source returned by the PdhBindInputDataSource function.",
 "PdhEnumObjects": "Null-terminated string that specifies the name of the log file used to enumerate the performance objects. If NULL, the function uses the computer specified in the szMachineName parameter to enumerate the names.",
 "PdhEnumObjectsH": "Handle to a data source returned by the PdhBindInputDataSource function.",
 "PdhExpandCounterPath": "Null-terminated string that contains the counter path to expand. The function searches the computer specified in the path for matches. If the path does not specify a computer, the function searches the local computer. The maximum length of a counter path is PDH_MAX_COUNTER_PATH.",
 "PdhExpandWildCardPath": "Null-terminated string that contains the name of a log file. The function uses the performance objects and counters defined in the log file to expand the path specified in the szWildCardPath parameter. If NULL, the function searches the computer specified in szWildCardPath.",
 "PdhExpandWildCardPathH": "Handle to a data source returned by the PdhBindInputDataSource function.",
 "PdhFormatFromRawValue": "Type of counter. Typically, you call PdhGetCounterInfo to retrieve the counter type at the time you call PdhGetRawCounterValue to retrieve the raw counter value. For a list of counter types, see the Counter Types section of the Windows Server 2003 Deployment Kit. (The constant values are defined in Winperf.h.) Note that you cannot specify base types, for example, PERF_LARGE_RAW_BASE.",
 "PdhGetCounterInfo": "Handle of the counter from which you want to retrieve information. The PdhAddCounter function returns this handle.",
 "PdhGetCounterTimeBase": "Handle to the counter. The PdhAddCounter function returns this handle.",
 "PdhGetDataSourceTimeRange": "Null-terminated string that specifies the name of a log file from which the time range information is retrieved.",
 "PdhGetDataSourceTimeRangeH": "Handle to a data source returned by the PdhBindInputDataSource function.",
 "PdhGetDefaultPerfCounter": "Should be NULL. \t\t\t\t\tIf you specify a log file, szDefaultCounterName will be a null string.",
 "PdhGetDefaultPerfCounterH": "Should be NULL. \t\t\t\t\tIf you specify a log file handle, szDefaultCounterName will be a null string.",
 "PdhGetDefaultPerfObject": "Should be NULL. \t\t\t\t\tIf you specify a log file, the szDefaultObjectName parameter will be a null string.",
 "PdhGetDefaultPerfObjectH": "Should be NULL. \t\t\t\t\tIf you specify a log file handle, szDefaultObjectName will be a null string.",
 "PdhGetDllVersion": "Pointer to a variable that receives the version of Pdh.dll. This parameter can be one of the following values. ValueMeaning PDH_CVERSION_WIN50 The file version is a legacy operating system. PDH_VERSION The file version is Windows XP.",
 "PdhGetFormattedCounterArray": "Handle to the counter whose current value you want to format. The PdhAddCounter function returns this handle.",
 "PdhGetFormattedCounterValue": "Handle of the counter for which you want to compute a displayable value. The PdhAddCounter function returns this handle.",
 "PdhGetLogFileSize": "Handle to the log file. The PdhOpenLog or PdhBindInputDataSource function returns this handle.",
 "PdhGetRawCounterArray": "Handle of the counter for whose current raw instance values you want to retrieve. The PdhAddCounter function returns this handle.",
 "PdhGetRawCounterValue": "Handle of the counter from which to retrieve the current raw value. The PdhAddCounter function returns this handle.",
 "PdhIsRealTimeQuery": "Handle to the query. The PdhOpenQuery function returns this handle.",
 "PdhLookupPerfIndexByName": "Null-terminated string that specifies the name of the computer where the specified counter is located. The computer name can be specified by the DNS name or the IP address. If NULL, the function uses the local computer.",
 "PdhLookupPerfNameByIndex": "Null-terminated string that specifies the name of the computer where the specified performance object or counter is located. The computer name can be specified by the DNS name or the IP address. If NULL, the function uses the local computer.",
 "PdhMakeCounterPath": "A PDH_COUNTER_PATH_ELEMENTS structure that contains the members used to make up the path. Only the szObjectName and szCounterName members are required, the others are optional. If the instance name member is NULL, the path will not contain an instance reference and the szParentInstance and dwInstanceIndex members will be ignored.",
 "PdhOpenLog": "Null-terminated string that specifies the name of the log file to open. The name can contain an absolute or relative path. If the lpdwLogType parameter is PDH_LOG_TYPE_SQL, specify the name of the log file in the form, SQL:DataSourceName!LogFileName.",
 "PdhOpenQuery": "Null-terminated string that specifies the name of the log file from which to retrieve performance data. If NULL, performance data is collected from a real-time data source.",
 "PdhOpenQueryH": "Handle to a data source returned by the PdhBindInputDataSource function.",
 "PdhParseCounterPath": "Null-terminated string that contains the counter path to parse. The maximum length of a counter path is PDH_MAX_COUNTER_PATH.",
 "PdhParseInstanceName": "Null-terminated string that specifies the instance string to parse into individual components. This string can contain the following formats, and is less than MAX_PATH characters in length: instance instance#index parent/instance parent/instance#index",
 "PdhReadRawLogRecord": "Handle to the log file. The PdhOpenLog or PdhBindInputDataSource function returns this handle.",
 "PdhRemoveCounter": "Handle of the counter to remove from its query. The PdhAddCounter function returns this handle.",
 "PdhSelectDataSource": "Owner of the dialog window. This can be NULL if there is no owner (the desktop becomes the owner).",
 "PdhSetCounterScaleFactor": "Handle of the counter to apply the scale factor to. The PdhAddCounter function returns this handle.",
 "PdhSetDefaultRealTimeDataSource": "Source of the performance data. This parameter can be one of the following values. ValueMeaning DATA_SOURCE_REGISTRY The data source is the registry interface. This is the default. DATA_SOURCE_WBEM The data source is a WMI provider.",
 "PdhSetQueryTimeRange": "Handle to the query. The PdhOpenQuery function returns this handle.",
 "PdhUpdateLog": "Handle of a single log file to update. The PdhOpenLog function returns this handle.",
 "PdhUpdateLogFileCatalog": "Handle to the log file containing the file catalog to update. The PdhOpenLog function.",
 "PdhValidatePath": "Null-terminated string that contains the counter path to validate. The maximum length of a counter path is PDH_MAX_COUNTER_PATH.",
 "PdhValidatePathEx": "Handle to the data source. The PdhOpenLog and PdhBindInputDataSource functions return this handle. To validate that the counter is present on the local computer, specify NULL (this is the same as calling PdhValidatePath).",
 "PerfAddCounters": "A handle to the query to which you want to add performance counter specifications.",
 "PerfCloseQueryHandle": "A handle to the query that you want to close",
 "PerfDeleteCounters": "A handle to the query from which you want to remove performance counter specifications.",
 "PerfEnumerateCounterSet": "The name of the machine for which to get the counter set identifiers. If NULL, the function retrieves the counter set identifiers for the local machine.",
 "PerfEnumerateCounterSetInstances": "The name of the machine for which to get the information about the active instances of the counter set that the pCounterSet parameter specifies. If NULL, the function retrieves information about the active instances of the specified counter set for the local machine.",
 "PerfOpenQueryHandle": "The name of the machine for which you want to get the query handle.",
 "PerfQueryCounterData": "A handle to a query for the counter specifications of the performance counters for which you want to get the values.",
 "PerfQueryCounterInfo": "A handle to the query for which you want to get the counter specifications",
 "PerfQueryCounterSetRegistrationInfo": "The name of the machine for which to get the information about the counter set that the pCounterSet parameter specifies. If NULL, the function retrieves information about the specified counter set for the local machine.",
 "AllocateMemory": "Number of bytes to allocate.",
 "CounterCleanup": null,
 "CounterInitialize": null,
 "FreeMemory": "Memory to free.",
 "PerfCreateInstance": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfDecrementULongCounterValue": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfDecrementULongLongCounterValue": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfDeleteInstance": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfIncrementULongCounterValue": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfIncrementULongLongCounterValue": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfQueryInstance": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfSetCounterSetInfo": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfSetULongCounterValue": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfSetULongLongCounterValue": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfSetCounterRefValue": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista: The PerfStartProvider function returns the handle.",
 "PerfStartProvider": "GUID that uniquely identifies the provider. The providerGuid attribute of the provider element specifies the GUID.",
 "PerfStartProviderEx": "GUID that uniquely identifies the provider. The providerGuid attribute of the provider element specifies the GUID.",
 "PerfStopProvider": "Handle to the provider.",
 "ClosePerformanceData": null,
 "CollectPerformanceData": "Null-terminated string that contains the query string (for example, \"Global\" or \"238\") passed to the RegQueryValueEx function. For possible query string values, see Using the Registry Functions to Consume Counter Data.",
 "OpenPerformanceData": "The pContext parameter contains one or more strings stored in the Export registry value. The strings are separated by a UNICODE_NULL and terminated by two UNICODE_NULL characters. If this entry does not exist, pContext is NULL. For details on setting the Export registry value, see Creating Other Registry Entries.",
 "LoadPerfCounterTextStrings": "Null-terminated string that consists of one or more arbitrary letters, a space, and then the name of the initialization (.ini) file. The name can include the path to the initialization file. The function uses only the initialization file; the first argument is discarded. For example, to load an initialization file called \"myfile.ini\", the commandLine string could be \"xx myfile.ini\". The letters before the space (here \"xx\") are discarded, and the second part, following the space, is interpreted as the initialization file specification.",
 "UnloadPerfCounterTextStrings": "Null-terminated string that consists of one or more arbitrary letters, a space, and then the name of the application. The name of the application must match the drivername key value found in the initialization (.ini) file used to load the text strings.",
 "Beep": "The frequency of the sound, in hertz. This parameter must be in the range 37 through 32,767 (0x25 through 0x7FFF).",
 "CaptureStackBackTrace": "The number of frames to skip from the start of the back trace.",
 "FatalAppExit": "This parameter must be zero.",
 "FlashWindow": "A handle to the window to be flashed. The window can be either open or minimized.",
 "FlashWindowEx": "A pointer to a FLASHWINFO structure.",
 "FormatMessage": "The formatting options, and how to interpret the lpSource parameter. The low-order byte of dwFlags specifies how the function handles line breaks in the output buffer. The low-order byte can also specify the maximum width of a formatted output line. This parameter can be one or more of the following values. ValueMeaning FORMAT_MESSAGE_ALLOCATE_BUFFER 0x00000100 The function allocates a buffer large enough to hold the formatted message, and places a pointer to the allocated buffer at the address specified by lpBuffer. The lpBuffer parameter is a pointer to an LPTSTR; you must cast the pointer to an LPTSTR (for example, (LPTSTR)&lpBuffer). The nSize parameter specifies the minimum number of TCHARs to allocate for an output message buffer. The caller should use the LocalFree function to free the buffer when it is no longer needed. If the length of the formatted message exceeds 128K bytes, then FormatMessage will fail and a subsequent call to GetLastError will return ERROR_MORE_DATA. In previous versions of Windows, this value was not available for use when compiling Windows Store apps. As of Windows 10 this value can be used. Windows Server 2003 and Windows XP: If the length of the formatted message exceeds 128K bytes, then FormatMessage will not automatically fail with an error of ERROR_MORE_DATA. Windows 10: LocalFree is not in the modern SDK, so it cannot be used to free the result buffer. Instead, use HeapFree (GetProcessHeap(), allocatedMessage). In this case, this is the same as calling LocalFree on memory. Important: LocalAlloc() has different options: LMEM_FIXED, and LMEM_MOVABLE. FormatMessage() uses LMEM_FIXED, so HeapFree can be used. If LMEM_MOVABLE is used, HeapFree cannot be used. FORMAT_MESSAGE_ARGUMENT_ARRAY 0x00002000 The Arguments parameter is not a va_list structure, but is a pointer to an array of values that represent the arguments. This flag cannot be used with 64-bit integer values. If you are using a 64-bit integer, you must use the va_list structure. FORMAT_MESSAGE_FROM_HMODULE 0x00000800 The lpSource parameter is a module handle containing the message-table resource(s) to search. If this lpSource handle is NULL, the current process's application image file will be searched. This flag cannot be used with FORMAT_MESSAGE_FROM_STRING. If the module has no message table resource, the function fails with ERROR_RESOURCE_TYPE_NOT_FOUND. FORMAT_MESSAGE_FROM_STRING 0x00000400 The lpSource parameter is a pointer to a null-terminated string that contains a message definition. The message definition may contain insert sequences, just as the message text in a message table resource may. This flag cannot be used with FORMAT_MESSAGE_FROM_HMODULE or FORMAT_MESSAGE_FROM_SYSTEM. FORMAT_MESSAGE_FROM_SYSTEM 0x00001000 The function should search the system message-table resource(s) for the requested message. If this flag is specified with FORMAT_MESSAGE_FROM_HMODULE, the function searches the system message table if the message is not found in the module specified by lpSource. This flag cannot be used with FORMAT_MESSAGE_FROM_STRING. If this flag is specified, an application can pass the result of the GetLastError function to retrieve the message text for a system-defined error. FORMAT_MESSAGE_IGNORE_INSERTS 0x00000200 Insert sequences in the message definition are to be ignored and passed through to the output buffer unchanged. This flag is useful for fetching a message for later formatting. If this flag is set, the Arguments parameter is ignored. The low-order byte of dwFlags can specify the maximum width of a formatted output line. The following are possible values of the low-order byte. ValueMeaning 0 There are no output line width restrictions. The function stores line breaks that are in the message definition text into the output buffer. FORMAT_MESSAGE_MAX_WIDTH_MASK 0x000000FF The function ignores regular line breaks in the message definition text. The function stores hard-coded line breaks in the message definition text into the output buffer. The function generates no new line breaks. If the low-order byte is a nonzero value other than FORMAT_MESSAGE_MAX_WIDTH_MASK, it specifies the maximum number of characters in an output line. The function ignores regular line breaks in the message definition text. The function never splits a string delimited by white space across a line break. The function stores hard-coded line breaks in the message definition text into the output buffer. Hard-coded line breaks are coded with the %n escape sequence.",
 "GetErrorMode": null,
 "GetLastError": null,
 "GetThreadErrorMode": null,
 "MessageBeep": "The sound to be played. The sounds are set by the user through the Sound control panel application, and then stored in the registry. This parameter can be one of the following values. ValueMeaning 0xFFFFFFFF A simple beep. If the sound card is not available, the sound is generated using the speaker. MB_ICONASTERISK 0x00000040L See MB_ICONINFORMATION. MB_ICONEXCLAMATION 0x00000030L See MB_ICONWARNING. MB_ICONERROR 0x00000010L The sound specified as the Windows Critical Stop sound. MB_ICONHAND 0x00000010L See MB_ICONERROR. MB_ICONINFORMATION 0x00000040L The sound specified as the Windows Asterisk sound. MB_ICONQUESTION 0x00000020L The sound specified as the Windows Question sound. MB_ICONSTOP 0x00000010L See MB_ICONERROR. MB_ICONWARNING 0x00000030L The sound specified as the Windows Exclamation sound. MB_OK 0x00000000L The sound specified as the Windows Default Beep sound.",
 "RtlLookupFunctionEntry": "The virtual address of an instruction bundle within the function.",
 "RtlNtStatusToDosError": "The NTSTATUS code to be converted.",
 "RtlPcToFileHeader": "The PC value. The function searches all modules mapped into the address space of the calling process for a module that contains this value.",
 "RtlUnwind": "A pointer to the call frame that is the target of the unwind. If this parameter is NULL, the function performs an exit unwind.",
 "RtlUnwind2": "A pointer to the call frame that is the target of the unwind. If this parameter is NULL, the function performs an exit unwind.",
 "RtlUnwindEx": "A pointer to the call frame that is the target of the unwind. If this parameter is NULL, the function performs an exit unwind.",
 "RtlVirtualUnwind": "The handler type. This parameter can be one of the following values. This parameter is only present on x64. ValueMeaning UNW_FLAG_NHANDLER 0x0 The function has no handler. UNW_FLAG_EHANDLER 0x1 The function has an exception handler that should be called. UNW_FLAG_UHANDLER 0x2 The function has a termination handler that should be called when unwinding an exception. UNW_FLAG_CHAININFO 0x4 The FunctionEntry member is the contents of a previous function table entry.",
 "SetErrorMode": "The process error mode. This parameter can be one or more of the following values. ValueMeaning 0 Use the system default, which is to display all error dialog boxes. SEM_FAILCRITICALERRORS 0x0001 The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling process. Best practice is that all applications call the process-wide SetErrorMode function with a parameter of SEM_FAILCRITICALERRORS at startup. This is to prevent error mode dialogs from hanging the application. SEM_NOALIGNMENTFAULTEXCEPT 0x0004 The system automatically fixes memory alignment faults and makes them invisible to the application. It does this for the calling process and any descendant processes. This feature is only supported by certain processor architectures. For more information, see the Remarks section. \t\t\t\t\t\t\t\t After this value is set for a process, subsequent attempts to clear the value are ignored. SEM_NOGPFAULTERRORBOX 0x0002 The system does not display the Windows Error Reporting dialog. SEM_NOOPENFILEERRORBOX 0x8000 The OpenFile function does not display a message box when it fails to find a file. Instead, the error is returned to the caller. This error mode overrides the OF_PROMPT flag.",
 "SetLastError": "The last-error code for the thread.",
 "SetLastErrorEx": "The last-error code for the thread.",
 "SetThreadErrorMode": "The thread error mode. This parameter can be one or more of the following values. ValueMeaning 0 Use the system default, which is to display all error dialog boxes. SEM_FAILCRITICALERRORS 0x0001 The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling thread. Best practice is that all applications call the process-wide SetErrorMode function with a parameter of SEM_FAILCRITICALERRORS at startup. This is to prevent error mode dialogs from hanging the application. SEM_NOGPFAULTERRORBOX 0x0002 The system does not display the Windows Error Reporting dialog. SEM_NOOPENFILEERRORBOX 0x8000 The OpenFile function does not display a message box when it fails to find a file. Instead, the error is returned to the caller. This error mode overrides the OF_PROMPT flag.",
 "NetAlertRaise": "A pointer to a constant string that specifies the alert class (type of alert) to raise. This parameter can be one of the following predefined values, or a user-defined alert class for network applications. The event name for an alert can be any text string. NameMeaning ALERT_ADMIN_EVENT An administrator's intervention is required. ALERT_ERRORLOG_EVENT An entry was added to the error log. ALERT_MESSAGE_EVENT A user or application received a broadcast message. ALERT_PRINT_EVENT A print job completed or a print error occurred. ALERT_USER_EVENT An application or resource was used.",
 "NetAlertRaiseEx": "A pointer to a constant string that specifies the alert class (type of alert) to raise. This parameter can be one of the following predefined values, or a user-defined alert class for network applications. (The event name for an alert can be any text string.) NameMeaning ALERT_ADMIN_EVENT An administrator's intervention is required. ALERT_ERRORLOG_EVENT An entry was added to the error log. ALERT_MESSAGE_EVENT A user or application received a broadcast message. ALERT_PRINT_EVENT A print job completed or a print error occurred. ALERT_USER_EVENT An application or resource was used.",
 "NetApiBufferAllocate": "Number of bytes to be allocated.",
 "NetApiBufferFree": "A pointer to a buffer returned previously by another network management function or memory allocated by calling the NetApiBufferAllocate function.",
 "NetApiBufferReallocate": "Pointer to the buffer returned by a call to the NetApiBufferAllocate function.",
 "NetApiBufferSize": "Pointer to a buffer returned by the NetApiBufferAllocate function.",
 "NetFreeAadJoinInformation": "Pointer to the DSREG_JOIN_INFO structure for which you want to free the memory.",
 "NetGetAadJoinInformation": "The tenant identifier for the joined account. If the device is not joined to Azure Active Directory (Azure AD), and the user currently logged into Windows added no Azure AD work accounts for the specified tenant, the buffer that the ppJoinInfo parameter points to is set to NULL. If the specified tenant ID is NULL or empty, ppJoinInfo is set to the default join account information, or NULL if the device is not joined to Azure AD and the current user added no Azure AD work accounts. The default join account is one of the following: The Azure AD account, if the device is joined to Azure AD. The Azure AD work account that the current user added, if the device is not joined to Azure AD, but the current user added a single Azure AD work account. Any of the Azure AD work accounts that the current user added, if the device is not joined to Azure AD, but the current user added multiple Azure AD work accounts. The algorithm for selecting one of the work accounts is not specified.",
 "NetAddAlternateComputerName": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used.",
 "NetProvisionComputerAccount": "A pointer to a NULL-terminated character string that specifies the name of the domain where the computer account is created.",
 "NetEnumerateComputerNames": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used.",
 "NetGetJoinableOUs": "Pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used.",
 "NetGetJoinInformation": "Pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used.",
 "NetJoinDomain": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to execute the domain join operation. If this parameter is NULL, the local computer is used.",
 "NetLogonSetServiceBits": "A pointer to a null-terminated string that specifies the name of the domain controller. If this parameter is NULL, the local computer is used.",
 "NetRemoveAlternateComputerName": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used.",
 "NetRenameMachineInDomain": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used.",
 "NetRequestOfflineDomainJoin": "A pointer to a buffer required to initialize the registry of a Windows operating system image to process the final local state change during the completion phase of the offline domain join operation. The opaque binary blob of serialized metadata passed in the pProvisionBinData parameter is returned by the NetProvisionComputerAccount function.",
 "NetRequestProvisioningPackageInstall": "A pointer to a buffer required to initialize the registry of a Windows operating system image to process the final local state change during the completion phase of the offline domain join operation. The opaque binary blob of serialized metadata passed in the pPackageBinData parameter is returned by the NetCreateProvisioningPackage function.",
 "NetSetPrimaryComputerName": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used.",
 "NetUnjoinDomain": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetValidateName": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used.",
 "NetGetAnyDCName": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. For more information, see the following Remarks section.",
 "NetGetDCName": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGetDisplayInformationIndex": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetQueryDisplayInformation": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupAdd": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupAddUser": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupDel": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupDelUser": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupEnum": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupGetInfo": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupGetUsers": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupSetInfo": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetGroupSetUsers": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupAdd": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupAddMembers": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupDel": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupDelMembers": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupEnum": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupGetInfo": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupGetMembers": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupSetInfo": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetLocalGroupSetMembers": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetMessageBufferSend": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetMessageNameAdd": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetMessageNameDel": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetMessageNameEnum": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetMessageNameGetInfo": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetFileClose": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE is defined.",
 "NetFileEnum": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE is defined.",
 "NetFileGetInfo": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE is defined.",
 "NetRemoteComputerSupports": "Pointer to a constant string that specifies the name of the remote server to query. If this parameter is NULL, the local computer is used.",
 "NetRemoteTOD": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetScheduleJobAdd": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetScheduleJobDel": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetScheduleJobEnum": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetScheduleJobGetInfo": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "GetNetScheduleAccountInformation": "A NULL-terminated wide character string for the name of the computer whose account information is being retrieved.",
 "SetNetScheduleAccountInformation": "A NULL-terminated wide character string for the name of the computer whose account information is being set.",
 "NetServerDiskEnum": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerEnum": "Reserved; must be NULL.",
 "NetServerGetInfo": "Pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerSetInfo": "Pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerComputerNameAdd": "Pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerTransportEnum": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerTransportAddEx": "A pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerComputerNameDel": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerTransportAdd": "A pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetServerTransportDel": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetWkstaTransportEnum": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUseAdd": "The UNC name of the computer on which to execute this function. If this parameter is NULL, then the local computer is used. If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE are defined.",
 "NetUseDel": "The UNC name of the computer on which to execute this function. If this is parameter is NULL, then the local computer is used. If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE are defined.",
 "NetUseEnum": "The UNC name of the computer on which to execute this function. If this is parameter is NULL, then the local computer is used. If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE are defined.",
 "NetUseGetInfo": "The UNC name of computer on which to execute this function. If this is parameter is NULL, then the local computer is used. If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE are defined.",
 "NetUserAdd": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE are defined.",
 "NetUserChangePassword": "A pointer to a constant string that specifies the DNS or NetBIOS name of a remote server or domain on which the function is to execute. If this parameter is NULL, the logon domain of the caller is used.",
 "NetUserDel": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUserEnum": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUserGetGroups": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUserGetInfo": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUserGetLocalGroups": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUserSetGroups": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUserSetInfo": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetUserModalsGet": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. For more information, see the following Remarks section.",
 "NetUserModalsSet": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetValidatePasswordPolicyFree": "Pointer to the memory allocated for the OutputArg parameter by a call to the NetValidatePasswordPolicy function.",
 "NetValidatePasswordPolicy": "A pointer to a constant Unicode string specifying the name of the remote server on which the function is to execute. This string must begin with \\\\ followed by the remote server name. If this parameter is NULL, the local computer is used.",
 "NetWkstaGetInfo": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetWkstaSetInfo": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetWkstaUserEnum": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetWkstaUserGetInfo": "This parameter must be set to NULL.",
 "NetWkstaUserSetInfo": "This parameter must be set to zero.",
 "AbortDoc": "Handle to the device context for the print job.",
 "StartDoc": "A handle to the device context for the print job.",
 "AbortProc": "A handle to the device context for the print job.",
 "SetAbortProc": "Handle to the device context for the print job.",
 "EndDoc": "Handle to the device context for the print job.",
 "EndPage": "A handle to the device context for the print job.",
 "Escape": "A handle to the device context.",
 "ExtEscape": "A handle to the device context.",
 "IsWindowRedirectedForPrint": "The handle of the window.",
 "PrintWindow": "A handle to the window that will be copied.",
 "StartPage": "A handle to the device context for the print job.",
 "GetAdapterIndex": "A pointer to a Unicode string that specifies the name of the adapter.",
 "GetAdaptersAddresses": "The address family of the addresses to retrieve. This parameter must be one of the following values. ValueMeaning AF_UNSPEC 0 Return both IPv4 and IPv6 addresses associated with adapters with IPv4 or IPv6 enabled. AF_INET 2 Return only IPv4 addresses associated with adapters with IPv4 enabled. AF_INET6 23 Return only IPv6 addresses associated with adapters with IPv6 enabled.",
 "GetAdaptersInfo": "A pointer to a buffer that receives a linked list of IP_ADAPTER_INFO structures.",
 "GetPerAdapterInfo": "Index of an interface. The GetPerAdapterInfo function retrieves information for the adapter corresponding to this interface.",
 "GetUniDirectionalAdapterInfo": "Pointer to an IP_UNIDIRECTIONAL_ADAPTER_ADDRESS structure that receives information about the unidirectional adapters installed on the local computer.",
 "CreateIpNetEntry": "A pointer to a MIB_IPNETROW structure that specifies information for the new entry. The caller must specify values for all members of this structure.",
 "CreateProxyArpEntry": "The IPv4 address for which this computer acts as a proxy.",
 "DeleteIpNetEntry": "A pointer to a MIB_IPNETROW structure. The information in this structure specifies the entry to delete. The caller must specify values for at least the dwIndex and dwAddr members of this structure.",
 "DeleteProxyArpEntry": "The IPv4 address for which this computer is acting as a proxy.",
 "FlushIpNetTable": "The index of the interface for which to delete all ARP entries.",
 "GetIpNetTable": "A pointer to a buffer that receives the IPv4 to physical address mapping table as a MIB_IPNETTABLE structure.",
 "SendARP": "The destination IPv4 address, in the form of an IPAddr structure. The ARP request attempts to obtain the physical address that corresponds to this IPv4 address.",
 "SetIpNetEntry": "A pointer to a MIB_IPNETROW structure. The information in this structure specifies the entry to modify and the new information for the entry. The caller must specify values for all members of this structure.",
 "ConvertInterfaceAliasToLuid": "A pointer to a NULL-terminated Unicode string containing the alias name of the network interface.",
 "ConvertInterfaceGuidToLuid": "A pointer to a GUID for a network interface.",
 "ConvertInterfaceIndexToLuid": "The local index value for a network interface.",
 "ConvertInterfaceLuidToAlias": "A pointer to a NET_LUID for a network interface.",
 "ConvertInterfaceLuidToGuid": "A pointer to a NET_LUID for a network interface.",
 "ConvertInterfaceLuidToIndex": "A pointer to a NET_LUID for a network interface.",
 "ConvertInterfaceLuidToNameA": "A pointer to a NET_LUID for a network interface.",
 "ConvertInterfaceLuidToNameW": "A pointer to a NET_LUID for a network interface.",
 "ConvertInterfaceNameToLuidA": "A pointer to a NULL-terminated ANSI string containing the network interface name.",
 "ConvertInterfaceNameToLuidW": "A pointer to a NULL-terminated Unicode string containing the network interface name.",
 "if_indextoname": "The local index for a network interface.",
 "if_nametoindex": "A pointer to a NULL-terminated ANSI string containing the interface name.",
 "GetFriendlyIfIndex": "The interface index from which the backward-compatible or \"friendly\" interface index is derived.",
 "GetIfEntry": "A pointer to a MIB_IFROW structure that, on successful return, receives information for an interface on the local computer. On input, set the dwIndex member of MIB_IFROW to the index of the interface for which to retrieve information. The value for the dwIndex must be retrieved by a previous call to the GetIfTable, GetIfTable2, or GetIfTable2Ex function.",
 "GetIfEntry2": "A pointer to a MIB_IF_ROW2 structure that, on successful return, receives information for an interface on the local computer. On input, the InterfaceLuid or the InterfaceIndex member of the MIB_IF_ROW2 must be set to the interface for which to retrieve information.",
 "GetIfEntry2Ex": "The level of interface information to retrieve. This parameter can be one of the values from the MIB_IF_ENTRY_LEVEL enumeration type defined in the Netioapi.h header file. ValueMeaning MibIfEntryNormal 0 The values of statistics and state returned in members of the MIB_IF_ROW2 structure pointed to by the Row parameter are returned from the top of the filter stack. MibIfEntryNormalWithoutStatistics 2 The values of state (without statistics) returned in members of the MIB_IF_ROW2 structure pointed to by the Row parameter are returned from the top of the filter stack.",
 "GetIfStackTable": "A pointer to a buffer that receives the table of interface stack row entries in a MIB_IFSTACK_TABLE structure.",
 "GetIfTable": "A pointer to a buffer that receives the interface table as a MIB_IFTABLE structure.",
 "GetIfTable2": "A pointer to a buffer that receives the table of interfaces in a MIB_IF_TABLE2 structure.",
 "GetIfTable2Ex": "The level of interface information to retrieve. This parameter can be one of the values from the MIB_IF_TABLE_LEVEL enumeration type defined in the Netioapi.h header file. ValueMeaning MibIfTableNormal The values of statistics and state returned in members of the MIB_IF_ROW2 structure in the MIB_IF_TABLE2 structure pointed to by the Table parameter are returned from the top of the filter stack when this parameter is specified. MibIfTableRaw The values of statistics and state returned in members of the MIB_IF_ROW2 structure in the MIB_IF_TABLE2 structure pointed to by the Table parameter are returned directly for the interface being queried.",
 "GetInterfaceInfo": "A pointer to a buffer that specifies an IP_INTERFACE_INFO structure that receives the list of adapters. This buffer must be allocated by the caller.",
 "GetInvertedIfStackTable": "A pointer to a buffer that receives the table of inverted interface stack row entries in a MIB_INVERTEDIFSTACK_TABLE structure.",
 "GetIpInterfaceEntry": "A pointer to a MIB_IPINTERFACE_ROW structure that, on successful return, receives information for an interface on the local computer. On input, the InterfaceLuid or InterfaceIndex member of the MIB_IPINTERFACE_ROW must be set to the interface for which to retrieve information.",
 "GetIpInterfaceTable": "The address family of IP interfaces to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On Windows Vista and later as well as on the Windows SDK, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, the GetIpInterfaceTable function returns the IP interface table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family.",
 "GetNumberOfInterfaces": "Pointer to a DWORD variable that receives the number of interfaces on the local computer.",
 "InitializeIpInterfaceEntry": "A pointer to a MIB_IPINTERFACE_ROW structure to initialize. On successful return, the fields in this parameter are initialized with default information for an interface on the local computer.",
 "SetIfEntry": "A pointer to a MIB_IFROW structure. The dwIndex member of this structure specifies the interface on which to set administrative status. The dwAdminStatus member specifies the new administrative status. The dwAdminStatus member can be one of the following values. ValueMeaning MIB_IF_ADMIN_STATUS_UP The interface is administratively enabled. MIB_IF_ADMIN_STATUS_DOWN The interface is administratively disabled.",
 "SetIpInterfaceEntry": "A pointer to a MIB_IPINTERFACE_ROW structure entry for an interface. On input, the Family member of the MIB_IPINTERFACE_ROW must be set to AF_INET6 or AF_INET and the InterfaceLuid or the InterfaceIndex member of the MIB_IPINTERFACE_ROW must be specified. On a successful return, the InterfaceLuid member of the MIB_IPINTERFACE_ROW is filled in if InterfaceIndex member of the MIB_IPINTERFACE_ROW entry was specified.",
 "GetIcmpStatistics": "A pointer to a MIB_ICMP structure that receives the ICMP statistics for the local computer.",
 "GetIpStatistics": "A pointer to a MIB_IPSTATS structure that receives the IP statistics for the local computer.",
 "Icmp6CreateFile": null,
 "Icmp6ParseReplies": "A pointer to the buffer passed to the Icmp6SendEcho2 function. This parameter is points to an ICMPV6_ECHO_REPLY structure to hold the response.",
 "Icmp6SendEcho2": "The open handle returned by Icmp6CreateFile.",
 "IcmpCloseHandle": "The handle to close. This handle must have been returned by a call to IcmpCreateFile or Icmp6CreateFile.",
 "IcmpCreateFile": null,
 "IcmpParseReplies": "The buffer passed to IcmpSendEcho2. This is rewritten to hold an array of ICMP_ECHO_REPLY structures, its type is PICMP_ECHO_REPLY. On a 64-bit plaform, this buffer is rewritten to hold an array of ICMP_ECHO_REPLY32 structures, its type is PICMP_ECHO_REPLY32.",
 "IcmpSendEcho": "The open handle returned by the IcmpCreateFile function.",
 "IcmpSendEcho2": "The open handle returned by the ICMPCreateFile function.",
 "IcmpSendEcho2Ex": "An open handle returned by the ICMPCreateFile function.",
 "SetIpTTL": "The new TTL value for the local computer.",
 "AddIPAddress": "The IPv4 address to add to the adapter, in the form of an IPAddr structure.",
 "CreateAnycastIpAddressEntry": "A pointer to a MIB_ANYCASTIPADDRESS_ROW structure entry for an anycast IP address entry.",
 "CreateUnicastIpAddressEntry": "A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for a unicast IP address entry.",
 "DeleteIPAddress": "The Net Table Entry (NTE) context for the IP address. This context was returned by the previous call to AddIPAddress.",
 "DeleteAnycastIpAddressEntry": "A pointer to a MIB_ANYCASTIPADDRESS_ROW structure entry for an existing anycast IP address entry to delete from the local computer.",
 "DeleteUnicastIpAddressEntry": "A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for an existing unicast IP address entry to delete from the local computer.",
 "GetAnycastIpAddressEntry": "A pointer to a MIB_ANYCASTIPADDRESS_ROW structure entry for an anycast IP address entry. On successful return, this structure will be updated with the properties for an existing anycast IP address.",
 "GetAnycastIpAddressTable": "The address family to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function returns the anycast IP address table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the anycast IP address table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the anycast IP address table containing only IPv6 entries.",
 "GetIpAddrTable": "A pointer to a buffer that receives the interface–to–IPv4 address mapping table as a MIB_IPADDRTABLE structure. ...",
 "GetMulticastIpAddressEntry": "A pointer to a MIB_MULTICASTIPADDRESS_ROW structure entry for a multicast IP address entry. On successful return, this structure will be updated with the properties for an existing multicast IP address.",
 "GetMulticastIpAddressTable": "The address family to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function returns the multicast IP address table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the multicast IP address table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the multicast IP address table containing only IPv6 entries.",
 "GetUnicastIpAddressEntry": "A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for a unicast IP address entry. On successful return, this structure will be updated with the properties for an existing unicast IP address.",
 "GetUnicastIpAddressTable": "The address family to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function returns the unicast IP address table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the unicast IP address table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the unicast IP address table containing only IPv6 entries.",
 "InitializeUnicastIpAddressEntry": "On entry, a pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for a unicast IP address entry. On return, the MIB_UNICASTIPADDRESS_ROW structure pointed to by this parameter is initialized with default values for a unicast IP address.",
 "IpReleaseAddress": "A pointer to an IP_ADAPTER_INDEX_MAP structure that specifies the adapter associated with the IPv4 address to release.",
 "IpRenewAddress": "A pointer to an IP_ADAPTER_INDEX_MAP structure that specifies the adapter associated with the IP address to renew.",
 "NotifyStableUnicastIpAddressTable": "The address family to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, the function retrieves the stable unicast IP address table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, the function retrieves the stable unicast IP address table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, the function retrieves the stable unicast IP address table containing only IPv6 entries.",
 "SetUnicastIpAddressEntry": "A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for an existing unicast IP address entry.",
 "RtlIpv4AddressToString": "The IPv4 address in network byte order.",
 "RtlIpv4AddressToStringEx": "The IPv4 address in network byte order.",
 "RtlIpv4StringToAddress": "A pointer to a buffer containing the NULL-terminated string representation of the IPv4 address.",
 "RtlIpv4StringToAddressEx": "A pointer to a buffer containing the NULL-terminated string representation of the IPv4 address followed by an optional colon and string representation of a port number.",
 "RtlIpv6AddressToString": "The IPv6 address in network byte order.",
 "RtlIpv6AddressToStringEx": "The IPv6 address in network byte order.",
 "RtlIpv6StringToAddress": "A pointer to a buffer containing the NULL-terminated string representation of the IPv6 address.",
 "RtlIpv6StringToAddressEx": "A pointer to a buffer containing the NULL-terminated string representation of the IPv6 address, scope ID, and port number.",
 "CreateIpNetEntry2": "A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry.",
 "DeleteIpNetEntry2": "A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry. On successful return, this entry will be deleted.",
 "FlushIpNetTable2": "The address family to flush. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function flushes the neighbor IP address table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function flushes the neighbor IP address table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function flushes the neighbor IP address table containing only IPv6 entries.",
 "GetIpNetEntry2": "A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry. On successful return, this structure will be updated with the properties for neighbor IP address.",
 "GetIpNetTable2": "The address family to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function returns the neighbor IP address table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the neighbor IP address table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the neighbor IP address table containing only IPv6 entries.",
 "ResolveIpNetEntry2": "A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry. On successful return, this structure will be updated with the properties for neighbor IP address.",
 "ResolveNeighbor": "A pointer to a SOCKADDR structure that contains the neighbor IP address entry and address family.",
 "SetIpNetEntry2": "A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry.",
 "FlushIpPathTable": "The address family to flush. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function flushes the IP path table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function flushes the IP path table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function flushes the IP path table containing only IPv6 entries.",
 "GetIpPathEntry": "A pointer to a MIB_IPPATH_ROW structure entry for a IP path entry. On successful return, this structure will be updated with the properties for IP path entry.",
 "GetIpPathTable": "The address family to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function returns the IP path table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the IP path table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the IP path table containing only IPv6 entries.",
 "CreateIpForwardEntry": "A pointer to a MIB_IPFORWARDROW structure that specifies the information for the new route. The caller must specify values for all members of this structure. The caller must specify MIB_IPPROTO_NETMGMT for the dwForwardProto member of MIB_IPFORWARDROW.",
 "CreateIpForwardEntry2": "A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry.",
 "DeleteIpForwardEntry": "A pointer to an MIB_IPFORWARDROW structure. This structure specifies information that identifies the route to delete. The caller must specify values for the dwForwardIfIndex, dwForwardDest, dwForwardMask, dwForwardNextHop, and dwForwardProto members of the structure.",
 "DeleteIpForwardEntry2": "A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. On successful return, this entry will be deleted.",
 "EnableRouter": "A pointer to a handle. This parameter is currently unused.",
 "GetBestInterface": "The destination IPv4 address for which to retrieve the interface that has the best route, in the form of an IPAddr structure.",
 "GetBestInterfaceEx": "The destination IPv6 or IPv4 address for which to retrieve the interface with the best route, in the form of a sockaddr structure.",
 "GetBestRoute": "Destination IP address for which to obtain the best route.",
 "GetBestRoute2": "The locally unique identifier (LUID) to specify the network interface associated with an IP route entry.",
 "GetIpForwardEntry2": "A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. On successful return, this structure will be updated with the properties for the IP route entry.",
 "GetIpForwardTable": "A pointer to a buffer that receives the IPv4 routing table as a MIB_IPFORWARDTABLE structure.",
 "GetIpForwardTable2": "The address family to retrieve. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function returns the IP routing table containing both IPv4 and IPv6 entries. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the IP routing table containing only IPv4 entries. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the IP routing table containing only IPv6 entries.",
 "GetRTTAndHopCount": "IP address of the destination for which to determine the RTT and hop count, in the form of an IPAddr structure.",
 "InitializeIpForwardEntry": "On entry, a pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. On return, the MIB_IPFORWARD_ROW2 structure pointed to by this parameter is initialized with default values for an IP route entry.",
 "SetIpForwardEntry": "A pointer to a MIB_IPFORWARDROW structure that specifies the new information for the existing route. The caller must specify MIB_IPPROTO_NETMGMT for the dwForwardProto member of this structure. The caller must also specify values for the dwForwardIfIndex, dwForwardDest, dwForwardMask, dwForwardNextHop, and dwForwardPolicy members of the structure.",
 "SetIpForwardEntry2": "A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. The DestinationPrefix member of the MIB_IPFORWARD_ROW2 must be set to a valid IP destination prefix, the NextHop member of the MIB_IPFORWARD_ROW2 must be set to a valid IP address family and IP address, and the InterfaceLuid or the InterfaceIndex member of the MIB_IPFORWARD_ROW2 must be specified.",
 "SetIpStatistics": "A pointer to a MIB_IPSTATS structure. The caller should set the dwForwarding and dwDefaultTTL members of this structure to the new values. To keep one of the members at its current value, use MIB_USE_CURRENT_TTL or MIB_USE_CURRENT_FORWARDING.",
 "SetIpStatisticsEx": "A pointer to a MIB_IPSTATS structure. The caller should set the dwForwarding and dwDefaultTTL members of this structure to the new values. To keep one of the members at its current value, use MIB_USE_CURRENT_TTL or MIB_USE_CURRENT_FORWARDING.",
 "UnenableRouter": "A pointer to an OVERLAPPED structure. This structure should be the same as the one used in the call to the EnableRouter function.",
 "FreeMibTable": "A pointer to the buffer to free.",
 "ConvertIpv4MaskToLength": "The IPv4 subnet mask.",
 "ConvertLengthToIpv4Mask": "The IPv4 prefix length, in bits.",
 "CreateSortedAddressPairs": "Must be NULL. Reserved for future use.",
 "ParseNetworkString": "A pointer to the NULL-terminated network string to parse.",
 "GetNetworkParams": "A pointer to a buffer that contains a FIXED_INFO structure that receives the network parameters for the local computer, if the function was successful. This buffer must be allocated by the caller prior to calling the GetNetworkParams function.",
 "CancelMibChangeNotify2": "The handle returned from a notification registration or retrieval function to indicate which notification to cancel.",
 "NotifyAddrChange": "A pointer to a HANDLE variable that receives a file handle for use in a subsequent call to the GetOverlappedResult function. Warning Do not close this handle, and do not associate it with a completion port.",
 "NotifyIpInterfaceChange": "The address family on which to register for change notifications. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_UNSPEC 0 The address family is unspecified. When this parameter is specified, this function registers for both IPv4 and IPv6 change notifications. AF_INET 2 The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function register for only IPv4 change notifications. AF_INET6 23 The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function registers for only IPv6 change notifications.",
 "NotifyRouteChange": "A pointer to a HANDLE variable that receives a handle to use in asynchronous notification.",
 "NotifyRouteChange2": "The address family on which to register for change notifications. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_INET Register for only IPv4 route change notifications. AF_INET6 Register for only IPv6 route change notifications. AF_UNSPEC Register for both IPv4 and IPv6 route change notifications.",
 "NotifyUnicastIpAddressChange": "The address family on which to register for change notifications. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so either constant can be used. On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly. The values currently supported are AF_INET, AF_INET6, and AF_UNSPEC. ValueMeaning AF_INET Register for only unicast IPv4 address change notifications. AF_INET6 Register for only unicast IPv6 address change notifications. AF_UNSPEC Register for both unicast IPv4 and IPv6 address change notifications.",
 "CreatePersistentTcpPortReservation": "The starting TCP port number in network byte order.",
 "CreatePersistentUdpPortReservation": "The starting UDP port number in network byte order.",
 "DeletePersistentTcpPortReservation": "The starting TCP port number in network byte order.",
 "DeletePersistentUdpPortReservation": "The starting UDP port number in network byte order.",
 "LookupPersistentTcpPortReservation": "The starting TCP port number in network byte order.",
 "LookupPersistentUdpPortReservation": "The starting UDP port number in network byte order.",
 "CancelSecurityHealthChangeNotify": "A pointer to an OVERLAPPED structure returned by the NotifySecurityHealthChange function.",
 "NotifySecurityHealthChange": "A pointer to a HANDLE variable if the function is to be called asynchronously. On input when used asynchronously, this parameter should point to a HANDLE variable that receives a file handle for use in a subsequent call to the GetOverlappedResult function. The NotifySecurityHealthChange function will fill in the handle to use when the call is made asynchronously. On successful output when used asynchronously, this parameter will point to the HANDLE that was used. If the function fails, this parameter will point to an invalid handle. Warning if the function is successful, do not close this handle and do not associate it with a completion port. If the pHandle and pOverLapped parameters are NULL, then the function call is synchronous.",
 "GetTeredoPort": "A pointer to the UDP port number. On successful return, this parameter will be filled with the port number used by the Teredo client.",
 "NotifyTeredoPortChange": "A pointer to the function to call when a Teredo client port change occurs. This function will be invoked when a Teredo port change notification is received.",
 "GetExtendedTcpTable": "A pointer to the table structure that contains the filtered TCP endpoints available to the application. For information about how to determine the type of table returned based on specific input parameter combinations, see the Remarks section later in this document.",
 "GetExtendedUdpTable": "A pointer to the table structure that contains the filtered UDP endpoints available to the application. For information about how to determine the type of table returned based on specific input parameter combinations, see the Remarks section later in this document.",
 "GetOwnerModuleFromTcp6Entry": "A pointer to a MIB_TCP6ROW_OWNER_MODULE structure that contains the IPv6 TCP endpoint entry used to obtain the owner module.",
 "GetOwnerModuleFromTcpEntry": "A pointer to a MIB_TCPROW_OWNER_MODULE structure that contains the IPv4 TCP endpoint entry used to obtain the owner module.",
 "GetOwnerModuleFromUdp6Entry": "A pointer to a MIB_UDP6ROW_OWNER_MODULE structure that contains the IPv6 UDP endpoint entry used to obtain the owner module.",
 "GetOwnerModuleFromUdpEntry": "A pointer to a MIB_UDPROW_OWNER_MODULE structure that contains the IPv4 UDP endpoint entry used to obtain the owner module.",
 "GetPerTcp6ConnectionEStats": "A pointer to a MIB_TCP6ROW structure for an IPv6 TCP connection.",
 "GetPerTcpConnectionEStats": "A pointer to a MIB_TCPROW structure for an IPv4 TCP connection.",
 "GetTcpStatistics": "A pointer to a MIB_TCPSTATS structure that receives the TCP statistics for the local computer.",
 "GetTcpStatisticsEx": "A pointer to a MIB_TCPSTATS structure that receives the TCP statistics for the local computer.",
 "GetTcp6Table": "A pointer to a buffer that receives the TCP connection table for IPv6 as a MIB_TCP6TABLE structure.",
 "GetTcp6Table2": "A pointer to a buffer that receives the TCP connection table for IPv6 as a MIB_TCP6TABLE2 structure.",
 "GetTcpTable": "A pointer to a buffer that receives the TCP connection table as a MIB_TCPTABLE structure.",
 "GetTcpTable2": "A pointer to a buffer that receives the TCP connection table as a MIB_TCPTABLE2 structure.",
 "SetPerTcp6ConnectionEStats": "A pointer to a MIB_TCP6ROW structure for an IPv6 TCP connection.",
 "SetPerTcpConnectionEStats": "A pointer to a MIB_TCPROW structure for an IPv4 TCP connection.",
 "SetTcpEntry": "A pointer to a MIB_TCPROW structure. This structure specifies information to identify the TCP connection to modify. It also specifies the new state for the TCP connection. The caller must specify values for all the members in this structure.",
 "GetUdp6Table": "A pointer to a buffer that receives the IPv6 UDP listener table as a MIB_UDP6TABLE structure.",
 "GetUdpStatistics": "Pointer to a MIB_UDPSTATS structure that receives the UDP statistics for the local computer.",
 "GetUdpStatisticsEx": "A pointer to a MIB_UDPSTATS structure that receives the UDP statistics for the local computer.",
 "GetUdpTable": "A pointer to a buffer that receives the IPv4 UDP listener table as a MIB_UDPTABLE structure.",
 "AllocateAndGetTcpExTableFromStack": "Pointer to the address of the opaque data that contains the TCP connection table after the function returns.",
 "AllocateAndGetUdpExTableFromStack": "Pointer to the address of the opaque data that contains the UDP connection table after the function returns.",
 "BackupEventLog": "A handle to the open event log. The OpenEventLog function returns this handle.",
 "ClearEventLog": "A handle to the event log to be cleared. The OpenEventLog function returns this handle.",
 "CloseEventLog": "A handle to the event log to be closed. The OpenEventLog or OpenBackupEventLog function returns this handle.",
 "DeregisterEventSource": "A handle to the event log. The RegisterEventSource function returns this handle.",
 "GetEventLogInformation": "A handle to the event log. The OpenEventLog or RegisterEventSource function returns this handle.",
 "GetNumberOfEventLogRecords": "A handle to the open event log. The OpenEventLog or OpenBackupEventLog function returns this handle.",
 "GetOldestEventLogRecord": "A handle to the open event log. The OpenEventLog or OpenBackupEventLog function returns this handle.",
 "NotifyChangeEventLog": "A handle to an event log. The OpenEventLog function returns this handle.",
 "OpenBackupEventLog": "The Universal Naming Convention (UNC) name of the remote server on which this operation is to be performed. If this parameter is NULL, the local computer is used.",
 "OpenEventLog": "The Universal Naming Convention (UNC) name of the remote server on which the event log is to be opened. If this parameter is NULL, the local computer is used.",
 "ReadEventLog": "A handle to the event log to be read. The OpenEventLog function returns this handle.",
 "RegisterEventSource": "The Universal Naming Convention (UNC) name of the remote server on which this operation is to be performed. If this parameter is NULL, the local computer is used.",
 "ReportEvent": "A handle to the event log. The RegisterEventSource function returns this handle. As of Windows XP with SP2, this parameter cannot be a handle to the Security log. To write an event to the Security log, use the AuthzReportSecurityEvent function.",
 "BeginUpdateResource": "Type: LPCTSTR The binary file in which to update resources. An application must be able to obtain write-access to this file; the file referenced by pFileName cannot be currently executing. If pFileName does not specify a full path, the system searches for the file in the current directory.",
 "CopyImage": "Type: HANDLE A handle to the image to be copied.",
 "EndUpdateResource": "Type: HANDLE A module handle returned by the BeginUpdateResource function, and used by UpdateResource, referencing the file to be updated.",
 "EnumResLangProc": "Type: HMODULE A handle to the module whose executable file contains the resources for which the languages are being enumerated. If this parameter is NULL, the function enumerates the resource languages in the module used to create the current process.",
 "EnumResNameProc": "Type: HMODULE A handle to the module whose executable file contains the resources that are being enumerated. If this parameter is NULL, the function enumerates the resource names in the module used to create the current process.",
 "EnumResourceLanguages": "Type: HMODULE The handle to a module to be searched. Starting with Windows Vista, if this is a language-neutral Portable Executable (LN file), then appropriate .mui files (if any exist) are included in the search. If this is a specific .mui file, only that file is searched for resources. \t\t\t\t If this parameter is NULL, that is equivalent to passing in a handle to the module used to create the current process.",
 "EnumResourceLanguagesEx": "Type: HMODULE The handle to a module to search. Typically this is a language-neutral Portable Executable (LN file), and if flag RESOURCE_ENUM_MUI is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this is a specific .mui file, only that file is searched for resources. If this parameter is NULL, it is equivalent to passing in a handle to the module used to create the current process.",
 "EnumResourceNames": "Type: HMODULE A handle to a module to be searched. Starting with Windows Vista, if this is an LN file, then appropriate .mui files (if any exist) are included in the search. If this parameter is NULL, that is equivalent to passing in a handle to the module used to create the current process.",
 "EnumResourceNamesEx": "Type: HMODULE The handle to a module to search. Typically this is an LN file, and if flag RESOURCE_ENUM_MUI is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this parameter is NULL, it is equivalent to passing in a handle to the module used to create the current process.",
 "EnumResourceTypes": "Type: HMODULE A handle to a module to be searched. This handle must be obtained through LoadLibrary or LoadLibraryEx. \t\t\t\t\t See Remarks for more information. If this parameter is NULL, that is equivalent to passing in a handle to the module used to create the current process.",
 "EnumResourceTypesEx": "Type: HMODULE The handle to a module to be searched. Typically this is an LN file, and if flag RESOURCE_ENUM_MUI is set, then appropriate .mui files can be included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this parameter is NULL, it is equivalent to passing in a handle to the module used to create the current process.",
 "EnumResTypeProc": "Type: HMODULE A handle to the module whose executable file contains the resources for which the types are to be enumerated. If this parameter is NULL, the function enumerates the resource types in the module used to create the current process.",
 "FindResourceEx": "Type: HMODULE A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process.",
 "FreeResource": "Type: HGLOBAL A handle of the resource. It is assumed that hglbResource was created by LoadResource.",
 "LoadImage": "Type: HINSTANCE A handle to the module of either a DLL or executable (. ...",
 "LoadResource": "Type: HMODULE A handle to the module whose executable file contains the resource. If hModule is NULL, the system loads the resource from the module that was used to create the current process.",
 "LockResource": "Type: HGLOBAL A handle to the resource to be accessed. The LoadResource function returns this handle. Note that this parameter is listed as an HGLOBAL variable only for backward compatibility. Do not pass any value as a parameter other than a successful return value from the LoadResource function.",
 "SizeofResource": "Type: HMODULE A handle to the module whose executable file contains the resource.",
 "UpdateResource": "Type: HANDLE A module handle returned by the BeginUpdateResource function, referencing the file to be updated.",
 "GetSystemRegistryQuota": "A pointer to a variable that receives the maximum size that the registry is allowed to attain on this system, in bytes.",
 "RegCloseKey": "A handle to the open key to be closed. The handle must have been opened by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, RegOpenKeyTransacted, or RegConnectRegistry function.",
 "RegConnectRegistry": "The name of the remote computer. The string has the following form: \\\\computername The caller must have access to the remote computer or the function fails. If this parameter is NULL, the local computer name is used.",
 "RegCopyTree": "A handle to an open registry key. The key must have been opened with the KEY_READ access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the predefined keys.",
 "RegCreateKeyEx": "A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see Registry Key Security and Access Rights. Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if hKey was opened with a samDesired of KEY_READ, it can be used in operations that modify the registry if allowed by its security descriptor. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegCreateKeyTransacted": "A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see Registry Key Security and Access Rights. Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if hKey was opened with a samDesired of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor. This handle is returned by the RegCreateKeyTransacted or RegOpenKeyTransacted function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegDeleteKey": "A handle to an open registry key. The access rights of this key do not affect the delete operation. For more information about access rights, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following Predefined Keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegDeleteKeyEx": "A handle to an open registry key. The access rights of this key do not affect the delete operation. For more information about access rights, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegDeleteKeyTransacted": "A handle to an open registry key. The access rights of this key do not affect the delete operation. For more information about access rights, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegDeleteKeyValue": "A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegDeleteTree": "A handle to an open registry key. The key must have been opened with the following access rights: DELETE, KEY_ENUMERATE_SUB_KEYS, and KEY_QUERY_VALUE. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following Predefined Keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegDeleteValue": "A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegDisablePredefinedCache": null,
 "RegDisablePredefinedCacheEx": null,
 "RegDisableReflectionKey": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function; it cannot specify a key on a remote computer. If the key is not on the reflection list, the function succeeds but has no effect. For more information, see Registry Redirector and Registry Reflection.",
 "RegEnableReflectionKey": "A handle to the registry key that was previously disabled using the RegDisableReflectionKey function. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function; it cannot specify a key on a remote computer. If the key is not on the reflection list, this function succeeds but has no effect. For more information, see Registry Redirector and Registry Reflection.",
 "RegEnumKeyEx": "A handle to an open registry key. The key must have been opened with the KEY_ENUMERATE_SUB_KEYS access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "RegEnumValue": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "RegFlushKey": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "RegGetKeySecurity": "A handle to an open key for which to retrieve the security descriptor.",
 "RegGetValue": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_PERFORMANCE_NLSTEXT HKEY_PERFORMANCE_TEXT HKEY_USERS",
 "RegLoadKey": "A handle to the key where the subkey will be created. This can be a handle returned by a call to RegConnectRegistry, or one of the following predefined handles: HKEY_LOCAL_MACHINE HKEY_USERS This function always loads information at the top of the registry hierarchy. The HKEY_CLASSES_ROOT and HKEY_CURRENT_USER handle values cannot be specified for this parameter, because they represent subsets of the HKEY_LOCAL_MACHINE and HKEY_USERS handle values, respectively.",
 "RegLoadMUIString": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegNotifyChangeKeyValue": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS This parameter must be a local handle. If RegNotifyChangeKeyValue is called with a remote handle, it returns ERROR_INVALID_HANDLE. The key must have been opened with the KEY_NOTIFY access right. For more information, see Registry Key Security and Access Rights.",
 "RegOpenCurrentUser": "A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see Registry Key Security and Access Rights.",
 "RegOpenKeyEx": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegOpenKeyTransacted": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegOpenUserClassesRoot": "A handle to a primary or impersonation access token that identifies the user of interest. This can be a token handle returned by a call to LogonUser, CreateRestrictedToken, DuplicateToken, DuplicateTokenEx, OpenProcessToken, or OpenThreadToken functions. The handle must have TOKEN_QUERY access. For more information, see Access Rights for Access-Token Objects.",
 "RegOverridePredefKey": "A handle to one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "RegQueryInfoKey": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "RegQueryMultipleValues": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "RegQueryReflectionKey": "A handle to the registry key. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function; it cannot specify a key on a remote computer.",
 "RegQueryValueEx": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_PERFORMANCE_NLSTEXT HKEY_PERFORMANCE_TEXT HKEY_USERS",
 "RegReplaceKey": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegRestoreKey": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS Any information contained in this key and its descendent keys is overwritten by the information in the file pointed to by the lpFile parameter.",
 "RegSaveKey": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_USER",
 "RegSaveKeyEx": "A handle to an open registry key. This function does not support the HKEY_CLASSES_ROOT predefined key.",
 "RegSetKeyValue": "A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegSetKeySecurity": "A handle to an open key for which the security descriptor is set.",
 "RegSetValueEx": "A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS The Unicode version of this function supports the following additional predefined keys: HKEY_PERFORMANCE_TEXT HKEY_PERFORMANCE_NLSTEXT",
 "RegUnLoadKey": "A handle to the registry key to be unloaded. This parameter can be a handle returned by a call to RegConnectRegistry function or one of the following predefined handles: HKEY_LOCAL_MACHINE HKEY_USERS",
 "AssocCreate": "Type: CLSID The CLSID of the object that exposes the interface. This parameter must be set to CLSID_QueryAssociations, which is defined in Shlguid.h.",
 "AssocQueryKey": "Type: ASSOCF The flags that can be used to control the search. It can be any combination of ASSOCF values, except that only one ASSOCF_INIT value can be included.",
 "AssocQueryString": "Type: ASSOCF The flags that can be used to control the search. It can be any combination of ASSOCF values, except that only one ASSOCF_INIT value can be included.",
 "AssocQueryStringByKey": "Type: ASSOCF The flags that can be used to control the search. It can be any combination of ASSOCF values, except that only one ASSOCF_INIT value can be included.",
 "SHCopyKey": "Type: HKEY A handle to the source key (for example, HKEY_CURRENT_USER).",
 "SHDeleteEmptyKey": "Type: HKEY A handle to an open registry key, or one of the following predefined keys: HKEY_CLASSES_ROOTHKEY_CURRENT_CONFIGHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_PERFORMANCE_DATAHKEY_USERS",
 "SHDeleteKey": "Type: HKEY A handle to an open registry key, or one of the following predefined keys: HKEY_CLASSES_ROOTHKEY_CURRENT_CONFIGHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_PERFORMANCE_DATAHKEY_USERS",
 "SHDeleteValue": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "SHEnumKeyEx": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "SHEnumValue": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "SHGetValue": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "SHQueryInfoKey": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "SHQueryValueEx": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "SHRegCloseUSKey": "Type: HUSKEY A handle to a currently open registry subkey. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function.",
 "SHRegCreateUSKey": "Type: LPCTSTR A pointer to a null-terminated string that contains the subkey to be created or opened. If a value with this name is already present in the subkey, it will be opened.",
 "SHRegDeleteEmptyUSKey": "Type: HUSKEY A handle to a currently open registry subkey. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function.",
 "SHRegDeleteUSValue": "Type: HUSKEY A handle to a currently open registry subkey. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function.",
 "SHRegDuplicateHKey": "Type: HKEY The HKEY handle to be duplicated.",
 "SHRegEnumUSKey": "Type: HUSKEY A handle to a currently open registry subkey. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function.",
 "SHRegEnumUSValue": "Type: HUSKEY A handle to a currently open registry subkey. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function.",
 "SHRegGetBoolUSValue": "Type: LPCTSTR A pointer to a null-terminated string with the name of the subkey relative to HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER. For example, \"Software\\MyCompany\\MyProduct\".",
 "SHRegGetIntW": "Type: HKEY A handle to the registry key that specifies the value to be read.",
 "SHRegGetPath": "Type: HKEY A handle to a key that is currently open, or a registry root key.",
 "SHRegGetUSValue": "Type: LPCTSTR A pointer to a null-terminated string with the name of the subkey relative to HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER. For example: \"Software\\MyCompany\\MyProduct\".",
 "SHRegOpenUSKey": "Type: LPCTSTR A pointer to a null-terminated string with the name of the subkey.",
 "SHRegQueryInfoUSKey": "Type: HUSKEY A handle to a currently open registry subkey. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function.",
 "SHRegQueryUSValue": "Type: HUSKEY A handle to a currently open registry subkey, or one of the following predefined values. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "SHRegSetPath": "Type: HKEY A handle to a key that is currently open, or a registry root key.",
 "SHRegSetUSValue": "Type: LPCTSTR A pointer to a null-terminated string with the name of the subkey.",
 "SHRegWriteUSValue": "Type: HUSKEY A handle to a currently open registry subkey. The subkey must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle can be obtained through the SHRegOpenUSKey function.",
 "SHSetValue": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_PERFORMANCE_DATA HKEY_USERS",
 "GetPrivateProfileInt": "The name of the section in the initialization file.",
 "GetPrivateProfileSection": "The name of the section in the initialization file.",
 "GetPrivateProfileSectionNames": "A pointer to a buffer that receives the section names associated with the named file. The buffer is filled with one or more null-terminated strings; the last string is followed by a second null character.",
 "GetPrivateProfileString": "The name of the section containing the key name. If this parameter is NULL, the GetPrivateProfileString function copies all section names in the file to the supplied buffer.",
 "GetPrivateProfileStruct": "The name of the section in the initialization file.",
 "GetProfileInt": "The name of the section containing the key name.",
 "GetProfileSection": "The name of the section in the Win.ini file.",
 "GetProfileString": "The name of the section containing the key. If this parameter is NULL, the function copies all section names in the file to the supplied buffer.",
 "WritePrivateProfileSection": "The name of the section in which data is written. This section name is typically the name of the calling application.",
 "WritePrivateProfileString": "The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.",
 "WritePrivateProfileStruct": "The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case independent, the string can be any combination of uppercase and lowercase letters.",
 "WriteProfileSection": "The name of the section. This section name is typically the name of the calling application.",
 "WriteProfileString": "The section to which the string is to be copied. If the section does not exist, it is created. The name of the section is not case-sensitive; the string can be any combination of uppercase and lowercase letters.",
 "RegCreateKey": "A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see Registry Key Security and Access Rights. Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if hKey was opened with a samDesired of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegEnumKey": "A handle to an open registry key. The key must have been opened with the KEY_ENUMERATE_SUB_KEYS access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegOpenKey": "A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegQueryValue": "A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "RegSetValue": "A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see Registry Key Security and Access Rights. This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function. It can also be one of the following predefined keys: HKEY_CLASSES_ROOT HKEY_CURRENT_CONFIG HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS",
 "AddFontMemResourceEx": "A pointer to a font resource.",
 "AddFontResource": "A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files. File ExtensionMeaning .fon Font resource file. .fnt Raw bitmap font file. .ttf Raw TrueType file. .ttc East Asian Windows: TrueType font collection. .fot TrueType resource file. .otf PostScript OpenType font. .mmm Multiple master Type1 font resource file. It must be used with .pfm and .pfb files. .pfb Type 1 font bits file. It is used with a .pfm file. .pfm Type 1 font metrics file. It is used with a .pfb file. To add a font whose information comes from several resource files, have lpszFileName point to a string with the file names separated by a \"|\" --for example, abcxxxxx.pfm | abcxxxxx.pfb.",
 "AddFontResourceEx": "A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files. File ExtensionMeaning .fon Font resource file. .fnt Raw bitmap font file. .ttf Raw TrueType file. .ttc East Asian Windows: TrueType font collection. .fot TrueType resource file. .otf PostScript OpenType font. .mmm multiple master Type1 font resource file. It must be used with .pfm and .pfb files. .pfb Type 1 font bits file. It is used with a .pfm file. .pfm Type 1 font metrics file. It is used with a .pfb file. To add a font whose information comes from several resource files, point lpszFileName to a string with the file names separated by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.",
 "CreateFont": "The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in nHeight in the following manner. ValueMeaning > 0 The font mapper transforms this value into device units and matches it against the cell height of the available fonts. 0 The font mapper uses a default height value when it searches for a match. < 0 The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts. For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size. This mapping occurs when the font is used for the first time. For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size: C++ Copy nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);",
 "CreateFontIndirect": "A pointer to a LOGFONT structure that defines the characteristics of the logical font.",
 "CreateFontIndirectEx": "Pointer to an ENUMLOGFONTEXDV structure that defines the characteristics of a multiple master font. Note, this function ignores the elfDesignVector member in ENUMLOGFONTEXDV.",
 "DrawText": "A handle to the device context.",
 "DrawTextEx": "A handle to the device context in which to draw.",
 "EnumFontFamExProc": "A pointer to an LOGFONT structure that contains information about the logical attributes of the font. To obtain additional information about the font, you can cast the result as an ENUMLOGFONTEX or ENUMLOGFONTEXDV structure.",
 "EnumFontFamiliesEx": "A handle to the device context from which to enumerate the fonts.",
 "ExtTextOut": "A handle to the device context.",
 "GetAspectRatioFilterEx": "Handle to a device context.",
 "GetCharABCWidths": "A handle to the device context.",
 "GetCharABCWidthsFloat": "Handle to the device context.",
 "GetCharABCWidthsI": "A handle to the device context.",
 "GetCharacterPlacement": "A handle to the device context.",
 "GetCharWidth32": "A handle to the device context.",
 "GetCharWidthFloat": "A handle to the device context.",
 "GetCharWidthI": "A handle to the device context.",
 "GetFontData": "A handle to the device context.",
 "GetFontLanguageInfo": "Handle to a display device context.",
 "GetFontUnicodeRanges": "A handle to the device context.",
 "GetGlyphIndices": "A handle to the device context.",
 "GetGlyphOutline": "A handle to the device context.",
 "GetKerningPairs": "A handle to the device context.",
 "GetOutlineTextMetrics": "A handle to the device context.",
 "GetRasterizerCaps": "A pointer to a RASTERIZER_STATUS structure that receives information about the rasterizer.",
 "GetTabbedTextExtent": "A handle to the device context.",
 "GetTextAlign": "A handle to the device context.",
 "GetTextCharacterExtra": "Handle to the device context.",
 "GetTextColor": "Handle to the device context.",
 "GetTextExtentExPoint": "A handle to the device context.",
 "GetTextExtentExPointI": "A handle to the device context.",
 "GetTextExtentPoint32": "A handle to the device context.",
 "GetTextExtentPointI": "Handle to the device context.",
 "GetTextFace": "A handle to the device context.",
 "GetTextMetrics": "A handle to the device context.",
 "PolyTextOut": "A handle to the device context.",
 "RemoveFontMemResourceEx": "A handle to the font-resource. This handle is returned by the AddFontMemResourceEx function.",
 "RemoveFontResource": "A pointer to a null-terminated string that names a font resource file.",
 "RemoveFontResourceEx": "A pointer to a null-terminated string that names a font resource file.",
 "SetMapperFlags": "A handle to the device context that contains the font-mapper flag.",
 "SetTextAlign": "A handle to the device context.",
 "SetTextCharacterExtra": "A handle to the device context.",
 "SetTextColor": "A handle to the device context.",
 "SetTextJustification": "A handle to the device context.",
 "TabbedTextOut": "A handle to the device context.",
 "TextOut": "A handle to the device context.",
 "CreateScalableFontResource": "Specifies whether the font is a read-only font. This parameter can be one of the following values. ValueMeaning 0 The font has read/write permission. 1 The font has read-only permission and should be hidden from other applications in the system. When this flag is set, the font is not enumerated by the EnumFonts or EnumFontFamilies function.",
 "EnumFontFamilies": "A handle to the device context from which to enumerate the fonts.",
 "EnumFontFamProc": "A pointer to an ENUMLOGFONT structure that contains information about the logical attributes of the font. This structure is locally defined. This can be an ENUMLOGFONTEXDV structure.",
 "EnumFonts": "A handle to the device context from which to enumerate the fonts.",
 "EnumFontsProc": "A pointer to a LOGFONT structure that contains information about the logical attributes of the font. This can be an ENUMLOGFONTEXDV structure.",
 "GetCharWidth": "A handle to the device context.",
 "GetTextExtentPoint": "A handle to the device context.",
 "EnumProps": "Type: HWND A handle to the window whose property list is to be enumerated.",
 "EnumPropsEx": "Type: HWND A handle to the window whose property list is to be enumerated.",
 "GetProp": "Type: HWND A handle to the window whose property list is to be searched.",
 "PropEnumProc": "Type: HWND A handle to the window whose property list is being enumerated.",
 "PropEnumProcEx": "Type: HWND A handle to the window whose property list is being enumerated.",
 "RemoveProp": "Type: HWND A handle to the window whose property list is to be changed.",
 "SetProp": "Type: HWND A handle to the window whose property list receives the new entry.",
 "OpenThreadWaitChainSession": "The session type. This parameter can be one of the following values. ValueMeaning 0 A synchronous session. WCT_ASYNC_OPEN_FLAG An asynchronous session.",
 "GetThreadWaitChain": "A handle to the WCT session created by the OpenThreadWaitChainSession function.",
 "CloseThreadWaitChainSession": "A handle to the WCT session created by the OpenThreadWaitChainSession function.",
 "WaitChainCallback": "A handle to the WCT session created by the OpenThreadWaitChainSession function.",
 "PathAllocCanonicalize": "A pointer to a buffer that contains the original string. This value cannot be NULL.",
 "PathCchCanonicalize": "A pointer to a buffer that, when this function returns successfully, receives the canonicalized path string.",
 "PathCchCanonicalizeEx": "A pointer to a buffer that, when this function returns successfully, receives the edited path string.",
 "PathCanonicalize": "Type: LPTSTR A pointer to a string that receives the canonicalized path. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string.",
 "PathAllocCombine": "A pointer to the first path string.",
 "PathCchCombine": "A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as pszPathIn or pszMore.",
 "PathCchCombineEx": "A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as pszPathIn or pszMore.",
 "PathCombine": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the combined path string. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string.",
 "PathCchAddBackslash": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be NULL.",
 "PathAddBackslash": "Type: LPTSTR A pointer to a buffer with a string that represents a path. The size of this buffer must be set to MAX_PATH to ensure that it is large enough to hold the returned string.",
 "PathCchAddBackslashEx": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be NULL.",
 "PathCchAddExtension": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended extension. This value should not be NULL. Note If the original string already has a file name extension present, no new extension will be added and the original string will be unchanged.",
 "PathAddExtension": "Type: LPTSTR A pointer to a buffer with the null-terminated string to which the file name extension will be appended. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string.",
 "PathCchAppend": "A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path.",
 "PathCchAppendEx": "A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path.",
 "PathAppend": "Type: LPTSTR A pointer to a null-terminated string to which the path specified in pszMore is appended. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string.",
 "PathCchFindExtension": "A pointer to the path to search.",
 "PathFindExtension": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search, including the extension being searched for.",
 "PathCchIsRoot": "A pointer to the path string.",
 "PathIsRoot": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be validated.",
 "PathCchRemoveBackslash": "A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged.",
 "PathRemoveBackslash": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove the backslash.",
 "PathCchRemoveBackslashEx": "A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged.",
 "PathCchRemoveExtension": "A pointer to the path string. When this function returns successfully, the string contains the path with any extension removed. If no extension was found, the string is unchanged.",
 "PathRemoveExtension": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH from which to remove the extension.",
 "PathCchRemoveFileSpec": "A pointer to the fully-qualified path string. When this function returns successfully, the string will have had its last element and its leading backslash removed. This function does not affect root paths such as \"C:\\\". In the case of a root path, the path string is returned unaltered. If a path string ends with a trailing backslash, only that backslash is removed.",
 "PathRemoveFileSpec": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove the file name.",
 "PathCchRenameExtension": "A pointer to the path string. When this function returns successfully, this value points to the same string, but with the renamed or added extension.",
 "PathRenameExtension": "Type: LPTSTR Pointer to a null-terminated string of length MAX_PATH in which to replace the extension.",
 "PathCchSkipRoot": "A pointer to the path string.",
 "PathSkipRoot": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to parse.",
 "PathCchStripPrefix": "A pointer to the path string. When this function returns successfully, the same path string will have had the prefix removed, if the prefix was present. If no prefix was present, the string will be unchanged.",
 "PathCchStripToRoot": "A pointer to the path string. When this function returns successfully, this string contains only the root information taken from that path.",
 "PathStripToRoot": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be converted. When this function returns successfully, this string contains only the root information taken from that path.",
 "PathIsUNCEx": "A pointer to the path string.",
 "PathIsUNC": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to validate.",
 "AssocCreateForClasses": "Type: const ASSOCIATIONELEMENT* A pointer to an array of ASSOCIATIONELEMENT structures.",
 "AssocGetDetailsOfPropKey": "Type: IShellFolder* A pointer to the shell folder for which the details of the property key of the file association are being retrieved.",
 "CDefFolderMenu_Create2": "Type: PCIDLIST_ABSOLUTE An ITEMIDLIST structure for the parent folder. This value can be NULL.",
 "CIShutdown": null,
 "CommandLineToArgvW": "Type: LPCWSTR Pointer to a null-terminated Unicode string that contains the full command line. If this parameter is an empty string the function returns the path to the current executable file.",
 "CreateAppContainerProfile": "The name of the app container. To ensure uniqueness, it is recommended that this string contains the app name as well as the publisher. This string can be up to 64 characters in length. Further, it must fit into the pattern described by the regular expression \"[-_. A-Za-z0-9]+\".",
 "CreateEnvironmentBlock": "Type: LPVOID* When this function returns, receives a pointer to the new environment block. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\\0\\0).",
 "CreateProcessAsUser": "A handle to the primary token that represents a user. The handle must have the TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY access rights. For more information, see Access Rights for Access-Token Objects. The user represented by the token must have read and execute access to the application specified by the lpApplicationName or the lpCommandLine parameter. To get a primary token that represents the specified user, call the LogonUser function. Alternatively, you can call the DuplicateTokenEx function to convert an impersonation token into a primary token. This allows a server application that is impersonating a client to create a process that has the security context of the client. If hToken is a restricted version of the caller's primary token, the SE_ASSIGNPRIMARYTOKEN_NAME privilege is not required. If the necessary privileges are not already enabled, CreateProcessAsUser enables them for the duration of the call. For more information, see Running with Special Privileges. Terminal Services: The process is run in the session specified in the token. By default, this is the same session that called LogonUser. To change the session, use the SetTokenInformation function.",
 "CreateMRUListW": "Type: LPMRUINFO A pointer to an MRUINFO structure defining the MRU list.",
 "CreateProfile": "Type: LPCWSTR Pointer to the SID of the user as a string.",
 "DefScreenSaverProc": "Type: HWND The identifier of the screen saver window.",
 "DefSubclassProc": "Type: HWND A handle to the window being subclassed.",
 "DeleteAppContainerProfile": "The name given to the profile in the call to the CreateAppContainerProfile function. This string is at most 64 characters in length, and fits into the pattern described by the regular expression \"[-_. A-Za-z0-9]+\".",
 "DeleteProfile": "Type: LPCTSTR Pointer to a string that specifies the user SID.",
 "DestroyEnvironmentBlock": "Type: LPVOID Pointer to the environment block created by CreateEnvironmentBlock. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\\0\\0).",
 "DeriveAppContainerSidFromAppContainerName": "The name of the profile.",
 "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName": "Reserved.",
 "DllGetVersion": "Type: DLLVERSIONINFO* A pointer to a DLLVERSIONINFO structure that receives the version information. The cbSize member must be filled in before you call this function. Version 5.0. DLLs that are shipped with Windows 2000 or later systems may return a DLLVERSIONINFO2 structure. To maintain backward compatibility, the first member of a DLLVERSIONINFO2 structure is a DLLVERSIONINFO structure.",
 "DragAcceptFiles": "Type: HWND The identifier of the window that is registering whether it will accept dropped files.",
 "DragFinish": "Type: HDROP Identifier of the structure that describes dropped files. This handle is retrieved from the wParam parameter of the WM_DROPFILES message.",
 "DragQueryFile": "Type: HDROP Identifier of the structure that contains the file names of the dropped files.",
 "DragQueryPoint": "Type: HDROP Handle of the drop structure that describes the dropped file.",
 "ExpandEnvironmentStringsForUser": "Type: HANDLE Token for the user, returned from the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_IMPERSONATE and TOKEN_QUERY access. In addition, as of Windows 7 the token must also have TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects. If hToken is NULL, the environment block contains system variables only.",
 "FileIconInit": "Type: BOOL TRUE to restore the system image cache from disk; FALSE otherwise.",
 "FindExecutable": "Type: LPCTSTR The address of a null-terminated string that specifies a file name. This file should be a document.",
 "FreeConfirmConflictItem": "Type: CONFIRM_CONFLICT_ITEM* A pointer to a CONFIRM_CONFLICT_ITEM structure that stores pointers to the items for which memory is to be freed.",
 "FreeIDListArray": "Type: PIDLIST_RELATIVE* A pointer to the list of cItems PIDLs, stored as an array.",
 "FreeIDListArrayChild": "Type: PITEMID_CHILD* A pointer to the PIDL list, stored as an array of cItems elements.",
 "FreeIDListArrayFull": "Type: PIDLIST_ABSOLUTE* A pointer to the PIDL list, stored as an array of cItems elements.",
 "FreeKnownFolderDefinitionFields": "Type: KNOWNFOLDER_DEFINITION* A pointer to a KNOWNFOLDER_DEFINITION structure that contains information about the given known folder.",
 "FreeMRUList": "Type: HANDLE The handle of the MRU list to free.",
 "GetAllUsersProfileDirectory": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path. Set this value to NULL to determine the required size of the buffer, including the terminating null character.",
 "GetAppContainerFolderPath": "A pointer to the SID of the app container.",
 "GetAppContainerRegistryLocation": "Type: REGSAM The desired registry access.",
 "GetContractDelegateWindow": "Type: HWND The handle of the window whose delegate should be retrieved.",
 "GetCurrentProcessExplicitAppUserModelID": "Type: PWSTR* A pointer that receives the address of the AppUserModelID assigned to the process. The caller is responsible for freeing this string with CoTaskMemFree when it is no longer needed.",
 "GetDefaultUserProfileDirectory": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the default user's profile directory. Set this value to NULL to determine the required size of the buffer.",
 "GetDpiForShellUiComponent": "The type of shell component.",
 "GetMenuContextHelpId": "Type: HMENU A handle to the menu for which the Help context identifier is to be retrieved.",
 "GetProfilesDirectory": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the profiles directory. Set this value to NULL to determine the required size of the buffer.",
 "GetProfileType": "Type: DWORD* Pointer to a variable that receives the profile type. If the function succeeds, it sets one or more of the following values: PT_MANDATORY The user has a Mandatory User Profiles. PT_ROAMING The user has a Roaming User Profiles. PT_ROAMING_PREEXISTING \t\t\t\t\t\tThe user has a Roaming User Profile that was created on another PC and is being downloaded. \t\t\t\t\t\tThis profile type implies PT_ROAMING. \t\t\t\t\t PT_TEMPORARY The user has a Temporary User Profiles; it will be deleted at logoff.",
 "GetScaleFactorForDevice": "Type: DISPLAY_DEVICE_TYPE The value that indicates the type of the display device.",
 "GetScaleFactorForMonitor": "The monitor's handle.",
 "GetUserProfileDirectory": "Type: HANDLE A token for the user, which is returned by the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_QUERY access. For more information, see Access Rights for Access-Token Objects.",
 "GetWindowContextHelpId": "Type: HWND A handle to the window for which the Help context identifier is to be retrieved.",
 "GetWindowSubclass": "Type: HWND The handle of the window being subclassed.",
 "IDListContainerIsConsistent": "A pointer to the IDList to validate.",
 "ILAppendID": "Type: PIDLIST_RELATIVE A pointer to an ITEMIDLIST structure. When the function returns, the SHITEMID structure specified by pmkid is appended or prepended.",
 "ILClone": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be cloned.",
 "ILCloneChild": "Type: PCUITEMID_CHILD A pointer to the child ITEMIDLIST structure to be cloned.",
 "ILCloneFirst": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure that you want to clone.",
 "ILCloneFull": "Type: PCUIDLIST_ABSOLUTE A pointer to the full, or absolute, ITEMIDLIST structure to be cloned.",
 "ILCombine": "Type: PCIDLIST_ABSOLUTE A pointer to the first ITEMIDLIST structure.",
 "ILCreateFromPath": "Type: PCTSTR A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.",
 "ILFindChild": "Type: PCIDLIST_ABSOLUTE A pointer to the parent ITEMIDLIST structure.",
 "ILFindLastID": "Type: PCUIDLIST_RELATIVE A pointer to an ITEMIDLIST structure.",
 "ILFree": "Type: PIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be freed. This parameter can be NULL.",
 "ILGetNext": "Type: PCUIDLIST_RELATIVE A pointer to a particular SHITEMID structure in a larger ITEMIDLIST structure.",
 "ILGetSize": "Type: PCUIDLIST_RELATIVE A pointer to an ITEMIDLIST structure.",
 "ILIsAligned": "Type: PCUIDLIST_RELATIVE A constant PIDL relative to a parent folder that is being checked for alignment.",
 "ILIsChild": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL that is being checked.",
 "ILIsEmpty": "Type: PCUID_RELATIVE A pointer to the ITEMIDLIST structure to be checked.",
 "ILIsEqual": "Type: PCIDLIST_ABSOLUTE The first ITEMIDLIST structure.",
 "ILIsParent": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) structure that specifies the parent. This must be an absolute PIDL.",
 "ILNext(PCUIDLIST_RELATIVE)": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL for which the next SHITEMID structure is being retrieved.",
 "ILNext(PUIDLIST_RELATIVE)": "Type: PUIDLIST_RELATIVE An unaligned, relative PIDL for which the next SHITEMID structure is being retrieved.",
 "ILRemoveLastID": "Type: PUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be shortened. When the function returns, this variable points to the shortened structure.",
 "ILSaveToStream": "Type: IStream * A pointer to the IStream interface where the ITEMIDLIST is saved.",
 "ILSkip(PCUIDLIST_RELATIVE, UINT)": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL in which bytes are to be skipped.",
 "ILSkip(PUIDLIST_RELATIVE, UINT)": "Type: PUIDLIST_RELATIVE An unaligned, relative PIDL in which bytes are to be skipped.",
 "InetIsOffline": "Type: DWORD The input flags for the function. This must be set to zero.",
 "InitNetworkAddressControl": null,
 "LoadUserProfile": "Type: HANDLE Token for the user, which is returned by the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_QUERY, TOKEN_IMPERSONATE, and TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects.",
 "MIMEAssociationDialog": "Type: HWND A handle to the parent window of any posted child windows.",
 "PathMakeUniqueName": "Type: PWSTR A buffer that receives a null-terminated Unicode string that contains the unique path name. It should be at least MAX_PATH characters in length.",
 "PathYetAnotherMakeUniqueName": "Type: PWSTR A string buffer that receives a null-terminated Unicode string that contains the fully qualified path of the unique file name. This buffer should be at least MAX_PATH characters long to avoid causing a buffer overrun.",
 "RegisterAppStateChangeNotification": "A pointer to a callback function that is called when the app enters or leaves the suspended state. See PAPPSTATE_CHANGE_ROUTINE for more detail on this function.",
 "RegisterDialogClasses": "Type: HANDLE An identifier of an instance of the module registering the window classes.",
 "RegisterScaleChangeEvent": "Handle of the event to register for scale change notifications.",
 "RegisterScaleChangeNotifications": "Type: DISPLAY_DEVICE_TYPE The enum value that indicates which display device to receive notifications about.",
 "RemoveWindowSubclass": "Type: HWND The handle of the window being subclassed.",
 "RevokeScaleChangeNotifications": "Type: DISPLAY_DEVICE_TYPE The enum value that indicates which display device to receive notifications about.",
 "UnregisterScaleChangeEvent": "A pointer to the cookie retrieved in the call to RegisterScaleChangeEvent.",
 "ScreenSaverConfigureDialog": "Type: HWND The identifier of the configuration dialog box.",
 "ScreenSaverProc": "Type: HWND An identifier of the window.",
 "SetContractDelegateWindow": "Type: HWND The handle of the app window normally associated with its contracts.",
 "SetCurrentProcessExplicitAppUserModelID": "Type: PCWSTR Pointer to the AppUserModelID to assign to the current process.",
 "SetMenuContextHelpId": "Type: HMENU A handle to the menu with which to associate the Help context identifier.",
 "SetWindowContextHelpId": "Type: HWND A handle to the window with which to associate the Help context identifier.",
 "SetWindowSubclass": "Type: HWND The handle of the window being subclassed.",
 "SHAddToRecentDocs": "Type: UINT A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.",
 "SHAppBarMessage": "Type: DWORD Appbar message value to send. ...",
 "SHAssocEnumHandlers": "Type: PCWSTR A pointer to a null-terminated buffer that contains a single file type extension, for instance \".jpg\". Only handlers associated with the given extension are enumerated. If this value is NULL, all handlers for all extensions are enumerated.",
 "SHAssocEnumHandlersForProtocolByApplication": "Type: PCWSTR Pointer to a string that specifies the protocol.",
 "SHBindToFolderIDListParent": "Type: IShellFolder* A pointer to a Shell folder object. If psfRoot is NULL, indicates that the IDList passed is relative to the desktop.",
 "SHBindToFolderIDListParentEx": "Type: IShellFolder* A pointer to a Shell folder object. If psfRoot is NULL, indicates that the IDList passed is relative to the desktop.",
 "SHBindToObject": "Type: IShellFolder* A pointer to IShellFolder. This parameter can be NULL. If psf is NULL, this indicates parameter pidl is relative to the desktop. In this case, pidl must specify an absolute ITEMIDLIST.",
 "SHBindToParent": "Type: PCIDLIST_ABSOLUTE The item's PIDL.",
 "SHBrowseForFolder": "Type: LPBROWSEINFO A pointer to a BROWSEINFO structure that contains information used to display the dialog box.",
 "SHChangeNotification_Lock": "Type: HANDLE A handle to a window received as a wParam in the specified Shell change notification message.",
 "SHChangeNotification_Unlock": "Type: HANDLE A handle to the memory lock. This is the handle returned by SHChangeNotification_Lock when it locked the memory.",
 "SHChangeNotify": "Type: LONG Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events. This parameter can be one or more of the following values: SHCNE_ALLEVENTS All events have occurred. SHCNE_ASSOCCHANGED A file type association has changed. SHCNF_IDLIST must be specified in the uFlags parameter. dwItem1 and dwItem2 are not used and must be NULL. This event should also be sent for registered protocols. SHCNE_ATTRIBUTES The attributes of an item or folder have changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item or folder that has changed. dwItem2 is not used and should be NULL. SHCNE_CREATE A nonfolder item has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was created. dwItem2 is not used and should be NULL. SHCNE_DELETE A nonfolder item has been deleted. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was deleted. dwItem2 is not used and should be NULL. SHCNE_DRIVEADD A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was added. dwItem2 is not used and should be NULL. SHCNE_DRIVEADDGUI Windows XP and later: Not used. SHCNE_DRIVEREMOVED A drive has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was removed. dwItem2 is not used and should be NULL. SHCNE_EXTENDED_EVENT Not currently used. SHCNE_FREESPACE The amount of free space on a drive has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive on which the free space changed. dwItem2 is not used and should be NULL. SHCNE_MEDIAINSERTED Storage media has been inserted into a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that contains the new media. dwItem2 is not used and should be NULL. SHCNE_MEDIAREMOVED Storage media has been removed from a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive from which the media was removed. dwItem2 is not used and should be NULL. SHCNE_MKDIR A folder has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was created. dwItem2 is not used and should be NULL. SHCNE_NETSHARE A folder on the local computer is being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that is being shared. dwItem2 is not used and should be NULL. SHCNE_NETUNSHARE A folder on the local computer is no longer being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that is no longer being shared. dwItem2 is not used and should be NULL. SHCNE_RENAMEFOLDER The name of a folder has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL or name of the folder. dwItem2 contains the new PIDL or name of the folder. SHCNE_RENAMEITEM The name of a nonfolder item has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL or name of the item. dwItem2 contains the new PIDL or name of the item. SHCNE_RMDIR A folder has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was removed. dwItem2 is not used and should be NULL. SHCNE_SERVERDISCONNECT The computer has disconnected from a server. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the server from which the computer was disconnected. dwItem2 is not used and should be NULL. SHCNE_UPDATEDIR The contents of an existing folder have changed, but the folder still exists and has not been renamed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that has changed. dwItem2 is not used and should be NULL. If a folder has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or SHCNE_RENAMEFOLDER, respectively. SHCNE_UPDATEIMAGE An image in the system image list has changed. SHCNF_DWORD must be specified in uFlags. dwItem2 contains the index in the system image list that has changed. dwItem1 is not used and should be NULL. SHCNE_UPDATEITEM An existing item (a folder or a nonfolder) has changed, but the item still exists and has not been renamed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that has changed. dwItem2 is not used and should be NULL. If a nonfolder item has been created, deleted, or renamed, use SHCNE_CREATE, SHCNE_DELETE, or SHCNE_RENAMEITEM, respectively, instead. SHCNE_DISKEVENTS Specifies a combination of all of the disk event identifiers. SHCNE_GLOBALEVENTS Specifies a combination of all of the global event identifiers. SHCNE_INTERRUPT The specified event occurred as a result of a system interrupt. As this value modifies other event values, it cannot be used alone.",
 "SHChangeNotifyDeregister": "Type: ULONG A value of type ULONG that specifies the registration ID returned by SHChangeNotifyRegister.",
 "SHChangeNotifyRegister": "Type: HWND A handle to the window that receives the change or notification messages.",
 "SHChangeNotifyRegisterThread": "Type: SCNRT_STATUS Indicates whether the function is being used to register or deregister the thread. One of the values of SCNRT_STATUS.",
 "SHCreateAssociationRegistration": "Type: REFIID A reference to the IID of the requested interface.",
 "SHCreateDataObject": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) of the parent folder that contains the data object.",
 "SHCreateDefaultContextMenu": "Type: const DEFCONTEXTMENU* A pointer to a constant DEFCONTEXTMENU structure.",
 "SHCreateDefaultExtractIcon": "Type: REFIID A reference to interface ID.",
 "SHCreateDefaultPropertiesOp": "Type: IShellItem* A pointer to the source shell item. See IShellItem.",
 "SHCreateItemFromIDList": "Type: PCIDLIST_ABSOLUTE The source PIDL.",
 "SHCreateItemFromParsingName": "Type: PCWSTR A pointer to a display name.",
 "SHCreateItemFromRelativeName": "Type: IShellItem* A pointer to the parent Shell item.",
 "SHCreateItemInKnownFolder": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item.",
 "SHCreateItemWithParent": "Type: PCIDLIST_ABSOLUTE The IDList of the parent folder of the item being created; the IDList of psfParent. This parameter can be NULL, if psfParent is specified.",
 "SHCreateShellFolderView": "Type: const SFV_CREATE* Pointer to a SFV_CREATE structure that describes the particulars used in creating this instance of the Shell folder view object.",
 "SHCreateShellFolderViewEx": "Type: CSFV* Pointer to a structure that describes the details used in creating this instance of the Shell folder view object.",
 "SHCreateShellItem": "Type: PCIDLIST_ABSOLUTE A PIDL to the parent. This value can be NULL.",
 "SHCreateShellItemArray": "Type: PCIDLIST_ABSOLUTE The ID list of the parent folder of the items specified in ppidl. If psf is specified, this parameter can be NULL. If this pidlParent is not specified, it is computed from the psf parameter using IPersistFolder2.",
 "SHCreateShellItemArrayFromDataObject": "Type: IDataObject* A pointer to IDataObject interface.",
 "SHCreateShellItemArrayFromIDLists": "Type: UINT The number of elements in the array.",
 "SHCreateShellItemArrayFromShellItem": "Type: IShellItem* Pointer to IShellItem object that represents the item.",
 "SHDefExtractIcon": "Type: LPCTSTR A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.",
 "SHDoDragDrop": "Type: HWND The handle of the window used to obtain the drag image. This value can be NULL. See Remarks for more details.",
 "Shell_NotifyIcon": "Type: DWORD A value that specifies the action to be taken by this function. ...",
 "Shell_NotifyIconGetRect": "Type: const NOTIFYICONIDENTIFIER* Pointer to a NOTIFYICONIDENTIFIER structure that identifies the icon.",
 "ShellAbout": "Type: HWND A window handle to a parent window. This parameter can be NULL.",
 "ShellDDEInit": "Type: BOOL TRUE to register the current process as DDE host; FALSE to unregister it.",
 "ShellExecute": "Type: HWND A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window.",
 "ShellExecuteEx": "Type: SHELLEXECUTEINFO* A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed.",
 "SHEmptyRecycleBin": "Type: HWND A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be NULL.",
 "SHEnumerateUnreadMailAccounts": "Type: HKEY A valid HKEY for a given user.",
 "SHEvaluateSystemCommandTemplate": "Type: PCWSTR A command line, which may or may not include parameters. If the parameters are substitution parameters, then SHEvaluateSystemCommandTemplate should be called before parameters have been replaced.",
 "CreateProcess": "The name of the module to be executed. ...",
 "SHFileOperation": "Type: LPSHFILEOPSTRUCT A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.",
 "SHFreeNameMappings": "Type: HANDLE A handle to the file name mapping object to be freed.",
 "SHGetDataFromIDList": "Type: IShellFolder* The address of the parent IShellFolder interface. This must be the immediate parent of the ITEMIDLIST structure referenced by the pidl parameter.",
 "SHGetDesktopFolder": "Type: IShellFolder** When this method returns, receives an IShellFolder interface pointer for the desktop folder. The calling application is responsible for eventually freeing the interface by calling its IUnknown::Release method.",
 "SHGetDiskFreeSpace": "Type: LPCTSTR A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive. When using Shell32.dll versions previous to version 5.0, this must be an ANSI string. Unicode is not supported in those versions.",
 "SHGetDiskFreeSpaceEx": "Type: LPCTSTR A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive.",
 "SHGetDriveMedia": "Type: PCWSTR The drive in which to check the media type.",
 "SHGetFileInfo": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid. \t\t\t\t\t If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed. If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes. This string can use either short (the 8.3 form) or long file names.",
 "SHGetFolderPathEx": "A reference to the KNOWNFOLDERID that identifies the folder.",
 "SHGetKnownFolderPath": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID that identifies the folder.",
 "SHGetIconOverlayIndex": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the fully qualified path of the file that contains the icon.",
 "SHGetIDListFromObject": "Type: IUnknown* A pointer to the IUnknown of the object from which to get the PIDL.",
 "SHGetImageList": "Type: int The image type contained in the list. One of the following values: SHIL_LARGE (0x0) 0x0. The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the Appearance tab in Display Properties, the image is 48x48 pixels. SHIL_SMALL (0x1) 0x1. These images are the Shell standard small icon size of 16x16, but the size can be customized by the user. SHIL_EXTRALARGE (0x2) 0x2. These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user. SHIL_SYSSMALL (0x3) 0x3. These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON. SHIL_JUMBO (0x4) 0x4. Windows Vista and later. The image is normally 256x256 pixels. SHIL_LAST The largest valid flag value, for validation purposes.",
 "SHGetInstanceExplorer": "Type: IUnknown** When this function returns successfully, contains the address of the host process' IUnknown interface pointer. This is a free-threaded interface used to prevent the host process from terminating. If the function call fails, this value is set to NULL.",
 "SHGetItemFromDataObject": "Type: IDataObject* A pointer to the source IDataObject instance.",
 "SHGetItemFromObject": "Type: IUnknown* A pointer to the IUnknown of the object.",
 "SHGetKnownFolderIDList": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID that identifies the folder. The folders associated with the known folder IDs might not exist on a particular system.",
 "SHGetKnownFolderItem": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item.",
 "SHGetLocalizedName": "Type: PCWSTR A pointer to a string that specifies the fully qualified path of the file.",
 "SHGetNameFromIDList": "Type: PCIDLIST_ABSOLUTE A PIDL that identifies the item.",
 "SHGetNameFromPropertyKey": "Type: REFPROPERTYKEY A pointer to a PROPERTYKEY structure containing the property's identifiers.",
 "SHGetNewLinkInfo": "Type: LPCTSTR A pointer to the path and file name of the shortcut's target. If uFlags does not contain the SHGNLI_PIDL value, this parameter is the address of a null-terminated string that contains the target. If uFlags contains the SHGNLI_PIDL value, this parameter is a PIDL that represents the target.",
 "SHGetPathFromIDList": "Type: PCIDLIST_ABSOLUTE The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).",
 "SHGetPathFromIDListEx": "Type: PCIDLIST_ABSOLUTE A pointer to an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).",
 "SHGetSettings": "Type: LPSHELLFLAGSTATE The address of a SHELLFLAGSTATE structure that receives the Shell option settings.",
 "SHGetStockIconInfo": "Type: SHSTOCKICONID One of the values from the SHSTOCKICONID enumeration that specifies which icon should be retrieved.",
 "SHGetTemporaryPropertyForItem": "Type: IShellItem* A pointer to the item for which the temporary property is to be retrieved.",
 "SHGetUnreadMailCount": "Type: HKEY A valid HKEY for a given user. This parameter should be NULL if the function is called in a user's environment, in which case HKEY_CURRENT_USER is used. This parameter should be NULL if the function is called from the SYSTEM context, in which case HKEY_USERS\\{SID} is used.",
 "SHIsFileAvailableOffline": "Type: PCWSTR A pointer to a string value that specifies the full path to a network file or directory. This path does not need to be in UNC form. If pszPath is not a network path, the function returns E_INVALIDARG.",
 "SHLoadInProc": "Type: REFCLSID The CLSID of the object class to be created.",
 "SHLoadNonloadedIconOverlayIdentifiers": null,
 "SHLocalStrDup": "Type: PCTSTR A pointer to a null-terminated, Unicode string to be copied.",
 "SHMultiFileProperties": "Type: IDataObject* A pointer to a data object that supplies the PIDLs of all of the files for which to display the merged property sheet. The data object must use the CFSTR_SHELLIDLIST clipboard format. The parent folder's implementation of IShellFolder::GetDisplayNameOf must return a fully qualified file system path for each item in response to the SHGDN_FORPARSING flag.",
 "SHOpenFolderAndSelectItems": "Type: PCIDLIST_ABSOLUTE A pointer to a fully qualified item ID list that specifies the folder.",
 "SHOpenWithDialog": "Type: HWND The handle of the parent window. This value can be NULL.",
 "ShowShareFolderUI": "Type: HWND A handle to the parent window for the property sheet.",
 "SHParseDisplayName": "Type: LPCWSTR A pointer to a zero-terminated wide string that contains the display name to parse.",
 "SHPathPrepareForWrite": "Type: HWND A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to NULL, user interface windows are not created.",
 "SHQueryRecycleBin": "Type: LPCTSTR The address of a null-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\\Windows\\System...).",
 "SHQueryUserNotificationState": "Type: QUERY_USER_NOTIFICATION_STATE* When this function returns, contains a pointer to one of the values of the QUERY_USER_NOTIFICATION_STATE enumeration.",
 "SHRemoveLocalizedName": "Type: PCWSTR A pointer to a null-terminated, Unicode string that specifies the fully qualified path of the target file.",
 "SHRunControlPanel": "Type: PCWSTR Pointer to a string that contains the command line that opens the Control Panel item. This command line includes at least the name of the .cpl file. It can also contain any other necessary information such as the property sheet page within the item (either by ordinal or by name). For more information, see Executing Control Panel Items.",
 "SHSetDefaultProperties": "Type: HWND A handle to the item's parent window, which receives error notifications. This value can be NULL.",
 "SHSetInstanceExplorer": "Type: IUnknown* A pointer to a free-threaded IUnknown. Components can use this interface (through SHGetInstanceExplorer) to prevent the host process from terminating. This value can be NULL, in which case the process reference is no longer made available to components.",
 "SHSetKnownFolderPath": "Type: REFKNOWNFOLDERID A GUID that identifies the known folder.",
 "SHSetLocalizedName": "Type: PCWSTR A pointer to a string that specifies the fully qualified path of the target file.",
 "SHSetTemporaryPropertyForItem": "Type: IShellItem* A pointer to the item on which the temporary property is to be set.",
 "SHSetUnreadMailCount": "Type: LPCTSTR A pointer to a string in Unicode that contains the current user's full email address.",
 "SHTestTokenMembership": "Type: HANDLE A handle to the token. This value can be NULL.",
 "CheckTokenMembership": "A handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an impersonation token. If TokenHandle is NULL, CheckTokenMembership uses the impersonation token of the calling thread. If the thread is not impersonating, the function duplicates the thread's primary token to create an impersonation token.",
 "SHUpdateImage": "Type: LPCTSTR A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the szIconFile parameter of IExtractIcon::GetIconLocation.",
 "SoftwareUpdateMessageBox": "Type: HWND A handle to the parent window.",
 "StgMakeUniqueName": "Type: IStorage* A pointer to an IStorage object.",
 "StrStrNIW": "Type: PWSTR A pointer to the null-terminated, Unicode string that is being searched.",
 "StrStrNW": "Type: PWSTR A pointer to the null-terminated, Unicode string that is being searched.",
 "TranslateURL": "Type: PCTSTR The address of the URL string to be translated.",
 "UnloadUserProfile": "Type: HANDLE Token for the user, returned from the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_IMPERSONATE and TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects.",
 "UnregisterAppStateChangeNotification": "A pointer to the registration handle retrieved by RegisterAppStateChangeNotification through its Registration parameter.",
 "URLAssociationDialog": "Type: HWND A handle to the parent window.",
 "WinExecError": "Type: HWND Handle to the window that ran the WinExec function.",
 "WinHelp": "Type: HWND A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help.",
 "ColorAdjustLuma": "Type: COLORREF The initial RGB value.",
 "ColorHLSToRGB": "Type: WORD The original HLS hue value.",
 "ColorRGBToHLS": "Type: COLORREF The original RGB color.",
 "SHCreateShellPalette": "Type: HDC The device context.",
 "PathBuildRoot": "Type: LPTSTR A pointer to the string that receives the constructed root path. This buffer must be at least four characters in size.",
 "PathCommonPrefix": "Type: LPCTSTR A pointer to a null-terminated string of length MAX_PATH that contains the first path name.",
 "PathCompactPath": "Type: HDC A handle to the device context used for font metrics. This value can be NULL.",
 "PathCompactPathEx": "Type: LPTSTR The address of the string that has been altered.",
 "PathCreateFromUrl": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL.",
 "PathCreateFromUrlAlloc": "Type: PCWSTR A pointer to the URL of a file, represented as a null-terminated, Unicode string.",
 "PathFileExists": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the full path of the object to verify.",
 "PathFindFileName": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search.",
 "PathFindNextComponent": "Type: PTSTR A pointer to a null-terminated string that contains the path to parse. This string must not be longer than MAX_PATH characters, plus the terminating null character. Path components are delimited by backslashes. For instance, the path \"c:\\path1\\path2\\file.txt\" has four components: c:, path1, path2, and file.txt.",
 "PathFindOnPath": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the file name for which to search. If the search is successful, this parameter is used to return the fully qualified path name.",
 "PathFindSuffixArray": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file name to be tested. A full path can be used.",
 "PathGetArgs": "Type: PTSTR Pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched.",
 "PathGetCharType": "Type: TUCHAR The character for which to determine the type.",
 "PathGetDriveNumber": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched.",
 "PathIsContentType": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file whose content type will be compared.",
 "PathIsDirectory": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to verify.",
 "PathIsDirectoryEmpty": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be tested.",
 "PathIsFileSpec": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched.",
 "PathIsHTMLFile": "Type: LPCTSTR The address of a character buffer that contains the path and name of the file.",
 "PathIsLFNFileSpec": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file name to be tested.",
 "PathIsNetworkPath": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path.",
 "PathIsPrefix": "Type: IN LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the prefix for which to search.",
 "PathIsRelative": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search.",
 "PathIsSameRoot": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the first path to be compared.",
 "PathIsSystemFolder": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the name of an existing folder. The attributes for this folder will be retrieved and compared with those that define a system folder. If this folder contains the attributes to make it a system folder, the function returns nonzero. If this value is NULL, this function determines if the attributes passed in dwAttrb qualify it to be a system folder.",
 "PathIsUNCServer": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to validate.",
 "PathIsUNCServerShare": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be validated.",
 "PathIsURL": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the URL path to validate.",
 "PathMakePretty": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be converted.",
 "PathMakeSystemFolder": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the name of an existing folder that will be made into a system folder.",
 "PathMatchSpec": "Type: LPCSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched.",
 "PathMatchSpecEx": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path from which the file name to be matched is taken.",
 "PathParseIconLocation": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains a file location string. It should be in the form \"path,iconindex\". When the function returns, pszIconFile will point to the file's path.",
 "PathQuoteSpaces": "Type: LPTSTR A pointer to a null-terminated string that contains the path to search. The size of this buffer must be set to MAX_PATH to ensure that it is large enough to hold the returned string.",
 "PathRelativePathTo": "Type: LPTSTR A pointer to a string that receives the relative path. This buffer must be at least MAX_PATH characters in size.",
 "PathRemoveArgs": "Type: LPTSTR Pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove arguments.",
 "PathRemoveBlanks": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH from which to strip all leading and trailing spaces.",
 "PathSearchAndQualify": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search.",
 "PathSetDlgItemPath": "Type: HWND A handle to the dialog box or window.",
 "PathStripPath": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path and file name. When this function returns successfully, the string contains only the file name, with the path removed.",
 "PathUndecorate": "Type: LPTSTR A null-terminated string of length MAX_PATH that contains the path. When the function returns, pszPath points to the undecorated string.",
 "PathUnExpandEnvStrings": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be unexpanded.",
 "PathUnmakeSystemFolder": "Type: LPTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the name of an existing folder that will have the system folder attributes removed.",
 "PathUnquoteSpaces": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path. When the function returns successfully, points to the string with beginning and ending quotation marks removed.",
 "SHSkipJunction": "Type: IBindCtx* A pointer to an IBindCtx interface that specifies the bind context you want to check. This value can be NULL.",
 "UrlApplyScheme": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains a URL.",
 "UrlCanonicalize": "Type: PCTSTR A pointer to a null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains a URL string. If the string does not refer to a file, it must include a valid scheme such as \"http://\".",
 "UrlCombine": "Type: PCTSTR A pointer to a null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the base URL.",
 "UrlCompare": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the first URL.",
 "UrlCreateFromPath": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the MS-DOS path.",
 "UrlEscape": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains a full or partial URL, as appropriate for the value in dwFlags.",
 "UrlEscapeSpaces": "Type: LPCTSTR A pointer to a URL string. If it does not refer to a file, it must include a valid scheme such as \"http://\".",
 "UrlGetLocation": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the location.",
 "UrlGetPart": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL.",
 "UrlHash": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL.",
 "UrlIs": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL.",
 "UrlIsFileUrl": "Type: LPCTSTR A pointer to a null-terminated string containing the URL.",
 "UrlIsNoHistory": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL.",
 "UrlIsOpaque": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL.",
 "UrlUnescape": "Type: PTSTR A pointer to a null-terminated string with the URL. If dwFlags is set to URL_UNESCAPE_INPLACE, the converted string is returned through this parameter.",
 "UrlUnescapeInPlace": "Type: LPTSTR A pointer to a null-terminated string that contains the URL. The converted string is returned through this parameter.",
 "AssocGetPerceivedType": "Type: PCWSTR A pointer to a buffer that contains the file's extension. This should include the leading period, for example \".txt\".",
 "AssocIsDangerous": "Type: PCWSTR A pointer to a string that contains the type of file in question. This may be either an extension such as \".exe\" or a progid such as \"exefile\".",
 "SHGetAssocKeys": "A IQueryAssociations interface pointer to the object you're interested in.",
 "SHOpenRegStream2": "Type: HKEY Required. The subtree, such as HKEY_LOCAL_MACHINE, that contains the value.",
 "SHOpenRegStream": "Type: HKEY Required. The subtree, such as HKEY_LOCAL_MACHINE, that contains the value.",
 "ChrCmpI": "Type: TCHAR The first character to be compared.",
 "GetAcceptLanguages": "Type: LPTSTR A pointer to a string that, when this function returns successfully, receives the language preferences information. We recommend that this buffer be of size 2048 characters to ensure sufficient space to return the full string. You can also call this function with this parameter set to NULL to retrieve the size of the string that will be returned.",
 "IntlStrEqN": "Type: LPCTSTR A pointer to a null-terminated string.",
 "IntlStrEqNI": "Type: LPCTSTR A pointer to a null-terminated string.",
 "IntlStrEqWorker": "Type: BOOL A value that is set to TRUE for a case-sensitive comparison, or to FALSE for a case-insensitive comparison.",
 "IsCharSpace": "Type: TCHAR A single character.",
 "SHStrDup": "Type: LPCTSTR A pointer to the null-terminated string to be copied.",
 "StrCat": "Type: PTSTR A pointer to a null-terminated string. When this function returns successfully, this string contains its original content with the string psz2 appended. This buffer must be large enough to hold both strings and the terminating null character.",
 "StrCatBuff": "Type: PTSTR A pointer to a null-terminated string. When this function returns successfully, this string contains its original content with the string pszSrc appended.",
 "StrCatChainW": "Type: PWSTR A pointer to a buffer that, when this function returns successfully, receives the null-terminated, Unicode string.",
 "StrChr": "Type: PTSTR The address of the string to be searched.",
 "StrChrI": "Type: PTSTR A pointer to the string to be searched.",
 "StrChrNIW": "Type: PCWSTR A pointer to the string to be searched.",
 "StrChrNW": "Type: PWSTR A pointer to the string to be searched.",
 "StrCmp": "Type: PCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpC": "Type: LPCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpI": "Type: PCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpIC": "Type: LPCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpLogicalW": "Type: PCWSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpN": "Type: PCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpNC": "Type: LPCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpNI": "Type: PCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCmpNIC": "Type: LPCTSTR A pointer to the first null-terminated string to be compared.",
 "StrCpy": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the copied string. This string is not guaranteed to be null-terminated.",
 "StrCpyN": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the copied string. This buffer must be of sufficient size to hold the copied characters. This string is not guaranteed to be null-terminated.",
 "StrCSpn": "Type: PCTSTR A pointer to the null-terminated string to be searched.",
 "StrCSpnI": "Type: PCTSTR A pointer to the null-terminated string to be searched.",
 "StrDup": "Type: PCTSTR A pointer to a constant null-terminated character string.",
 "StrFormatByteSize64": "Type: LONGLONG The numeric value to be converted.",
 "StrFormatByteSizeA": "Type: DWORD The numeric value to be converted.",
 "StrFormatByteSizeW": "Type: LONGLONG The numeric value to be converted.",
 "StrFormatByteSizeEx": "Type: ULONGLONG The numeric value to be converted.",
 "StrFormatKBSize": "Type: LONGLONG The numeric value to be converted.",
 "StrFromTimeInterval": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the converted number.",
 "StrIsIntlEqual": "Type: BOOL The case sensitivity of the comparison. If this value is nonzero, the comparison is case-sensitive. If this value is zero, the comparison is not case-sensitive.",
 "StrNCat": "Type: PTSTR A pointer to a null-terminated string to which the function appends the characters from psz2. It must be large enough to hold the combined strings plus the terminating null character.",
 "StrPBrk": "Type: PTSTR A pointer to the null-terminated string to be searched.",
 "StrRChr": "Type: PTSTR A pointer to the null-terminated string to be searched.",
 "StrRChrI": "Type: PTSTR A pointer to the null-terminated string to be searched.",
 "StrRetToBSTR": "Type: STRRET* A pointer to a STRRET structure. When the function returns, this pointer is longer valid.",
 "StrRetToBuf": "Type: STRRET* A pointer to the STRRET structure. When the function returns, this pointer will no longer be valid.",
 "StrRetToStr": "Type: STRRET* A pointer to the STRRET structure. When the function returns, this pointer will no longer be valid.",
 "StrRetToStrN": "Type: LPTSTR Buffer to hold the display name. It will be returned as a null-terminated string. If cchOut is too small, the name will be truncated to fit.",
 "StrRStrI": "Type: PTSTR A pointer to a null-terminated source string.",
 "StrSpn": "Type: PCTSTR A pointer to the null-terminated string that is to be searched.",
 "StrStr": "Type: PTSTR A pointer to the null-terminated string to search.",
 "StrStrI": "Type: PTSTR A pointer to the null-terminated string being searched.",
 "StrToInt": "Type: PCTSTR A pointer to the null-terminated string to be converted. A valid string representing a decimal value contains only the characters 0-9 and must have the following form to be parsed successfully. Copy (optional white space)(optional sign)(one or more decimal digits) The optional sign can be the character '-' or '+'; if omitted, the sign is assumed to be positive.",
 "StrToInt64Ex": "Type: PCTSTR A pointer to the null-terminated string to be converted. For further details concerning the valid forms of the string, see the Remarks section.",
 "StrToIntEx": "Type: PCTSTR A pointer to the null-terminated string to be converted. For further details concerning the valid forms of the string, see the Remarks section.",
 "StrTrim": "Type: PTSTR A pointer to the null-terminated string to be trimmed. When this function returns successfully, psz receives the trimmed string.",
 "wnsprintf": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the output string.",
 "wvnsprintf": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the output string.",
 "DllInstall": "Type: BOOL TRUE if the DLL is being installed; FALSE if it is being uninstalled.",
 "GetProcessReference": "The address of a pointer that, when this function returns successfully, points to the object supplied to the process by SetProcessReference. Your application is responsible for freeing this resource when it is no longer needed. A pointer to a free-threaded IUnknown. Components can use this interface (through SHGetInstanceExplorer) to prevent the host process from terminating. This value can be NULL, in which case the process reference is no longer made available to components.",
 "SetProcessReference": "A pointer to the object for which you want to store a reference. This value can be NULL.",
 "HashData": "Type: BYTE* A pointer to the data array.",
 "IsInternetESCEnabled": null,
 "IsOS": "Type: DWORD A value that specifies which operating system or operating system feature to check for. One of the following values (you cannot combine values). NameValueDescription OS_WINDOWS0The program is running on one of the following versions of Windows: Windows 95 Windows 98 Windows Me Equivalent to VER_PLATFORM_WIN32_WINDOWS. Note that none of those systems are supported at this time. OS_WINDOWS returns FALSE on all supported systems. OS_NT1Always returns TRUE. OS_WIN95ORGREATER2Always returns FALSE. OS_NT4ORGREATER3Always returns FALSE. OS_WIN98ORGREATER5Always returns FALSE. OS_WIN98_GOLD6Always returns FALSE. OS_WIN2000ORGREATER7The program is running on Windows 2000 or one of its successors. OS_WIN2000PRO8Do not use; use OS_PROFESSIONAL. OS_WIN2000SERVER9Do not use; use OS_SERVER. OS_WIN2000ADVSERVER10Do not use; use OS_ADVSERVER. OS_WIN2000DATACENTER11Do not use; use OS_DATACENTER. OS_WIN2000TERMINAL12The program is running on Windows 2000 Terminal Server in either Remote Administration mode or Application Server mode, or Windows Server 2003 (or one of its successors) in Terminal Server mode or Remote Desktop for Administration mode. Consider using a more specific value such as OS_TERMINALSERVER, OS_TERMINALREMOTEADMIN, or OS_PERSONALTERMINALSERVER. OS_EMBEDDED13The program is running on Windows Embedded, any version. Equivalent to VER_SUITE_EMBEDDEDNT. OS_TERMINALCLIENT14The program is running as a Terminal Server client. Equivalent to GetSystemMetrics(SM_REMOTESESSION). OS_TERMINALREMOTEADMIN15The program is running on Windows 2000 Terminal Server in the Remote Administration mode or Windows Server 2003 (or one of its successors) in the Remote Desktop for Administration mode (these are the default installation modes). This is equivalent to VER_SUITE_TERMINAL && VER_SUITE_SINGLEUSERTS. OS_WIN95_GOLD16Always returns FALSE. OS_MEORGREATER17Always returns FALSE. OS_XPORGREATER18Always returns FALSE. OS_HOME19Always returns FALSE. OS_PROFESSIONAL20The program is running on Windows NT Workstation or Windows 2000 (or one of its successors) Professional. Equivalent to VER_PLATFORM_WIN32_NT && VER_NT_WORKSTATION. OS_DATACENTER21The program is running on Windows Datacenter Server or Windows Server Datacenter Edition, any version. Equivalent to (VER_NT_SERVER || VER_NT_DOMAIN_CONTROLLER) && VER_SUITE_DATACENTER. OS_ADVSERVER22The program is running on Windows Advanced Server or Windows Server Enterprise Edition, any version. Equivalent to (VER_NT_SERVER || VER_NT_DOMAIN_CONTROLLER) && VER_SUITE_ENTERPRISE && !VER_SUITE_DATACENTER. OS_SERVER23The program is running on Windows Server (Standard) or Windows Server Standard Edition, any version. This value will not return true for VER_SUITE_DATACENTER, VER_SUITE_ENTERPRISE, VER_SUITE_SMALLBUSINESS, or VER_SUITE_SMALLBUSINESS_RESTRICTED. OS_TERMINALSERVER24The program is running on Windows 2000 Terminal Server in Application Server mode, or on Windows Server 2003 (or one of its successors) in Terminal Server mode. This is equivalent to VER_SUITE_TERMINAL && VER_SUITE_SINGLEUSERTS. OS_PERSONALTERMINALSERVER25The program is running on Windows XP (or one of its successors), Home Edition or Professional. This is equivalent to VER_SUITE_SINGLEUSERTS && !VER_SUITE_TERMINAL. OS_FASTUSERSWITCHING26Fast user switching is enabled. OS_WELCOMELOGONUI27Always returns FALSE. OS_DOMAINMEMBER28The computer is joined to a domain. OS_ANYSERVER29The program is running on any Windows Server product. Equivalent to VER_NT_SERVER || VER_NT_DOMAIN_CONTROLLER. OS_WOW643230The program is a 32-bit program running on 64-bit Windows. OS_WEBSERVER31Always returns FALSE. OS_SMALLBUSINESSSERVER32The program is running on Microsoft Small Business Server with restrictive client license in force. Equivalent to VER_SUITE_SMALLBUSINESS_RESTRICTED. OS_TABLETPC33The program is running on Windows XP Tablet PC Edition, or one of its successors. OS_SERVERADMINUI34The user should be presented with administrator UI. It is possible to have server administrative UI on a non-server machine. This value informs the application that an administrator's profile has roamed to a non-server, and UI should be appropriate to an administrator. Otherwise, the user is shown a mix of administrator and nonadministrator settings. OS_MEDIACENTER35The program is running on Windows XP Media Center Edition, or one of its successors. Equivalent to GetSystemMetrics(SM_MEDIACENTER). OS_APPLIANCE36The program is running on Windows Appliance Server.",
 "IStream_Copy": "Type: IStream* A pointer to the source stream.",
 "IStream_Read": "Type: IStream* A pointer to the IStream interface of the stream from which to read.",
 "IStream_ReadPidl": "Type: IStream* A pointer to the IStream from which the PIDL is read.",
 "IStream_ReadStr": "Type: IStream* A pointer to the stream from which to read.",
 "IStream_Reset": "Type: IStream* A pointer to the IStream interface of the stream whose position is to be reset.",
 "IStream_Size": "Type: IStream* A pointer to the IStream interface of the stream whose size is to be determined.",
 "IStream_Write": "Type: IStream* An IStream pointer that specifies the target stream.",
 "IStream_WritePidl": "Type: IStream* A pointer to the IStream object in which to write.",
 "IStream_WriteStr": "Type: IStream* A pointer to the stream in which to write.",
 "IUnknown_AtomicRelease": "Type: void** The address of a pointer to a COM interface.",
 "IUnknown_GetSite": "Type: IUnknown* A pointer to the COM object whose IObjectWithSite::GetSite method is to be called.",
 "IUnknown_GetWindow": "Type: IUnknown* A pointer to the COM object from which this function will attempt to obtain a window handle.",
 "IUnknown_QueryService": "Type: IUnknown* A pointer to the IUnknown instance of the COM object that supports the service.",
 "IUnknown_Set": "Type: IUnknown** The address of a COM interface pointer to receive the pointer assigned to punk. If the previous value of the pointer is non-NULL, the function releases that interface by calling its IUnkown::Release method.",
 "IUnknown_SetSite": "Type: IUnknown* A pointer to the IUnknown interface of the object whose site is to be changed.",
 "ParseURL": "Type: LPCTSTR A pointer to a null-terminated string containing the URL to be parsed.",
 "QISearch": "Type: void* A pointer to the base of a COM object.",
 "SHAutoComplete": "Type: HWND The window handle of a system edit control. Typically, this parameter is the handle of an edit control or the edit control embedded in a ComboBoxEx control.",
 "SHCreateMemStream": "Type: const BYTE* A pointer to a buffer of size cbInit. The contents of this buffer are used to set the initial contents of the memory stream. If this parameter is NULL, the returned memory stream does not have any initial content.",
 "CreateStreamOnHGlobal": "A memory handle allocated by the GlobalAlloc function, or if NULL a new handle is to be allocated instead. The handle must be allocated as moveable and nondiscardable.",
 "SHCreateStreamOnFileEx": "Type: LPCWSTR A pointer to a null-terminated string that specifies the file name.",
 "SHCreateThread": "Type: LPTHREAD_START_ROUTINE A pointer to an application-defined function of the LPTHREAD_START_ROUTINE type. If a new thread was successfully created, this application-defined function is called in the context of that thread. SHCreateThread does not wait for the function pointed to by this parameter to complete before returning to its caller. The application-defined function's return value is the exit code of the thread.",
 "SHCreateThreadRef": "Type: LONG* A pointer to a value, usually a local variable in the thread's ThreadProc, that is used by the interface in ppunk as a reference counter.",
 "SHCreateThreadWithHandle": "Type: LPTHREAD_START_ROUTINE A pointer to an application-defined function of type LPTHREAD_START_ROUTINE. If a new thread was successfully created, this application-defined function is called in the context of that thread. SHCreateThreadWithHandle does not wait for the function pointed to by pfnThreadProc to complete before returning to its caller. The return value for the function specified by pfnThreadProc is the exit code of the thread.",
 "SHGetThreadRef": "Type: IUnknown** The address of a pointer that, when this function returns successfully, points to the object whose reference is stored. Your application is responsible for freeing this resource when it is no longer needed.",
 "SHSetThreadRef": "Type: IUnknown* A pointer to the IUnknown of the object for which you want to store a reference. This value can be NULL.",
 "SHGlobalCounterDecrement": "Type: const SHGLOBALCOUNTER The SHGLOBALCOUNTER to decrement.",
 "SHGlobalCounterGetValue": "Type: const SHGLOBALCOUNTER The SHGLOBALCOUNTER for which to retrieve the current value.",
 "SHGlobalCounterIncrement": "Type: const SHGLOBALCOUNTER The SHGLOBALCOUNTER to increment.",
 "SHReleaseThreadRef": null,
 "SHRegGetValue": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOTHKEY_CURRENT_CONFIGHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_PERFORMANCE_DATAHKEY_USERS",
 "CharLowerWrapW": "Type: LPWSTR A pointer to a null-terminated Unicode string or a single character. If the high-order word of this parameter is zero, the low-order word must contain only a single character to be converted.",
 "CharUpperBuffWrapW": "Type: LPWSTR A pointer to a buffer that contains one or more Unicode characters to process.",
 "CompareStringWrapW": "Type: LCID A locale identifier used for the comparison. This parameter can be one of the following predefined locale identifiers or a locale identifier created by the MAKELCID macro. LOCALE_SYSTEM_DEFAULT The system's default locale. LOCALE_USER_DEFAULT The current user's default locale.",
 "DAD_AutoScroll": "Type: HWND A handle to the window being scrolled.",
 "DAD_DragEnterEx": "Type: HWND A handle to the window that owns the drag image.",
 "ImageList_DragEnter": "Type: HWND A handle to the window that owns the drag image.",
 "DAD_DragEnterEx2": "Type: HWND A handle to the window that owns the drag image.",
 "DAD_DragLeave": null,
 "ImageList_DragLeave": "Type: HWND A handle to the window that owns the drag image.",
 "DAD_DragMove": "Type: POINT The coordinates at which to display the drag image. The coordinates are relative to the upper-left corner of the window, not the client area.",
 "ImageList_DragMove": "Type: int The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.",
 "DAD_SetDragImage": "Type: HIMAGELIST A handle to an image list. This parameter uses the zero index in the ImageList.",
 "ImageList_BeginDrag": "Type: HIMAGELIST A handle to the image list.",
 "DAD_ShowDragImage": "Type: BOOL A value that specifies whether to show or hide the image being dragged. FALSE Hides the image. TRUE Shows the image.",
 "ImageList_DragShowNolock": "Type: BOOL A value specifying whether to show or hide the image being dragged. Specify TRUE to show the image or FALSE to hide the image.",
 "FindResourceWrapW": "Type: HMODULE A handle to the module whose executable file contains the resource. A value of NULL specifies the module handle associated with the image file that the operating system used to create the current process.",
 "FindResource": "Type: HMODULE A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process.",
 "GetDateFormatWrapW": "Type: LCID The locale for which the date string is to be formatted. If pwzFormat is NULL, the function formats the string according to the date format for this locale. If pwzFormat is not NULL, the function uses the locale only for information not specified in the format picture string (for example, the locale's day and month names). This parameter can be a locale identifier created by the MAKELCID macro, or one of the following predefined values. LOCALE_SYSTEM_DEFAULT Default system locale. LOCALE_USER_DEFAULT Default user locale.",
 "GetTimeFormatWrapW": "Type: LCID Specifies the locale for which the time string is to be formatted. If pwzFormat is NULL, the function formats the string according to the time format for this locale. If pwzFormat is not NULL, the function uses the locale only for information not specified in the format picture string (for example, the locale's time markers). This parameter can be a locale identifier created by the MAKELCID macro, or one of the following predefined values. LOCALE_SYSTEM_DEFAULT Default system locale. LOCALE_USER_DEFAULT Default user locale.",
 "GUIDFromString": "Type: LPCTSTR A pointer to the null-terminated string to convert. The string should be in the following form: {00000000-0000-0000-0000-000000000000}",
 "IsCharAlphaNumericWrapW": "Type: WCHAR The Unicode character to be tested.",
 "InitCommonControlsEx": "Type: const LPINITCOMMONCONTROLSEX A pointer to an INITCOMMONCONTROLSEX structure that contains information specifying which control classes will be registered.",
 "ParseField": "Type: LPCTSTR* A pointer to the line from Setup.inf.",
 "SHCreateProcessAsUserW": "Type: PSHCREATEPROCESSINFOW A pointer to an SHCREATEPROCESSINFOW structure with information on how to create the process.",
 "SHDestroyPropSheetExtArray": "Type: HPSXA The handle of the array that contains pointers to the property sheet handlers to destroy.",
 "SHExtractIconsW": "Type: LPCWSTR A pointer to the file name from which to extract the icons.",
 "OleFlushClipboard": null,
 "SHGetMalloc": "Type: LPMALLOC* The address of a pointer that receives the Shell's IMalloc interface pointer.",
 "SHGetShellStyleHInstance": null,
 "AddMRUStringW": "Type: HANDLE The handle of the MRU list.",
 "CallCPLEntry16": "Type: HINSTANCE Ignored.",
 "CanShareFolderW": "Type: LPCWSTR A pointer to a string that specifies the path of the folder to test.",
 "CIDLData_CreateFromIDArray": "Type: PCIDLIST_ABSOLUTE A fully qualified IDLIST for the root of the items specified in apidl.",
 "ConnectToConnectionPoint": "Type: IUnknown* A pointer to the IUnknown interface of the object to be connected to the connection point container. If you set fConnect to FALSE to indicate that you are disconnecting the object, this parameter is ignored and can be set to NULL.",
 "CreateHardwareEventMoniker": "Type: REFCLSID The ID of the class to which the moniker binds.",
 "CreateUserProfileEx": "Type: PSID The SID of the new user.",
 "CscSearchApiGetInterface": "Type: ULONG The interface version of the CCscSearchApiInterface object. Set to _CSC_SEARCHAPI_INTERFACE_VERSION.",
 "DoEnvironmentSubst": "Type: LPTSTR A pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored. \t\t\t\t\t Copy %VariableName% Any character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator. When this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry. If this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged.",
 "DriveType": "Type: int The number of the drive that you want to test. \"A:\" corresponds to 0, \"B:\" to 1, and so on.",
 "EnumMRUListW": "Type: HANDLE The handle of the MRU list, obtained when the list was created.",
 "EstimateFileRiskLevel": "Type: LPCWSTR A pointer to a null-terminated string that contains the path of the file that is being checked against the handler.",
 "ExtractAssociatedIconEx": "Type: HINSTANCE The handle of the module from which to extract the icon.",
 "GetFileNameFromBrowse": "Type: HWND A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be NULL if the dialog box has no owner.",
 "GetMenuPosFromID": "Type: HMENU The handle of the menu.",
 "ILLoadFromStream": "Type: IStream* A pointer that indicates the IStream interface that the ITEMIDLIST loads from.",
 "ILLoadFromStreamEx(IStream*, PIDLIST_ABSOLUTE*)": "Type: IStream* A pointer to the IStream interface from which the absolute ITEMIDLIST loads.",
 "ILLoadFromStreamEx(IStream*, PIDLIST_RELATIVE*)": "Type: IStream* A pointer to the IStream interface from which the ITEMIDLIST loads.",
 "ILLoadFromStreamEx(IStream*, PITEMID_CHILD*)": "Type: IStream* A pointer to the IStream interface from which the child PIDL loads.",
 "IsNetDrive": "Type: int An integer that indicates which drive letter you want to test. Set it to 0 for A:, 1 for B:, and so on.",
 "IsUserAnAdmin": null,
 "LPFNDFMCALLBACK pointer": "Type: IShellFolder* A pointer to the IShellFolder object the message applies to. This value can be NULL.",
 "LPFNVIEWCALLBACK pointer": "Type: IShellView* A pointer to the owning instance of IShellView, if applicable. This parameter can be NULL.",
 "LinkWindow_RegisterClass": null,
 "LinkWindow_UnregisterClass": null,
 "MLFreeLibrary": "Type: HMODULE The handle previously returned by a successful call to the MLLoadLibrary function.",
 "MLLoadLibrary": "Type: LPCTSTR A null-terminated string with the file name of the resource DLL to be loaded. Do not include any path information. MLLoadLibrary derives that information as described in the Remarks below.",
 "MLHtmlHelp": "Type: HWND A handle to the parent window that calls this function.",
 "MLWinHelp": "Type: HWND A handle to the window requesting help. The MLWinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help.",
 "OpenRegStream": "Type: HKEY A handle to the key that is currently open.",
 "OutputDebugStringWrapW": "Type: LPCWSTR A pointer to the null-terminated Unicode string to be displayed.",
 "PassportWizardRunDll": "Type: HWND A handle to an owner window. This parameter is typically set to NULL.",
 "PathCleanupSpec": "Type: PCWSTR A pointer to a null-terminated buffer that contains the fully qualified path of the directory that will contain the file or directory named at pszSpec. The path must not exceed MAX_PATH characters in length, including the terminating null character. This path is not altered. This value can be NULL.",
 "PathGetShortPath": "Type: PWSTR A pointer to a null-terminated, Unicode string that contains the long path. When the function returns, it contains the equivalent short path.",
 "PathIsExe": "Type: PCWSTR A pointer to a null-terminated, Unicode string that contains the file path, which includes the name of the file.",
 "PathIsSlow": "Type: LPCTSTR A pointer to a null-terminated string that contains the fully qualified path of the file.",
 "PathProcessCommand": "Type: PCWSTR A pointer to a null-terminated string that contains the command line to process.",
 "PathResolve": "Type: PWSTR A null-terminated Unicode string that contains the path to resolve. When the function returns, the string contains the corresponding fully qualified path. This buffer should be at least MAX_PATH characters long.",
 "PerUserInit": null,
 "PFNASYNCICONTASKCALLBACK pointer": "Type: LPCITEMIDLIST A pointer to an ITEMIDLIST structure.",
 "SHMapIDListToImageListIndexAsync": "Type: IShellTaskScheduler* The task scheduler interface to create the background task.",
 "PickIconDlg": "Type: HWND The handle of the parent window. This value can be NULL.",
 "ReadCabinetState": "Type: CABINETSTATE* When this function returns, contains a pointer to a CABINETSTATE structure that contains either information pulled from the registry or default information.",
 "RealDriveType": "Type: int The number of the drive that you want to test. \"A:\" corresponds to 0, \"B:\" to 1, and so on.",
 "RestartDialog": "Type: HWND A handle to the parent window.",
 "ExitWindowsEx": "The shutdown type. This parameter must include one of the following values. ValueMeaning EWX_HYBRID_SHUTDOWN 0x00400000 Beginning with Windows 8: You can prepare the system for a faster startup by combining the EWX_HYBRID_SHUTDOWN flag with the EWX_SHUTDOWN flag. EWX_LOGOFF 0 Shuts down all processes running in the logon session of the process that called the ExitWindowsEx function. Then it logs the user off. This flag can be used only by processes running in an interactive user's logon session. EWX_POWEROFF 0x00000008 Shuts down the system and turns off the power. The system must support the power-off feature. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section. EWX_REBOOT 0x00000002 Shuts down the system and then restarts the system. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section. EWX_RESTARTAPPS 0x00000040 Shuts down the system and then restarts it, as well as any applications that have been registered for restart using the RegisterApplicationRestart function. These application receive the WM_QUERYENDSESSION message with lParam set to the ENDSESSION_CLOSEAPP value. For more information, see Guidelines for Applications. EWX_SHUTDOWN 0x00000001 Shuts down the system to a point at which it is safe to turn off the power. All file buffers have been flushed to disk, and all running processes have stopped. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section. Specifying this flag will not turn off the power even if the system supports the power-off feature. You must specify EWX_POWEROFF to do this.Windows XP with SP1: If the system supports the power-off feature, specifying this flag turns off the power. This parameter can optionally include one of the following values. ValueMeaning EWX_FORCE 0x00000004 This flag has no effect if terminal services is enabled. Otherwise, the system does not send the WM_QUERYENDSESSION message. This can cause applications to lose data. Therefore, you should only use this flag in an emergency. EWX_FORCEIFHUNG 0x00000010 Forces processes to terminate if they do not respond to the WM_QUERYENDSESSION or WM_ENDSESSION message within the timeout interval. For more information, see the Remarks.",
 "RestartDialogEx": "Type: HWND A handle to the parent window.",
 "SHAddFromPropSheetExtArray": "Type: HPSXA The array of property sheet handlers returned by SHCreatePropSheetExtArray.",
 "SHCreatePropSheetExtArray": "Type: HKEY The registry root key that contains the subkey with the property sheet extension handlers. For instance, HKEY_LOCAL_MACHINE.",
 "SHAlloc": "Type: SIZE_T The number of bytes of memory to allocate.",
 "SHAllocShared": "Type: const void* A pointer to the memory block in the calling process that is to be copied. You can set this parameter to NULL if you want to share a block of memory without copying any data to it.",
 "SHAnsiToAnsi": "Type: LPCSTR A pointer to a null-terminated ANSI string to be converted to Unicode.",
 "SHAnsiToUnicode": "Type: PCSTR A pointer to a null-terminated ANSI string to be converted to Unicode.",
 "SHCloneSpecialIDList": "Type: HWND Reserved.",
 "SHGetSpecialFolderLocation": "Type: HWND Reserved.",
 "SHCLSIDFromString": "Type: PCWSTR A Unicode string that contains the CLSID in the format, {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}.",
 "SHCoCreateInstance": "Type: PCWSTR A pointer to a string to convert to a CLSID. If NULL, pclsid is used as the CLSID.",
 "SHCreateDirectory": "Type: HWND A handle to a parent window. This parameter can be set to NULL if no user interface is displayed.",
 "SHCreateDirectoryEx": "Type: HWND A handle to a parent window. This parameter can be set to NULL if no user interface will be displayed.",
 "SHCreateFileExtractIcon": "Type: LPCTSTR A pointer to a null-terminated string that specifies the file system object. The buffer must not exceed MAX_PATH characters in length.",
 "SHCreateQueryCancelAutoPlayMoniker": "Type: IMoniker** The address of a IMoniker interface pointer that, when this function returns successfully, receives the QueryCancelAutoPlay class moniker. If this function call fails, this value is NULL.",
 "SHCreateStdEnumFmtEtc": "Type: UINT The number of entries in the afmt array.",
 "SHCreateStreamOnFile": "Type: LPCTSTR A pointer to a null-terminated string that specifies the file name.",
 "Shell_GetCachedImageIndex": "Type: PCWSTR A pointer to a buffer that contains the path to the image file.",
 "Shell_GetImageLists": "Type: HIMAGELIST* A pointer to the handle of an image list which, on success, receives the system image list for large (32 x 32) icons.",
 "Shell_MergeMenus": "Type: HMENU The destination menu to which hmSrc is added.",
 "ShellMessageBox": "Type: HINSTANCE The handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID.",
 "SHFind_InitMenuPopup": "Type: HMENU The handle of the popup menu.",
 "SHFindFiles": "Type: PCIDLIST_ABSOLUTE The folder from which to start the search. This folder appears in the Look in: box in the Search window. This folder and all of its subfolders are searched unless users choose other options in the Search window's More Advanced Options. This value can be NULL.",
 "SHFlushClipboard": null,
 "OleSetClipboard": "Pointer to the IDataObject interface on the data object from which the data to be placed on the clipboard can be obtained. This parameter can be NULL; in which case the clipboard is emptied.",
 "SHFlushSFCache": null,
 "SHFormatDateTime": "Type: const FILETIME UNALIGNED* A pointer to the FILETIME structure whose time is to be converted to a string.",
 "SHFormatDrive": "Type: HWND The handle of the parent window of the dialog box. The Format dialog box must have a parent window; therefore, this parameter cannot be NULL.",
 "SHFree": "Type: void* A pointer to the memory allocated by SHAlloc.",
 "SHFreeShared": "Type: HANDLE A handle to the mapped memory.",
 "SHGetAttributesFromDataObject": "Type: IDataObject* The data object from which to retrieve the information.",
 "SHGetFolderLocation": "Type: HWND Reserved.",
 "SHGetFolderPath": "Type: HWND Reserved.",
 "SHGetFolderPathAndSubDir": "Type: HWND Reserved.",
 "SHGetInverseCMAP": "Type: BYTE* A pointer to an array of BYTEs that receives the inverse color table mapping, or a pointer to an LPBYTE which receives a pointer to a cached copy of the inverse color table mapping, depending on the value of the cbMap parameter.",
 "SHGetRealIDL": "Type: IShellFolder* A pointer to an instance of IShellFolder whose simple PIDL is to be converted.",
 "SHGetSetFolderCustomSettings": "Type: LPSHFOLDERCUSTOMSETTINGS A pointer to a SHFOLDERCUSTOMSETTINGS structure that provides or receives the custom folder settings.",
 "SHGetSetSettings": "Type: LPSHELLSTATE A pointer to a SHELLSTATE structure that provides or receives the Shell state settings.",
 "SHGetSpecialFolderPath": "Type: HWND Reserved.",
 "SHGetViewStatePropertyBag": "Type: PCIDLIST_ABSOLUTE A PIDL of the folder for which you are requesting properties. This parameter must be NULL if the SHGVSPB_ALLFOLDERS flag is passed.",
 "SHHandleUpdateImage": "Type: PCIDLIST_ABSOLUTE The index in the system image list that has changed, specified in the pidl2 parameter of IShellChangeNotify::OnChange.",
 "SHILCreateFromPath": "Type: PCWSTR A pointer to a null-terminated string of maximum length MAX_PATH containing the path to be converted.",
 "SHInvokePrinterCommand": "Type: HWND The handle of the parent window of any windows or dialog boxes that are created during the operation.",
 "SHIsChildOrSelf": "Type: HWND A handle to the first window.",
 "SHLimitInputEdit": "Type: HWND The handle of the edit control.",
 "SHLoadOLE": "Type: LPARAM Ignored.",
 "SHLockShared": "Type: HANDLE A handle to the memory you want to map into the calling process.",
 "SHMapPIDLToSystemImageListIndex": "Type: IShellFolder* An IShellFolder interface pointer for the folder that contains the item.",
 "SHMessageBoxCheck": "Type: HWND The window handle to the message box's owner. This value can be NULL.",
 "SHObjectProperties": "Type: HWND The handle of the parent window of the dialog box. This value can be NULL.",
 "SHOpenPropSheet": "Type: LPCTSTR A pointer to a string that contains the caption for the property sheet. This value can be NULL if no caption is needed.",
 "SHRegGetBoolValueFromHKCUHKLM": "Type: PCWSTR A pointer to a null-terminated Unicode string that specifies the path to the key to be checked.",
 "SHRegGetValueFromHKCUHKLM": "Type: PCWSTR A pointer to a null-terminated Unicode string that specifies the path to the registry key.",
 "SHReplaceFromPropSheetExtArray": "Type: HPSXA A property sheet array handle (HPSXA) returned from a call to SHCreatePropSheetExtArray.",
 "SHRestricted": "Type: RESTRICTIONS Specifies one of the flags described in the RESTRICTIONS enumerated type.",
 "SHSetFolderPath": "Type: int A CSIDL value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails. Add the CSIDL_FLAG_DONT_UNEXPAND value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the CSIDL_FLAG_DONT_UNEXPAND flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%.",
 "SHSendMessageBroadcast": "Type: UINT The message to send.",
 "SHShellFolderView_Message": "Type: HWND A handle to the window that receives the message.",
 "SHSimpleIDListFromPath": "Type: PCWSTR A pointer to a null-terminated string that contains the path to be converted to a PIDL.",
 "SHStartNetConnectionDialog": "Type: HWND A handle to the parent window.",
 "SHStripMneumonic": "Type: LPTSTR* A pointer to the null-terminated string that contains the mnemonic marker.",
 "SHUnicodeToAnsi": "Type: PCWSTR A pointer to the null-terminated Unicode string to be converted to ANSI.",
 "SHUnicodeToUnicode": "Type: PCWSTR A pointer to a null-terminated Unicode string to be copied to the output buffer.",
 "SHUnlockShared": "Type: void* A pointer to the shared memory block returned by SHLockShared.",
 "SHValidateUNC": "Type: HWND Handle of the parent window, used to display UI. If this is not needed, this value can be set to NULL.",
 "SignalFileOpen": "Type: PCIDLIST_ABSOLUTE A PIDL that specifies the file.",
 "StopWatchFlush": null,
 "StopWatchMode": null,
 "UpdateAllDesktopSubscriptions": "Type: IADesktopP2* A pointer to an IADesktopP2 interface.",
 "UrlFixupW": "Type: PCWSTR A pointer to a null-terminated string that contains the URL to be corrected. This string must not exceed INTERNET_MAX_PATH_LENGTH characters in length, including the terminating NULL character.",
 "WhichPlatform": null,
 "Win32DeleteFile": "Type: PCWSTR A pointer to a buffer that contains the full name of the file to delete.",
 "WOWShellExecute": "Type: HWND A handle to the owner window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window.",
 "WriteCabinetState": "Type: CABINETSTATE* A pointer to a CABINETSTATE structure that holds the values to be set.",
 "RM_WRITE_STATUS_CALLBACK pointer": "An integer value between 0 and 100 that indicates the percentage of the total number of applications that have either been shut down or restarted.",
 "CleanupCredentialCache": null,
 "CommitUrlCacheEntryA": "Pointer to a string variable that contains the source name of the cache entry. The name string must be unique and should not contain any escape characters.",
 "CommitUrlCacheEntryW": "Pointer to a string variable that contains the source name of the cache entry. The name string must be unique and should not contain any escape characters.",
 "CreateMD5SSOHash": "Pointer to the wide-character challenge string to use for the MD5 hash.",
 "CreateUrlCacheEntry": "Pointer to a string value that contains the name of the URL. The string must contain a value; an empty string will cause CreateUrlCacheEntry to fail. In addition, the string must not contain any escape characters.",
 "CreateUrlCacheGroup": "Controls the creation of the cache group. This parameter can be set to CACHEGROUP_FLAG_GIDONLY, which causes CreateUrlCacheGroup to generate a unique GROUPID, but does not create a physical group.",
 "DeleteUrlCacheEntry": "Pointer to a string that contains the name of the source that corresponds to the cache entry.",
 "DeleteUrlCacheGroup": "ID of the cache group to be released.",
 "DetectAutoProxyUrl": "Pointer to a buffer to receive the URL from which a WPAD autoproxy script can be downloaded.",
 "FindCloseUrlCache": "Handle returned by a previous call to the FindFirstUrlCacheEntry function.",
 "FindFirstUrlCacheEntry": "A pointer to a string that contains the source name pattern to search for. This parameter can only be set to \"cookie:\", \"visited:\", or NULL. Set this parameter to \"cookie:\" to enumerate the cookies or \"visited:\" to enumerate the URL History entries in the cache. If this parameter is NULL, FindFirstUrlCacheEntry returns all content entries in the cache.",
 "FindFirstUrlCacheEntryEx": "A pointer to a string that contains the source name pattern to search for. This parameter can only be set to \"cookie:\", \"visited:\", or NULL. Set this parameter to \"cookie:\" to enumerate the cookies or \"visited:\" to enumerate the URL History entries in the cache. If this parameter is NULL, FindFirstUrlCacheEntryEx returns all content entries in the cache.",
 "FindFirstUrlCacheGroup": "This parameter is reserved and must be 0.",
 "FindNextUrlCacheEntry": "Handle to the enumeration obtained from a previous call to FindFirstUrlCacheEntry.",
 "FindNextUrlCacheEntryEx": "Handle returned by FindFirstUrlCacheEntryEx, which started a cache enumeration.",
 "FindNextUrlCacheGroup": "The cache group enumeration handle, which is returned by FindFirstUrlCacheGroup.",
 "FtpCommand": "A handle returned from a call to InternetConnect.",
 "FtpCreateDirectory": "Handle returned by a previous call to InternetConnect using INTERNET_SERVICE_FTP.",
 "FtpDeleteFile": "Handle returned by a previous call to InternetConnect using INTERNET_SERVICE_FTP.",
 "FtpFindFirstFile": "Handle to an FTP session returned from InternetConnect.",
 "FtpGetCurrentDirectory": "Handle to an FTP session.",
 "FtpGetFile": "Handle to an FTP session.",
 "FtpGetFileSize": "Handle returned from a call to FtpOpenFile.",
 "FtpOpenFile": "Handle to an FTP session.",
 "FtpPutFile": "Handle to an FTP session.",
 "FtpRemoveDirectory": "Handle to an FTP session.",
 "FtpRenameFile": "Handle to an FTP session.",
 "FtpSetCurrentDirectory": "Handle to an FTP session.",
 "GetUrlCacheEntryInfo": "A pointer to a null-terminated string that contains the name of the cache entry. The name string should not contain any escape characters.",
 "GetUrlCacheEntryInfoEx": "A pointer to a null-terminated string that contains the name of the cache entry. The name string should not contain any escape characters.",
 "GetUrlCacheGroupAttribute": "Identifier of the cache group.",
 "GopherAttributeEnumerator": "Pointer to a GOPHER_ATTRIBUTE_TYPE structure. The lpBuffer parameter of GopherGetAttribute is used for storing this structure. The lpBuffer size must be equal to or greater than the value of MIN_GOPHER_ATTRIBUTE_LENGTH.",
 "GopherCreateLocator": "Pointer to a null-terminated string that contains the name of the host, or a dotted-decimal IP address (such as 198.105.232.1).",
 "GopherFindFirstFile": "Handle to a Gopher session returned by InternetConnect.",
 "GopherGetAttribute": "Handle to a Gopher session returned by InternetConnect.",
 "GopherGetLocatorType": "Pointer to a null-terminated string that specifies the Gopher locator to be parsed.",
 "GopherOpenFile": "Handle to a Gopher session returned by InternetConnect.",
 "HttpAddRequestHeaders": "A handle returned by a call to the HttpOpenRequest function.",
 "HttpEndRequest": "Handle returned by HttpOpenRequest and sent by HttpSendRequestEx.",
 "HttpOpenRequest": "A \t\t\t\t\t\thandle to an HTTP session returned by InternetConnect.",
 "HttpQueryInfo": "A handle returned by a call to the HttpOpenRequest or InternetOpenUrl function.",
 "HttpSendRequest": "A handle returned by a call to the HttpOpenRequest function.",
 "HttpSendRequestEx": "A \t\t\t\t\t\thandle returned by a call to the HttpOpenRequest function.",
 "InternetAttemptConnect": "This parameter is reserved and must be 0.",
 "InternetAutodial": "Controls this operation. This parameter can be one of the following values. ValueMeaning INTERNET_AUTODIAL_FAILIFSECURITYCHECK 0x04 Causes InternetAutodial to fail if file and printer sharing is disabled for Windows 95 or later. Windows Server 2008 and Windows Vista: This flag is obsolete. INTERNET_AUTODIAL_FORCE_ONLINE 0x01 Forces an online Internet connection. INTERNET_AUTODIAL_FORCE_UNATTENDED 0x02 Forces an unattended Internet dial-up. INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT 0x08 Causes InternetAutodial to dial the modem connection even when a network connection to the Internet is present.",
 "InternetAutodialHangup": "This parameter is reserved and must be 0.",
 "InternetCanonicalizeUrl": "A pointer to the string that contains the URL to canonicalize.",
 "InternetCheckConnection": "Pointer to a null-terminated string that specifies the URL to use to check the connection. This value can be NULL.",
 "InternetCloseHandle": "Handle to be closed.",
 "InternetCombineUrl": "Pointer to a null-terminated string that contains the base URL.",
 "InternetConfirmZoneCrossing": "Handle to the parent window for any required dialog box.",
 "InternetConnect": "Handle returned by a previous call to InternetOpen.",
 "InternetCrackUrl": "Pointer to a string that contains the canonical URL to be cracked.",
 "InternetCreateUrl": "Pointer to a URL_COMPONENTS structure that contains the components from which to create the URL.",
 "InternetDeInitializeAutoProxyDll": "This parameter is reserved and must be NULL.",
 "InternetDial": "Handle to the parent window.",
 "InternetErrorDlg": "Handle to the parent window for any needed dialog box. If no dialog box is needed and FLAGS_ERROR_UI_FLAGS_NO_UI is passed to dwFlags, then this parameter can be NULL.",
 "InternetFindNextFile": "Handle returned from either FtpFindFirstFile or InternetOpenUrl (directories only). Windows XP and Windows Server 2003 R2 and earlier: Also a handle returned from GopherFindFirstFile.",
 "InternetGetConnectedState": "Pointer to a variable that receives the connection description. This parameter may return a valid flag even when the function returns FALSE. This parameter can be one or more of the following values. ValueMeaning INTERNET_CONNECTION_CONFIGURED 0x40 Local system has a valid connection to the Internet, but it might or might not be currently connected. INTERNET_CONNECTION_LAN 0x02 Local system uses a local area network to connect to the Internet. INTERNET_CONNECTION_MODEM 0x01 Local system uses a modem to connect to the Internet. INTERNET_CONNECTION_MODEM_BUSY 0x08 No longer used. INTERNET_CONNECTION_OFFLINE 0x20 Local system is in offline mode. INTERNET_CONNECTION_PROXY 0x04 Local system uses a proxy server to connect to the Internet. INTERNET_RAS_INSTALLED 0x10 Local system has RAS installed.",
 "InternetGetConnectedStateEx": "Pointer to a variable that receives the connection description. This parameter may return a valid flag even when the function returns FALSE. This parameter can be a combination of the following values. ValueMeaning INTERNET_CONNECTION_CONFIGURED 0x40 Local system has a valid connection to the Internet, but it might or might not be currently connected. INTERNET_CONNECTION_LAN 0x02 Local system uses a local area network to connect to the Internet. INTERNET_CONNECTION_MODEM 0x01 Local system uses a modem to connect to the Internet. INTERNET_CONNECTION_MODEM_BUSY 0x08 No longer used. INTERNET_CONNECTION_OFFLINE 0x20 Local system is in offline mode. INTERNET_CONNECTION_PROXY 0x04 Local system uses a proxy server to connect to the Internet.",
 "InternetGetCookie": "A pointer to a null-terminated string that specifies the URL for which cookies are to be retrieved.",
 "InternetGetCookieEx": "A pointer to a null-terminated string that contains the URL with which the cookie to retrieve is associated. This parameter cannot be NULL or InternetGetCookieEx fails and returns an ERROR_INVALID_PARAMETER error.",
 "InternetGetLastResponseInfo": "Pointer to a variable that receives an error message pertaining to the operation that failed.",
 "InternetGetProxyInfo": "A pointer to a null-terminated string that specifies the URL of the target HTTP resource.",
 "InternetGoOnline": "Pointer to a null-terminated string that specifies the URL of the website for the connection.",
 "InternetHangUp": "Connection number of the connection to be disconnected.",
 "InternetInitializeAutoProxyDll": "This parameter is reserved and must be 0.",
 "InternetLockRequestFile": "Handle returned by the FtpOpenFile, GopherOpenFile, HttpOpenRequest, or InternetOpenUrl function.",
 "InternetOpen": "Pointer to a null-terminated string that specifies the name of the application or entity calling the WinINet functions. This name is used as the user agent in the HTTP protocol.",
 "InternetOpenUrl": "The handle to the current Internet session. The handle must have been returned by a previous call to InternetOpen.",
 "InternetQueryDataAvailable": "Handle returned by the InternetOpenUrl, FtpOpenFile, GopherOpenFile, or HttpOpenRequest function.",
 "InternetQueryOption": "Handle on which to query information.",
 "InternetReadFile": "Handle returned from a previous call to InternetOpenUrl, FtpOpenFile, or HttpOpenRequest.",
 "InternetReadFileEx": "Handle returned by the InternetOpenUrl or HttpOpenRequest function.",
 "InternetSetCookie": "Pointer to a null-terminated string that specifies the URL for which the cookie should be set.",
 "InternetSetCookieEx": "Pointer to a null-terminated string that contains the URL for which the cookie should be set. If this pointer is NULL, InternetSetCookieEx fails with an ERROR_INVALID_PARAMETER error.",
 "InternetSetFilePointer": "Handle returned from a previous call to InternetOpenUrl (on an HTTP or HTTPS \t\t\t\t\t\tURL) or HttpOpenRequest (using the GET or HEAD HTTP verb and passed to HttpSendRequest or HttpSendRequestEx). This handle must not have been created with the INTERNET_FLAG_DONT_CACHE or INTERNET_FLAG_NO_CACHE_WRITE value set.",
 "InternetSetOption": "Handle on which to set information.",
 "InternetSetStatusCallback": "The \t\t\t\t\t\thandle for which the callback is set.",
 "InternetStatusCallback": "The handle for which the callback function is called.",
 "InternetTimeFromSystemTime": "Pointer to a SYSTEMTIME structure that contains the date and time to format.",
 "InternetTimeToSystemTime": "Pointer to a null-terminated string that specifies the date/time to be converted.",
 "InternetUnlockRequestFile": "Handle to a lock request that was returned by InternetLockRequestFile.",
 "InternetWriteFile": "Handle returned from a previous call to FtpOpenFile or an HINTERNET handle sent by HttpSendRequestEx.",
 "ReadUrlCacheEntryStream": "Handle that was returned by the RetrieveUrlCacheEntryStream function.",
 "ResumeSuspendedDownload": "Handle of the request that is suspended by a user interface dialog box.",
 "RetrieveUrlCacheEntryFile": "Pointer to a string that contains the URL of the resource associated with the cache entry. This must be a unique name. The name string should not contain any escape characters.",
 "RetrieveUrlCacheEntryStream": "Pointer to a null-terminated string that contains the source name of the cache entry. This must be a unique name. The name string should not contain any escape characters.",
 "SetUrlCacheEntryGroup": "Pointer to a null-terminated string value that specifies the URL of the cached resource.",
 "SetUrlCacheEntryInfo": "Pointer to a null-terminated string that specifies the name of the cache entry. The name string should not contain any escape characters.",
 "SetUrlCacheGroupAttribute": "Identifier of the cache group.",
 "UnlockUrlCacheEntryFile": "Pointer to a null-terminated string that specifies the source name of the cache entry that is being unlocked. The name string should not contain any escape characters.",
 "UnlockUrlCacheEntryStream": "Handle that was returned by the RetrieveUrlCacheEntryStream function.",
 "InternetClearAllPerSiteCookieDecisions": null,
 "InternetEnumPerSiteCookieDecision": "An LPSTR that receives a string specifying a website domain.",
 "InternetGetPerSiteCookieDecision": "An LPCTSTR that points to a string containing a domain.",
 "InternetSetPerSiteCookieDecision": "An LPCTSTR that points to a string containing a domain.",
 "PrivacyGetZonePreferenceW": "A value of type DWORD that specifies the URLZONE for which privacy settings are being retrieved.",
 "PrivacySetZonePreferenceW": "Value of type DWORD that specifies the URLZONEfor which privacy settings are being set.",
 "AddERExcludedApplication": "The name of the executable file for the application, including the file name extension. The name cannot contain path information.",
 "OutOfProcessExceptionEventCallback": "A pointer to arbitrary context information that you specified when you called the WerRegisterRuntimeExceptionModule function to register the exception handler.",
 "OutOfProcessExceptionEventDebuggerLaunchCallback": "A pointer to arbitrary context information that you specified when you called the WerRegisterRuntimeExceptionModule function to register the exception handler.",
 "OutOfProcessExceptionEventSignatureCallback": "A pointer to arbitrary context information that you specified when you called the WerRegisterRuntimeExceptionModule function to register the exception handler.",
 "ReportFault": "A pointer to an EXCEPTION_POINTERS structure.",
 "WerAddExcludedApplication": "A pointer to a Unicode string that specifies the name of the executable file for the application, including the file name extension. The maximum length of this path is MAX_PATH characters.",
 "WerFreeString": "The string to be freed (value set to NULL).",
 "WerStoreGetFirstReportKey": "The error report store (previously retrieved with WerStoreOpen).",
 "WerStoreGetNextReportKey": "The error report store (previously retrieved with WerStoreOpen).",
 "WerGetFlags": "A handle to the process. This handle must have the PROCESS_VM_READ or PROCESS_QUERY_INFORMATION access right.",
 "WerRegisterAdditionalProcess": "The Id of the process to register.",
 "WerRegisterCustomMetadata": "The \"key\" string for the metadata element being registered.",
 "WerRegisterExcludedMemoryBlock": "The starting address of the memory block.",
 "WerRegisterFile": "The full path to the file. The maximum length of this path is MAX_PATH characters.",
 "WerRegisterMemoryBlock": "The starting address of the memory block.",
 "WerRegisterRuntimeExceptionModule": "The name of the exception handler DLL to register.",
 "WerRemoveExcludedApplication": "A pointer to a Unicode string that specifies the name of the executable file for the application, including the file name extension. The maximum length of this path is MAX_PATH characters. This file must have been excluded using the WerAddExcludedApplication function or WerRemoveExcludedApplication fails.",
 "WerReportAddDump": "A handle to the report. This handle is returned by the WerReportCreate function.",
 "WerReportAddFile": "A handle to the report. This handle is returned by the WerReportCreate function.",
 "WerReportCloseHandle": "A handle to the report. This handle is returned by the WerReportCreate function.",
 "WerReportCreate": "A pointer to a Unicode string that specifies the name of the event.",
 "WerReportHang": "Handle to the window that is not responding.",
 "WerReportSetParameter": "A handle to the report. This handle is returned by the WerReportCreate function.",
 "WerReportSetUIOption": "A handle to the report. This handle is returned by the WerReportCreate function.",
 "WerReportSubmit": "A handle to the report. This handle is returned by the WerReportCreate function.",
 "WerSetFlags": "The fault reporting settings. You can specify one or more of the following values: ValueMeaning WER_FAULT_REPORTING_FLAG_DISABLE_THREAD_SUSPENSION Do not suspend the process threads before reporting the error. WER_FAULT_REPORTING_FLAG_NOHEAP Do not collect heap information in the event of an application crash or non-response. WER_FAULT_REPORTING_FLAG_QUEUE Queue critical reports. WER_FAULT_REPORTING_FLAG_QUEUE_UPLOAD Queue critical reports and upload from the queue. WER_FAULT_REPORTING_ALWAYS_SHOW_UI Always show error reporting UI for this process. This is applicable for interactive applications only.",
 "WerStoreClose": "The error report store to close (previously retrieved with WerStoreOpen).",
 "WerStoreOpen": "The type of report store to open. See Remarks for details.",
 "WerStoreQueryReportMetadataV2": "The error report store (previously retrieved with WerStoreOpen).",
 "WerUnregisterAdditionalProcess": "The Id of the process to remove. It must have been previously registered with WerRegisterAdditionalProcess.",
 "WerUnregisterCustomMetadata": "The \"key\" string for the metadata element being removed. It must have been previously registered with the WerRegisterCustomMetadata function.",
 "WerUnregisterExcludedMemoryBlock": "The starting address of the memory block. This memory block must have been registered using the WerRegisterExcludedMemoryBlock function.",
 "WerUnregisterFile": "The full path to the file. This file must have been registered using the WerRegisterFile function.",
 "WerUnregisterMemoryBlock": "The starting address of the memory block. This memory block must have been registered using the WerRegisterMemoryBlock function.",
 "WerUnregisterRuntimeExceptionModule": "The name of the exception handler DLL whose registration you want to remove.",
 "CreateVssBackupComponents": "Doubly indirect pointer to the created IVssBackupComponents interface object.",
 "CreateVssExamineWriterMetadata": "An XML string containing a Writer Metadata Document with which to initialize the returned IVssExamineWriterMetadata object.",
 "CreateVssExpressWriter": "Doubly indirect pointer to the newly created IVssExpressWriter object.",
 "CreateWriterEx": "Reserved.",
 "IsVolumeSnapshotted": "Name of the volume. The name of the volume to be checked must be in one of the following formats and must include a trailing backslash (\\): The path of a mounted folder, for example, Y:\\MountX\\ A drive letter, for example, D:\\ A volume GUID path of the form \\\\?\\Volume{GUID}\\ (where GUID identifies the volume)",
 "ShouldBlockRevert": "The name of the volume. This name must be in one of the following formats and must include a trailing backslash (\\): The path of a mounted folder, for example, Y:\\MountX\\ A drive letter, for example, D:\\ A volume GUID path of the form \\\\?\\Volume{GUID}\\ (where GUID identifies the volume)",
 "VssFreeSnapshotProperties": "Pointer to a valid VSS_SNAPSHOT_PROP object.",
 "PssCaptureSnapshot": "A handle to the target process.",
 "PssDuplicateSnapshot": "A handle to the source process from which the original snapshot was captured. The handle must have PROCESS_VM_READ and PROCESS_DUP_HANDLE rights.",
 "PssFreeSnapshot": "A handle to the process that contains the snapshot. The handle must have PROCESS_VM_READ, PROCESS_VM_OPERATION, and PROCESS_DUP_HANDLE rights. If the snapshot was captured from the current process, or duplicated into the current process, then pass in the result of GetCurrentProcess.",
 "PssQuerySnapshot": "A handle to the snapshot to query.",
 "PssWalkMarkerCreate": "A structure that provides functions to allocate and free memory. If you provide the structure, PssWalkMarkerCreate uses the functions to allocate the internal walk marker structures. Otherwise it uses the default process heap. For more information, see PSS_ALLOCATOR.",
 "PssWalkMarkerFree": "A handle to the walk marker.",
 "PssWalkMarkerGetPosition": "A handle to the walk marker.",
 "PssWalkMarkerSeekToBeginning": "A handle to the walk marker.",
 "PssWalkMarkerSetPosition": "A handle to the walk marker.",
 "PssWalkSnapshot": "A handle to the snapshot.",
 "OperationStart": "An _OPERATION_START_PARAMETERS structure that specifies VERSION, OPERATION_ID and FLAGS.",
 "OperationEnd": "An _OPERATION_END_PARAMETERS structure that specifies VERSION, OPERATION_ID and FLAGS.",
 "PifMgr_CloseProperties": "Type: HANDLE A handle to the application's properties. This parameter should be set to the value that is returned by PifMgr_OpenProperties.",
 "PifMgr_OpenProperties": "Type: PCWSTR A null-terminated Unicode string that contains the application's name.",
 "PifMgr_GetProperties": "Type: HANDLE A handle to an application's properties. This parameter should be set to the value that is returned by PifMgr_OpenProperties.",
 "PifMgr_SetProperties": "Type: HANDLE A handle to the application's properties. This parameter should be set to the value that is returned by PifMgr_OpenProperties.",
 "PSCoerceToCanonicalValue": "Type: REFPROPERTYKEY Reference to a PROPERTYKEY structure that identifies the property whose value is to be coerced.",
 "PSCreateAdapterFromPropertyStore": "Type: IPropertyStore* Pointer to an IPropertyStore object that represents the property store.",
 "PSCreateDelayedMultiplexPropertyStore": "Type: GETPROPERTYSTOREFLAGS One or more GETPROPERTYSTOREFLAGS values. These values specify details of the created property store object.",
 "PSCreateMemoryPropertyStore": "Type: REFIID Reference to the requested interface ID.",
 "PSCreateMultiplexPropertyStore": "Type: IUnknown** Address of a pointer to an array of property stores that implement either IPropertyStore or IPropertySetStorage.",
 "PSCreatePropertyChangeArray": "Type: const PROPERTYKEY* Pointer to an array of PROPERTYKEY structures that name the specific properties whose changes are being stored. If this value is NULL, cChanges must be 0.",
 "PSCreatePropertyStoreFromObject": "Type: IUnknown* A pointer to an interface that supports either IPropertyStore or IPropertySetStorage.",
 "PSCreatePropertyStoreFromPropertySetStorage": "Type: IPropertySetStorage* A pointer to an IPropertySetStorage interface.",
 "PSCreateSimplePropertyChange": "Type: PKA_FLAGS PKA_FLAGS flags.",
 "PSEnumeratePropertyDescriptions": "Type: PROPDESC_ENUMFILTER The list to return. PROPDESC_ENUMFILTER shows the valid values for this method.",
 "PSFormatForDisplay": "Type: REFPROPERTYKEY Reference to a PROPERTYKEY that names the property whose value is being retrieved.",
 "PSFormatForDisplayAlloc": "Type: REFPROPERTYKEY Reference to a PROPERTYKEY that names the property whose value is being retrieved.",
 "PSFormatPropertyValue": "Type: IPropertyStore* Pointer to an IPropertyStore, which represents the property store from which the property value is taken.",
 "PSGetImageReferenceForValue": "Type: REFPROPERTYKEY A reference to a PROPERTYKEY structure that specifies the property.",
 "PSGetItemPropertyHandler": "Type: IUnknown* A pointer to the IUnknown interface of a Shell item that supports IShellItem. Windows XP: Use SHCreateShellItem to create the Shell item. Windows Vista: Use SHCreateItemFromIDList, SHCreateItemFromParsingName, SHCreateItemFromRelativeName, SHCreateItemInKnownFolder, or SHCreateItemWithParent to create the Shell item.",
 "PSGetItemPropertyHandlerWithCreateObject": "Type: IUnknown* A pointer to the IUnknown interface of a Shell item that supports IShellItem. Windows XP: Use SHCreateShellItem to create the Shell item. Windows Vista: Use SHCreateItemFromIDList, SHCreateItemFromParsingName, SHCreateItemFromRelativeName, SHCreateItemInKnownFolder, or SHCreateItemWithParent to create the Shell item.",
 "PSGetNamedPropertyFromPropertyStorage": "Type: PCUSERIALIZEDPROPSTORAGE A pointer to an allocated buffer that contains the serialized properties. Call IPersistSerializedPropStorage::GetPropertyStorage to obtain the buffer.",
 "PSGetNameFromPropertyKey": "Type: REFPROPERTYKEY Reference to a PROPERTYKEY structure that identifies the requested property.",
 "PSGetPropertyDescription": "Type: REFPROPERTYKEY Reference to a PROPERTYKEY.",
 "PSGetPropertyDescriptionByName": "Type: LPCWSTR A pointer to a null-terminated, Unicode string that identifies the property.",
 "PSGetPropertyDescriptionListFromString": "Type: LPCWSTR Pointer to a null-terminated, Unicode string that identifies the property list. See IPropertySystem::GetPropertyDescriptionListFromString for more information about the format of this parameter.",
 "PSGetPropertyFromPropertyStorage": "Type: PCUSERIALIZEDPROPSTORAGE Pointer to an allocated buffer that contains the serialized properties. This buffer is obtained by a call to IPersistSerializedPropStorage::GetPropertyStorage.",
 "PSGetPropertyKeyFromName": "Type: PCWSTR Pointer to a property name as a null-terminated, Unicode string.",
 "PSGetPropertySystem": "Type: REFIID Reference to the IID of the requested interface.",
 "PSGetPropertyValue": "Type: IPropertyStore* Pointer to an instance of the IPropertyStore interface, which represents the property store from which to get the value.",
 "PSLookupPropertyHandlerCLSID": "Type: PCWSTR Pointer to a null-terminated, Unicode buffer that contains the absolute path of the file whose property handler CLSID is requested.",
 "PSPropertyBag_Delete": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadBOOL": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadBSTR": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadDWORD": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadGUID": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadInt": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadLONG": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadPOINTL": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadPOINTS": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadPropertyKey": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadRECTL": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadSHORT": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadStr": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadStrAlloc": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadStream": "Type: IPropertyBag* A pointer to an IPropertyBag object, that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadType": "Type: IPropertyBag* A pointer to an IPropertyBag object, that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadULONGLONG": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_ReadUnknown": "Type: IPropertyBag* A pointer to an IPropertyBag object, that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteBOOL": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteBSTR": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteDWORD": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteGUID": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteInt": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteLONG": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WritePOINTL": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WritePOINTS": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WritePropertyKey": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteRECTL": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteSHORT": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteStr": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteStream": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteULONGLONG": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyBag_WriteUnknown": "Type: IPropertyBag* A pointer to an IPropertyBag object that represents the property bag in which the property is stored.",
 "PSPropertyKeyFromString": "Type: LPCWSTR Pointer to a null-terminated, Unicode string to be converted.",
 "PSRegisterPropertySchema": "Type: PCWSTR Pointer to the full file path, as a Unicode string, to the property description schema (.propdesc) file on the local machine. This can be either a fully-specified full path, or a full path that includes environment variables such as %PROGRAMFILES%.",
 "PSSetPropertyValue": "Type: IPropertyStore* Pointer to an instance of the IPropertyStore interface, which represents the property store that contains the property.",
 "PSStringFromPropertyKey": "Type: REFPROPERTYKEY Reference to a PROPERTYKEY structure that identifies a property.",
 "PSUnregisterPropertySchema": "Type: PCWSTR Pointer to the full file path, as a Unicode string, to the property description schema (.propdesc) file on the local machine. This can be either a fully-specified full path, or a full path that includes environment variables such as %PROGRAMFILES%.",
 "SHAddDefaultPropertiesByExt": "Type: PCWSTR A pointer to a null-terminated, Unicode string that specifies the extension.",
 "SHGetPropertyStoreForWindow": "Type: HWND A handle to the window whose properties are being retrieved.",
 "SHGetPropertyStoreFromIDList": "Type: PCIDLIST_ABSOLUTE A pointer to an item ID list.",
 "SHGetPropertyStoreFromParsingName": "Type: PCWSTR A pointer to a null-terminated Unicode string that specifies the item path.",
 "SHPropStgCreate": "Type: IPropertySetStorage* A pointer to an IPropertySetStorage interface.",
 "SHPropStgReadMultiple": "Type: IPropertyStorage* An IPropertyStorage interface pointer that identifies the property store.",
 "SHPropStgWriteMultiple": "Type: IPropertyStorage* An IPropertyStorage interface pointer that identifies the property store.",
 "GetDiskFreeSpace": "The root directory of the disk for which information is to be returned. If this parameter is NULL, the function uses the root of the current disk. If this parameter is a UNC name, it must include a trailing backslash (for example, \"\\\\MyServer\\MyShare\\\"). Furthermore, a drive specification must have a trailing backslash (for example, \"C:\\\"). The calling application must have FILE_LIST_DIRECTORY access rights for this directory.",
 "GetDiskFreeSpaceEx": "A directory on the disk. If this parameter is NULL, the function uses the root of the current disk. If this parameter is a UNC name, it must include a trailing backslash, for example, \"\\\\MyServer\\MyShare\\\". This parameter does not have to specify the root directory on a disk. The function accepts any directory on a disk. The calling application must have FILE_LIST_DIRECTORY access rights for this directory.",
 "CreateFile": "The name of the file or device to be created or opened. You may use either forward slashes (/) or backslashes (\\) in this name. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming Files, Paths, and Namespaces. For information on special device names, see Defining an MS-DOS Device Name. To create a file stream, specify the name of the file, a colon, and then the name of the stream. For more information, see File Streams. Tip Starting with Windows 10, version 1607, for the unicode version of this function (CreateFileW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "DeleteFile": "The name of the file to be deleted. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see Naming a File. Tip Starting in Windows 10, version 1607, for the unicode version of this function (DeleteFileW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". See the \"Maximum Path Limitation\" section of Naming Files, Paths, and Namespaces for details.",
 "WFD_DISPLAY_SINK_NOTIFICATION_CALLBACK": "An optional context pointer passed to the callback function.",
 "WFD_OPEN_SESSION_COMPLETE_CALLBACK": "A session handle to a Wi-Fi Direct session. This is a session handle previously returned by the WFDStartOpenSession function.",
 "WFDCancelOpenSession": "A session handle to a Wi-Fi Direct session to cancel. This is a session handle previously returned by the WFDStartOpenSession function.",
 "WFDDisplaySinkCloseSession": "The handle received via the most recent WFD_DISPLAY_SINK_NOTIFICATION_CALLBACK invocation that included one.",
 "WFDCloseHandle": "A client handle to the Wi-Fi Direct service. This handle was obtained by a previous call to the WFDOpenHandle function.",
 "WFDOpenHandle": "The highest version of the Wi-Fi Direct API the client supports. For Windows 8 and Windows Server 2012, this parameter should be set to WFD_API_VERSION, constant defined in the Wlanapi.h header file.",
 "WFDOpenLegacySession": "A HANDLE to the Wi-Fi Direct service for this session. This parameter is retrieved using the WFDOpenHandle function.",
 "WFDDisplaySinkSetPersistedGroupIDList": "The count of group ids being pointed to by pGroupIDList.",
 "WFDDisplaySinkStart": "The device category.",
 "WFDStartOpenSession": "A client handle to the Wi-Fi Direct service. This handle was obtained by a previous call to the WFDOpenHandle function.",
 "WFDDisplaySinkStop": null,
 "WFDUpdateDeviceVisibility": "A pointer to the Wi-Fi Direct device address of the client device. This device address must be obtained from a Device Node created as a result of the Inbox pairing experience.",
 "WLAN_NOTIFICATION_CALLBACK pointer": "A pointer to a WLAN_NOTIFICATION_DATA structure that contains the notification information. Windows XP with SP3 and Wireless LAN API for Windows XP with SP2: Only the wlan_notification_acm_connection_complete and wlan_notification_acm_disconnected notifications are available.",
 "WlanAllocateMemory": "Amount of memory being requested, in bytes.",
 "WlanCloseHandle": "The client's session handle, which identifies the connection to be closed. This handle was obtained by a previous call to the WlanOpenHandle function.",
 "WlanConnect": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanDeleteProfile": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanDisconnect": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanEnumInterfaces": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanExtractPsdIEDataList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanFreeMemory": "Pointer to the memory to be freed.",
 "WlanGetAvailableNetworkList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanGetFilterList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanGetInterfaceCapability": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanGetNetworkBssList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanGetProfile": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanGetProfileCustomUserData": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanGetProfileList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanGetSecuritySettings": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkForceStart": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkForceStop": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkInitSettings": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkQueryProperty": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkQuerySecondaryKey": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkQueryStatus": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkRefreshSecuritySettings": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkSetProperty": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkSetSecondaryKey": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkStartUsing": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanHostedNetworkStopUsing": "The client's session handle, returned by a previous call to the WlanOpenHandle function.",
 "WlanIhvControl": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanOpenHandle": "The highest version of the WLAN API that the client supports. ValueMeaning 1 Client version for Windows XP with SP3 and Wireless LAN API for Windows XP with SP2. 2 Client version for Windows Vista and Windows Server 2008",
 "WlanQueryAutoConfigParameter": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanQueryInterface": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanReasonCodeToString": "A WLAN_REASON_CODE value of which the string description is requested.",
 "WlanRegisterNotification": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanRegisterVirtualStationNotification": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanRenameProfile": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSaveTemporaryProfile": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanScan": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetAutoConfigParameter": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetFilterList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetInterface": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetProfile": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetProfileCustomUserData": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetProfileEapUserData": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetProfileEapXmlUserData": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetProfileList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetProfilePosition": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetPsdIEDataList": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanSetSecuritySettings": "The client's session handle, obtained by a previous call to the WlanOpenHandle function.",
 "WlanUIEditProfile": "Specifies the highest version of the WLAN API that the client supports. Values other than WLAN_UI_API_VERSION will be ignored.",
 "ClipCursor": "Type: const RECT* A pointer to the structure that contains the screen coordinates of the upper-left and lower-right corners of the confining rectangle. If this parameter is NULL, the cursor is free to move anywhere on the screen.",
 "CopyCursor": "Type: HCURSOR A handle to the cursor to be copied.",
 "CreateCursor": "Type: HINSTANCE A handle to the current instance of the application creating the cursor.",
 "DestroyCursor": "Type: HCURSOR A handle to the cursor to be destroyed. The cursor must not be in use.",
 "GetClipCursor": "Type: LPRECT A pointer to a RECT structure that receives the screen coordinates of the confining rectangle. The structure receives the dimensions of the screen if the cursor is not confined to a rectangle.",
 "GetCursor": null,
 "GetCursorInfo": "Type: PCURSORINFO A pointer to a CURSORINFO structure that receives the information. Note that you must set the cbSize member to sizeof(CURSORINFO) before calling this function.",
 "GetCursorPos": "Type: LPPOINT A pointer to a POINT structure that receives the screen coordinates of the cursor.",
 "GetPhysicalCursorPos": "Type: LPPOINT The position of the cursor, in physical coordinates.",
 "LoadCursor": "Type: HINSTANCE A handle to an instance of the module whose executable file contains the cursor to be loaded.",
 "LoadCursorFromFile": "Type: LPCTSTR The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format. If the high-order word of lpFileName is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.",
 "SetCursor": "Type: HCURSOR A handle to the cursor. The cursor must have been created by the CreateCursor function or loaded by the LoadCursor or LoadImage function. If this parameter is NULL, the cursor is removed from the screen.",
 "SetCursorPos": "Type: int The new x-coordinate of the cursor, in screen coordinates.",
 "SetPhysicalCursorPos": "Type: int The new x-coordinate of the cursor, in physical coordinates.",
 "SetSystemCursor": "Type: HCURSOR A handle to the cursor. The function replaces the contents of the system cursor specified by id with the contents of the cursor handled by hcur. The system destroys hcur by calling the DestroyCursor function. Therefore, hcur cannot be a cursor loaded using the LoadCursor function. To specify a cursor loaded from a resource, copy the cursor using the CopyCursor function, then pass the copy to SetSystemCursor.",
 "ShowCursor": "Type: BOOL If bShow is TRUE, the display count is incremented by one. If bShow is FALSE, the display count is decremented by one.",
 "GetSystemTime": "A pointer to a SYSTEMTIME structure to receive the current system date and time. The lpSystemTime parameter must not be NULL. Using NULL will result in an access violation.",
 "GetSystemTimeAdjustment": "A pointer to a variable that the function sets to the number of lpTimeIncrement100-nanosecond units added to the time-of-day clock for every period of time which actually passes as counted by the system. This value only has meaning if lpTimeAdjustmentDisabled is FALSE.",
 "NtQuerySystemTime": "A pointer to a LARGE_INTEGER structure that receives the system time. This is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).",
 "RtlLocalTimeToSystemTime": "A pointer to a LARGE_INTEGER structure that specifies the local time.",
 "RtlTimeToSecondsSince1970": "A pointer to a LARGE_INTEGER structure that specifies the system time. The valid years for this value are 1970 to 2105 inclusive.",
 "SetSystemTime": "A pointer to a SYSTEMTIME structure that contains the new system date and time. The wDayOfWeek member of the SYSTEMTIME structure is ignored.",
 "SetSystemTimeAdjustment": "This value represents the number of 100-nanosecond units added to the system time-of-day for each lpTimeIncrement period of time that actually passes. Call GetSystemTimeAdjustment to obtain the lpTimeIncrement value. See remarks. Note Currently, Windows Vista and Windows 7 machines will lose any time adjustments set less than 16.",
 "SystemTimeToFileTime": "A pointer to a SYSTEMTIME structure that contains the system time to be converted from UTC to file time format. The wDayOfWeek member of the SYSTEMTIME structure is ignored.",
 "SystemTimeToTzSpecificLocalTime": "A pointer to a TIME_ZONE_INFORMATION structure that specifies the time zone of interest. If lpTimeZone is NULL, the function uses the currently active time zone.",
 "TzSpecificLocalTimeToSystemTime": "A pointer to a TIME_ZONE_INFORMATION structure that specifies the time zone for the time specified in lpLocalTime. If lpTimeZoneInformation is NULL, the function uses the currently active time zone.",
 "EnumDynamicTimeZoneInformation": "Index value that represents the location of a DYNAMIC_TIME_ZONE_INFORMATION entry.",
 "FileTimeToLocalFileTime": "A pointer to a FILETIME structure containing the UTC-based file time to be converted into a local file time.",
 "GetDynamicTimeZoneInformation": "A pointer to a DYNAMIC_TIME_ZONE_INFORMATION structure.",
 "GetDynamicTimeZoneInformationEffectiveYears": "Specifies settings for a time zone and dynamic daylight saving time.",
 "GetLocalTime": "A pointer to a SYSTEMTIME structure to receive the current local date and time.",
 "GetTimeZoneInformation": "A pointer to a TIME_ZONE_INFORMATION structure to receive the current settings.",
 "GetTimeZoneInformationForYear": "The year for which the time zone settings are to be retrieved. The wYear parameter must be a local time value.",
 "SetDynamicTimeZoneInformation": "A pointer to a DYNAMIC_TIME_ZONE_INFORMATION structure.",
 "SetLocalTime": "A pointer to a SYSTEMTIME structure that contains the new local date and time. The wDayOfWeek member of the SYSTEMTIME structure is ignored.",
 "SetTimeZoneInformation": "A pointer to a TIME_ZONE_INFORMATION structure that contains the new settings.",
 "SystemTimeToTzSpecificLocalTimeEx": "A pointer to a DYNAMIC_TIME_ZONE_INFORMATION structure that specifies the time zone and dynamic daylight saving time.",
 "TzSpecificLocalTimeToSystemTimeEx": "A pointer to a DYNAMIC_TIME_ZONE_INFORMATION structure that specifies the time zone and dynamic daylight saving time.",
 "CompareFileTime": "A pointer to a FILETIME structure that specifies the first file time.",
 "FileTimeToSystemTime": "A pointer to a FILETIME structure containing the file time to be converted to system (UTC) date and time format. This value must be less than 0x8000000000000000. Otherwise, the function fails.",
 "GetFileTime": "A handle to the file or directory for which dates and times are to be retrieved. The handle must have been created using the CreateFile function with the GENERIC_READ access right. For more information, see File Security and Access Rights.",
 "GetSystemTimeAsFileTime": "A pointer to a FILETIME structure to receive the current system date and time in UTC format.",
 "LocalFileTimeToFileTime": "A pointer to a FILETIME structure that specifies the local file time to be converted into a UTC-based file time.",
 "SetFileTime": "A handle to the file or directory. The handle must have been created using the CreateFile function with the FILE_WRITE_ATTRIBUTES access right. For more information, see File Security and Access Rights.",
 "DosDateTimeToFileTime": "The MS-DOS date. ...",
 "FileTimeToDosDateTime": "A pointer to a FILETIME structure containing the file time to convert to MS-DOS date and time format.",
 "GetSystemTimes": "A pointer to a FILETIME structure that receives the amount of time that the system has been idle.",
 "GetTickCount": null,
 "GetTickCount64": null,
 "QueryPerformanceCounter": "A pointer to a variable that receives the current performance-counter value, in counts.",
 "QueryPerformanceFrequency": "A pointer to a variable that receives the current performance-counter frequency, in counts per second. If the installed hardware doesn't support a high-resolution performance counter, this parameter can be zero (this will not occur on systems that run Windows XP or later).",
 "QueryAuxiliaryCounterFrequency": "Long pointer to an output buffer that contains the specified auxiliary counter frequency. If the auxiliary counter is not supported, the value in the output buffer will be undefined.",
 "ConvertAuxiliaryCounterToPerformanceCounter": "The auxiliary counter value to convert.",
 "ConvertPerformanceCounterToAuxiliaryCounter": "The performance counter value to convert.",
 "QueryInterruptTime": "A pointer to a ULONGLONG in which to receive the interrupt-time count in system time units of 100 nanoseconds. Divide by ten million, or 1e7, to get seconds (there are 1e9 nanoseconds in a second, so there are 1e7 100-nanoseconds in a second).",
 "QueryInterruptTimePrecise": "A pointer to a ULONGLONG in which to receive the interrupt-time count in system time units of 100 nanoseconds. Divide by ten million, or 1e7, to get seconds (there are 1e9 nanoseconds in a second, so there are 1e7 100-nanoseconds in a second).",
 "QueryUnbiasedInterruptTime": "A pointer to a ULONGLONG in which to receive the unbiased interrupt-time count in system time units of 100 nanoseconds. Divide by ten million, or 1e7, to get seconds (there are 1e9 nanoseconds in a second, so there are 1e7 100-nanoseconds in a second).",
 "QueryUnbiasedInterruptTimePrecise": "A pointer to a ULONGLONG in which to receive the unbiased interrupt-time count in system time units of 100 nanoseconds. Divide by ten million, or 1e7, to get seconds (there are 1e9 nanoseconds in a second, so there are 1e7 100-nanoseconds in a second).",
 "BindMoniker": "A pointer to the object's moniker. See IMoniker.",
 "CLSIDFromProgID": "A pointer to the ProgID whose CLSID is requested.",
 "CLSIDFromProgIDEx": "A pointer to the ProgID whose CLSID is requested.",
 "CLSIDFromString": "The string representation of the CLSID.",
 "StringFromCLSID": "The CLSID to be converted.",
 "CoAddRefServerProcess": null,
 "CoAllowSetForegroundWindow": "A pointer to the IUnknown interface on the proxy of the target COM server.",
 "CoAllowUnmarshalerCLSID": "The CLSID of the unmarshaler to be added to the per-process allowed list.",
 "CoCancelCall": "The identifier of the thread on which the pending DCOM call is to be canceled. If this parameter is 0, the call is on the current thread.",
 "CoCopyProxy": "A pointer to the IUnknown interface on the proxy to be copied. This parameter cannot be NULL.",
 "CoCreateFreeThreadedMarshaler": "A pointer to the aggregating object's controlling IUnknown.",
 "CoCreateGuid": "A pointer to the requested GUID.",
 "CoCreateInstance": "The CLSID associated with the data and code that will be used to create the object.",
 "CoCreateInstanceEx": "The CLSID of the object to be created.",
 "CoCreateInstanceFromApp": "The CLSID of the object to be created.",
 "CoDisableCallCancellation": "This parameter is reserved and must be NULL.",
 "CoEnableCallCancellation": "This parameter is reserved and must be NULL.",
 "CoDisconnectContext": "The time in milliseconds after which CoDisconnectContext returns even if the proxy connections for all objects have not been disconnected. INFINITE is an acceptable value for this parameter.",
 "CoDisconnectObject": "A pointer to any interface derived from IUnknown on the object to be disconnected.",
 "CoDosDateTimeToFileTime": "The MS-DOS date.",
 "CoEnterApplicationThreadLifetimeLoop": null,
 "CoFileTimeNow": "A pointer to the FILETIME structure that receives the current time.",
 "CoFileTimeToDosDateTime": "A pointer to the FILETIME structure.",
 "CoFreeAllLibraries": null,
 "CoLoadLibrary": "The name of the library to be loaded.",
 "CoGetClassObject": "The CLSID associated with the data and code that you will use to create the objects.",
 "CoFreeLibrary": "A handle to the library module to be freed, as returned by the CoLoadLibrary function.",
 "CoFreeUnusedLibraries": null,
 "CoFreeUnusedLibrariesEx": "The delay in milliseconds between the time that the DLL has stated it can be unloaded until it becomes a candidate to unload. Setting this parameter to INFINITE uses the system default delay (10 minutes). Setting this parameter to 0 forces the unloading of any DLLs without any delay.",
 "CoGetApartmentType": "APTTYPE enumeration value that specifies the type of the current apartment.",
 "CoGetApplicationThreadReference": "Receives the IUnknown interface for the thread lifetime object.",
 "CoGetCallContext": "Interface identifier (IID) of the call context that is being requested. If you are using the default call context supported by standard marshaling, IID_IServerSecurity is available. For COM+ applications using role-based security, IID_ISecurityCallContext is available.",
 "CoGetCallerTID": "Receives the apartment ID of the caller's thread. For a single threaded apartment (STA), this is the current thread ID. For a multithreaded apartment (MTA), the value is 0. For a neutral apartment (NA), the value is -1.",
 "CoGetCancelObject": "The identifier of the thread on which the pending COM call is to be canceled. If this parameter is 0, the call is on the current thread.",
 "CoGetContextToken": "A pointer to an implementation of IObjContext for the current context.",
 "CoGetCurrentLogicalThreadId": "A pointer to a GUID that contains the logical thread ID on return.",
 "CoGetCurrentProcess": null,
 "CoGetInstanceFromFile": "A pointer to a COSERVERINFO structure that specifies the computer on which to instantiate the object and the authentication setting to be used. This parameter can be NULL, in which case the object is instantiated on the current computer, at the computer specified under the RemoteServerName registry value for the class, or at the computer where the pwszName file resides if the ActivateAtStorage value is specified for the class or there is no local registry information.",
 "CoGetInstanceFromIStorage": "A pointer to a COSERVERINFO structure that specifies the computer on which to instantiate the object and the authentication setting to be used. This parameter can be NULL, in which case the object is instantiated on the current computer, at the computer specified under the RemoteServerName registry value for the class, or at the computer where the pstg storage object resides if the ActivateAtStorage value is specified for the class or there is no local registry information.",
 "CoGetInterceptor": "A reference to the identifier of the interface for which an interceptor is to be returned.",
 "CoGetInterfaceAndReleaseStream": "A pointer to the IStream interface on the stream to be unmarshaled.",
 "CoGetMalloc": "This parameter must be 1.",
 "CoGetMarshalSizeMax": "A pointer to the upper-bound value on the size, in bytes, of the data packet to be written to the marshaling stream. If this parameter is 0, the size of the packet is unknown.",
 "CoGetObject": "The display name of the object to be created.",
 "CoGetObjectContext": "A reference to the ID of an interface that is implemented on the context object. For objects running within COM applications, IID_IComThreadingInfo, IID_IContext, and IID_IContextCallback are available. For objects running within COM+ applications, IID_IObjectContext, IID_IObjectContextActivity IID_IObjectContextInfo, and IID_IContextState are available.",
 "CoGetPSClsid": "The interface whose proxy/stub CLSID is to be returned.",
 "CoGetStandardMarshal": "A reference to the identifier of the interface whose pointer is to be marshaled. This interface must be derived from the IUnknown interface.",
 "CoGetStdMarshalEx": "A pointer to the controlling IUnknown.",
 "CoGetSystemSecurityPermissions": "A value from the COMSD enumeration. Specifies the type of the requested system security permissions, such as launch permissions, access permissions, launch restrictions, and access restrictions.",
 "CoGetTreatAsClass": "The CLSID of the object that can be emulated (treated as) an object with a different CLSID.",
 "CoHandlePriorityEventsFromMessagePump": null,
 "CoImpersonateClient": null,
 "CoInitialize": "This parameter is reserved and must be NULL.",
 "CoInitializeEx": "This parameter is reserved and must be NULL.",
 "CoInitializeSecurity": "The access permissions that a server will use to receive calls. This parameter is used by COM only when a server calls CoInitializeSecurity. Its value is a pointer to one of three types: an AppID, an IAccessControl object, or a SECURITY_DESCRIPTOR, in absolute format. See the Remarks section for more information.",
 "CoInstall": "This parameter is reserved and must be NULL.",
 "CoInvalidateRemoteMachineBindings": "The computer name for which binding handles should be flushed, or an empty string to signify that all handles in the cache should be flushed.",
 "CoIsHandlerConnected": "A pointer to the controlling IUnknown interface on the remote object.",
 "CoIsOle1Class": "The CLSID to be checked.",
 "CoLockObjectExternal": "A pointer to the IUnknown interface on the object to be locked or unlocked.",
 "CoMarshalHresult": "A pointer to the marshaling stream. See IStream.",
 "CoUnmarshalHresult": "A pointer to the stream from which the HRESULT is to be unmarshaled.",
 "CoMarshalInterface": "A pointer to the stream to be used during marshaling. See IStream.",
 "CoMarshalInterThreadInterfaceInStream": "A reference to the identifier of the interface to be marshaled.",
 "CoQueryAuthenticationServices": "A pointer to a variable that receives the number of entries returned in the asAuthSvc array.",
 "CoQueryClientBlanket": "A pointer to a variable that receives the current authentication service. This will be a single value taken from the authentication service constants. If the caller specifies NULL, the current authentication service is not retrieved.",
 "CoRegisterActivationFilter": "Pointer to the filter to register.",
 "CoRegisterChannelHook": "The extension to register.",
 "CoQueryProxyBlanket": "A pointer indicating the proxy to query. This parameter cannot be NULL. For more information, see the Remarks section.",
 "CoRegisterClassObject": "The CLSID to be registered.",
 "CoRegisterInitializeSpy": "A pointer to an instance of the IInitializeSpy implementation.",
 "CoRegisterMallocSpy": "A pointer to an instance of the IMallocSpy implementation.",
 "CoRegisterMessageFilter": "A pointer to the IMessageFilter interface on the message filter. This message filter should be registered on the current thread, replacing the previous message filter (if any). This parameter can be NULL, indicating that no message filter should be registered on the current thread. Note that this function calls AddRef on the interface pointer to the message filter.",
 "CoRegisterPSClsid": "A pointer to the IID of the interface to be registered.",
 "CoRegisterSurrogate": "A pointer to the ISurrogate interface on the surrogate process to be registered.",
 "CoReleaseMarshalData": "A pointer to the stream that contains the data packet to be destroyed. See IStream.",
 "CoReleaseServerProcess": null,
 "CoResumeClassObjects": null,
 "CoRevertToSelf": null,
 "CoRevokeClassObject": "A token previously returned from the CoRegisterClassObject function.",
 "CoRevokeInitializeSpy": "A ULARGE_INTEGER cookie identifying the registration.",
 "CoRevokeMallocSpy": null,
 "CoSetCancelObject": "Pointer to the IUnknown interface on the cancel object to be set or reset on the current thread. If this parameter is NULL, the topmost cancel object is reset.",
 "CoSetMessageDispatcher": "If non-null, message dispatcher object to register. This object must also implement IWeakReferenceSource. If null, unregisters the current message dispatcher.",
 "CoSetProxyBlanket": "The proxy to be set.",
 "CoSuspendClassObjects": null,
 "CoSwitchCallContext": "A pointer to an interface on the new call context object. COM stores this pointer without adding a reference to the pointer until CoSwitchCallContext is called with another object. This parameter may be NULL if you are calling CoSwitchCallContext to switch back to the original call context but there was no original call context.",
 "CoTaskMemAlloc": "The size of the memory block to be allocated, in bytes.",
 "CoTaskMemFree": "A pointer to the memory block to be freed. If this parameter is NULL, the function has no effect.",
 "CoTaskMemRealloc": "A pointer to the memory block to be reallocated. This parameter can be NULL, as discussed in Remarks.",
 "CoTestCancel": null,
 "CoTreatAsClass": "The CLSID of the object to be emulated.",
 "CoUninitialize": null,
 "CoUnmarshalInterface": "A pointer to the stream from which the interface is to be unmarshaled.",
 "CoWaitForMultipleHandles": "The wait options. Possible values are taken from the COWAIT_FLAGS enumeration.",
 "CoWaitForMultipleObjects": "CWMO_FLAGS flag controlling whether call/window message reentrancy is enabled from this wait. By default, neither COM calls nor window messages are dispatched from CoWaitForMultipleObjects in ASTA.",
 "CreateAntiMoniker": "The address of an IMoniker* pointer variable that receives the interface pointer to the new anti-moniker. When successful, the function has called AddRef on the anti-moniker and the caller is responsible for calling Release. When an error occurs, the anti-moniker pointer is NULL.",
 "CreateAsyncBindCtx": "This parameter is reserved and must be 0.",
 "CreateBindCtx": "This parameter is reserved and must be 0.",
 "CreateClassMoniker": "A reference to the CLSID of the object type to which this moniker binds.",
 "CreateFileMoniker": "The path on which this moniker is to be based. This parameter can specify a relative path, a UNC path, or a drive-letter-based path. If based on a relative path, the resulting moniker must be composed onto another file moniker before it can be bound.",
 "CreateGenericComposite": "A pointer to the moniker to be composed to the left of the moniker that pmkRest points to. Can point to any kind of moniker, including a generic composite.",
 "CreateItemMoniker": "A pointer to a wide character string (two bytes per character) zero-terminated string containing the delimiter (typically \"!\") used to separate this item's display name from the display name of its containing object.",
 "CreateObjrefMoniker": "A pointer to the IUnknown interface on the object that the moniker is to represent.",
 "CreatePointerMoniker": "A pointer to an IUnknown interface on the object to be identified by the resulting moniker.",
 "DllDebugObjectRPCHook": "If TRUE, remote debugging is enabled. If FALSE, remote debugging is not enabled.",
 "GetClassFile": "A pointer to the filename for which you are requesting the associated CLSID.",
 "GetRunningObjectTable": "This parameter is reserved and must be 0.",
 "IIDFromString": "A pointer to the string representation of the IID.",
 "Initialize": "Specifies the apartment type of the thread to be initialized.",
 "IsAccelerator": "A handle to the accelerator table.",
 "IsEqualCLSID": "The first CLSID.",
 "IsEqualGUID": "The first GUID.",
 "IsEqualIID": "The first interface identifier.",
 "MkParseDisplayName": "A pointer to the IBindCtx interface on the bind context object to be used in this binding operation.",
 "MonikerCommonPrefixWith": "A pointer to the IMoniker interface on one of the monikers for which a common prefix is sought; usually the moniker in which this call is used to implement IMoniker::CommonPrefixWith.",
 "MonikerRelativePathTo": "A pointer to the IMoniker interface on the moniker that, when composed with the relative moniker to be created, produces pmkDest. This moniker identifies the \"source\" of the relative moniker to be created.",
 "OleDoAutoConvert": "A pointer to the IStorage interface on the storage object to be converted.",
 "OleGetAutoConvert": "The CLSID for the object.",
 "OleGetIconOfClass": "The CLSID for which the icon and string are to be requested.",
 "OleGetIconOfFile": "A pointer to a file for which the icon and string are to be requested.",
 "OleIconToCursor": "This parameter is ignored.",
 "OleRegGetMiscStatus": "The CLSID of the class for which status information is to be requested.",
 "OleRegGetUserType": "The CLSID of the class for which the user type is to be requested.",
 "OleSetAutoConvert": "The CLSID of the object class to be converted.",
 "ProgIDFromCLSID": "The CLSID for which the ProgID is to be requested.",
 "StringFromGUID2": "The GUID to be converted.",
 "StringFromIID": "The interface identifier to be converted.",
 "DllUnregisterServer": null,
 "DllRegisterServer": null,
 "BroadcastSystemMessage": "Type: DWORD The broadcast option. This parameter can be one or more of the following values. ValueMeaning BSF_ALLOWSFW 0x00000080 Enables the recipient to set the foreground window while processing the message. BSF_FLUSHDISK 0x00000004 Flushes the disk after each recipient processes the message. BSF_FORCEIFHUNG 0x00000020 Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding. BSF_IGNORECURRENTTASK 0x00000002 Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message. BSF_NOHANG 0x00000008 Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message. BSF_NOTIMEOUTIFNOTHUNG 0x00000040 Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out. BSF_POSTMESSAGE 0x00000010 Posts the message. Do not use in combination with BSF_QUERY. BSF_QUERY 0x00000001 Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns TRUE. BSF_SENDNOTIFYMESSAGE 0x00000100 Sends the message using SendNotifyMessage function. Do not use in combination with BSF_QUERY.",
 "BroadcastSystemMessageEx": "Type: DWORD The broadcast option. This parameter can be one or more of the following values. ValueMeaning BSF_ALLOWSFW 0x00000080 Enables the recipient to set the foreground window while processing the message. BSF_FLUSHDISK 0x00000004 Flushes the disk after each recipient processes the message. BSF_FORCEIFHUNG 0x00000020 Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding. BSF_IGNORECURRENTTASK 0x00000002 Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message. BSF_LUID 0x00000400 If BSF_LUID is set, the message is sent to the window that has the same LUID as specified in the luid member of the BSMINFO structure. Windows 2000: This flag is not supported. BSF_NOHANG 0x00000008 Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message. BSF_NOTIMEOUTIFNOTHUNG 0x00000040 Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out. BSF_POSTMESSAGE 0x00000010 Posts the message. Do not use in combination with BSF_QUERY. BSF_RETURNHDESK 0x00000200 If access is denied and both this and BSF_QUERY are set, BSMINFO returns both the desktop handle and the window handle. If access is denied and only BSF_QUERY is set, only the window handle is returned by BSMINFO. Windows 2000: This flag is not supported. BSF_QUERY 0x00000001 Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns TRUE. BSF_SENDNOTIFYMESSAGE 0x00000100 Sends the message using SendNotifyMessage function. Do not use in combination with BSF_QUERY.",
 "DispatchMessage": "Type: const MSG* A pointer to a structure that contains the message.",
 "GetInputState": null,
 "GetMessage": "Type: LPMSG A pointer to an MSG structure that receives message information from the thread's message queue.",
 "GetMessageExtraInfo": null,
 "GetMessagePos": null,
 "GetMessageTime": null,
 "GetQueueStatus": "Type: UINT The types of messages for which to check. This parameter can be one or more of the following values. ValueMeaning QS_ALLEVENTS (QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY) An input, WM_TIMER, WM_PAINT, WM_HOTKEY, or posted message is in the queue. QS_ALLINPUT (QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY | QS_SENDMESSAGE) Any message is in the queue. QS_ALLPOSTMESSAGE 0x0100 A posted message (other than those listed here) is in the queue. QS_HOTKEY 0x0080 A WM_HOTKEY message is in the queue. QS_INPUT (QS_MOUSE | QS_KEY | QS_RAWINPUT) An input message is in the queue. QS_KEY 0x0001 A WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, or WM_SYSKEYDOWN message is in the queue. QS_MOUSE (QS_MOUSEMOVE | QS_MOUSEBUTTON) A WM_MOUSEMOVE message or mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on). QS_MOUSEBUTTON 0x0004 A mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on). QS_MOUSEMOVE 0x0002 A WM_MOUSEMOVE message is in the queue. QS_PAINT 0x0020 A WM_PAINT message is in the queue. QS_POSTMESSAGE 0x0008 A posted message (other than those listed here) is in the queue. QS_RAWINPUT 0x0400 A raw input message is in the queue. For more information, see Raw Input. Windows 2000: This flag is not supported. QS_SENDMESSAGE 0x0040 A message sent by another thread or application is in the queue. QS_TIMER 0x0010 A WM_TIMER message is in the queue.",
 "InSendMessage": null,
 "InSendMessageEx": "Type: LPVOID Reserved; must be NULL.",
 "PeekMessage": "Type: LPMSG A pointer to an MSG structure that receives message information.",
 "PostMessage": "Type: HWND A handle to the window whose window procedure is to receive the message. The following values have special meanings. ValueMeaning HWND_BROADCAST ((HWND)0xffff) The message is posted to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows. The message is not posted to child windows. NULL The function behaves like a call to PostThreadMessage with the dwThreadId parameter set to the identifier of the current thread. Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.",
 "PostQuitMessage": "Type: int The application exit code. This value is used as the wParam parameter of the WM_QUIT message.",
 "PostThreadMessage": "Type: DWORD The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section. Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level. This thread must have the SE_TCB_NAME privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID. This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID.",
 "RegisterWindowMessage": "Type: LPCTSTR The message to be registered.",
 "ReplyMessage": "Type: LRESULT The result of the message processing. The possible values are based on the message sent.",
 "SendAsyncProc": "Type: HWND A handle to the window whose window procedure received the message. If the SendMessageCallback function was called with its hwnd parameter set to HWND_BROADCAST, the system calls the SendAsyncProc function once for each top-level window.",
 "SendMessage": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows. Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.",
 "SendMessageCallback": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.",
 "SendMessageTimeout": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of uTimeout multiplied by the number of top-level windows.",
 "SendNotifyMessage": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.",
 "SetMessageExtraInfo": "Type: LPARAM The value to be associated with the current thread.",
 "WaitMessage": null,
 "TxfLogCreateFileReadContext": "The path that identifies the Resource Manager's .blf file.",
 "TxfLogDestroyReadContext": "A pointer to the context.",
 "TxfLogReadRecords": "A pointer to the context.",
 "AddIsnsServer": "IP address or the DNS name of the server.",
 "AddIscsiConnection": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that, on input, contains the session identifier for the session that was added.",
 "AddIscsiSendTargetPortal": "The initiator that the iSCSI initiator service utilizes to transmit SendTargets requests to the specified target portal. If null, the iSCSI initiator service will use any initiator that can reach the target portal.",
 "AddIscsiStaticTarget": "The name of the target to add to the static target list.",
 "AddPersistentiScsiDevice": "A drive letter or symbolic link for a mount point of the volume.",
 "AddRadiusServer": "A string that represents the IP address or DNS name associated with the RADIUS server.",
 "ClearPersistentiScsiDevices": null,
 "GetDevicesForIscsiSession": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that contains the session identifier for the session.",
 "GetIscsiIKEInfo": "A string that represents the name of the initiator HBA for which the IPsec policy is established.",
 "GetIscsiInitiatorNodeName": "A caller-allocated buffer that, on output, receives the node name. The buffer must be large enough to hold MAX_ISCSI_NAME_LEN+1 bytes.",
 "GetIscsiSessionList": "A pointer to a location that, on input, contains the size, in bytes, of the caller-allocated buffer that SessionInfo points to. If the operation succeeds, the location receives the size, in bytes, of the session information data that was retrieved. If the operation fails because the output buffer size was insufficient, the location receives the size, in bytes, of the buffer size required to contain the output data.",
 "GetIscsiTargetInformation": "The name of the target for which information is retrieved.",
 "GetIscsiVersionInformation": "Pointer to an ISCSI_VERSION_INFO structure that contains initiator version information.",
 "LoginIscsiTarget": "The name of the target with which to establish a login session. The target must already exist in the list of discovered targets for the iSCSI initiator service.",
 "LogoutIscsiTarget": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that contains a unique session identifier for the login session end.",
 "RefreshIsnsServer": "The DNS or IP Address of the iSNS server.",
 "RefreshIscsiSendTargetPortal": "The name of the Host Bus Adapter (HBA) to use for the SendTargets request. If null, the iSCSI initiator service uses any HBA that can reach the indicated target portal is chosen.",
 "RemoveIsnsServer": "The DNS or IP Address of the server to remove.",
 "RemoveIscsiConnection": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that specifies the unique session identifier of the session that the connection belongs to.",
 "RemoveIscsiPersistentTarget": "The name of the initiator that maintains the persistent login to remove.",
 "RemoveIscsiSendTargetPortal": "The name of the Host Bus Adapter (HBA) that the iSCSI initiator service uses to establish a discovery session and perform SendTargets requests. A value of null indicates that the iSCSI initiator service will use any HBA that is capable of accessing the target portal.",
 "RemoveIscsiStaticTarget": "The name of the iSCSI target to remove from the static list.",
 "RemovePersistentIscsiDevice": "A drive letter, mount point, or device path for the volume or device.",
 "RemoveRadiusServer": "A string that represents the IP address or RADIUS server name.",
 "ReportActiveIscsiTargetMappings": "A pointer to a location that, on input, contains the size, in bytes, of the buffer that Mappings points to. If the operation succeeds, the location receives the size, in bytes, of the mapping data that was retrieved. If the buffer that Mappings points to is not sufficient to contain the output data, the location receives the buffer size, in bytes, that is required.",
 "ReportIsnsServerList": "A ULONG value that specifies the number of list elements contained by the Buffer parameter. If the operation succeeds, this location receives the size, represented by a number of elements, that corresponds to the number of retrieved iSNS servrs.",
 "ReportIscsiInitiatorList": "A ULONG value that specifies the number of list elements contained by the Buffer parameter. If the operation succeeds, this location receives the size, represented by a number of elements, that corresponds to the retreived data.",
 "ReportIscsiPersistentLogins": "A pointer to the location that receives a count of the elements specified by PersistentLoginInfo.",
 "ReportIscsiSendTargetPortals": "A pointer to a location that, on input, contains the number of entries in the PortalInfo array. On output, this parameter specifies the number of elements that contain return data.",
 "ReportIscsiSendTargetPortalsEx": "A pointer to a location that, on input, contains the number of entries in the PortalInfo array. On output, this parameter specifies the number of elements that contain return data.",
 "ReportIscsiTargets": "If true, the iSCSI initiator service updates the list of discovered targets before returning the target list data to the caller.",
 "ReportIscsiTargetPortals": "A string that represents the name of the initiator node.",
 "ReportPersistentIscsiDevices": "A ULONG value that specifies the number of list elements contained by the Buffer parameter.",
 "ReportRadiusServerList": "A ULONG value that specifies the number of list elements contained by the Buffer parameter.",
 "SendScsiInquiry": "A pointer to a ISCSI_UNIQUE_SESSION_ID structure containing the session identifier for the login session specific to the target to which the READ CAPACITY command is sent.",
 "SendScsiReadCapacity": "A pointer to a ISCSI_UNIQUE_SESSION_ID structure containing the session identifier for the login session specific to the target to which the READ CAPACITY command is sent.",
 "SendScsiReportLuns": "A pointer to a ISCSI_UNIQUE_SESSION_ID structure that contains the session identifier for the login session of the target to query with the SCSI REPORT LUNS command.",
 "SetIscsiGroupPresharedKey": "The size, in bytes, of the preshared key.",
 "SetIscsiIKEInfo": "The name of the initiator HBA for which the IPsec policy is established.",
 "SetIscsiInitiatorCHAPSharedSecret": "The size, in bytes, of the shared secret contained by the buffer specified by SharedSecret. The shared secret must be at least 96 bits (12 bytes) for non-IPsec connections, at least 8 bits (1 byte) for IPsec connections, and less than 128 bits (16 bytes) for all connection types.",
 "SetIscsiInitiatorRADIUSSharedSecret": "A ULONG value that represents the size, in bytes, of the shared secret contained by the buffer specified by SharedSecret. The shared secret must be at least 22 bytes, and less than, or equal to, 26 bytes in size.",
 "SetIscsiInitiatorNodeName": "The initiator node name. If this parameter is null, initiators use a default initiator node name based upon the computer name.",
 "SetIscsiTunnelModeOuterAddress": "The name of the initiator with which the tunnel-mode outer address will be associated. If this parameter is null, all HBA initiators are configured to use the indicated tunnel-mode outer address.",
 "SetupPersistentIscsiDevices": null,
 "EnumerateSecurityPackages": "A pointer to a ULONG variable that receives the number of packages available on the system. This includes packages that are already loaded and packages available on demand.",
 "InitSecurityInterface": null,
 "QuerySecurityPackageInfo": "Pointer to a null-terminated string that specifies the name of the security package.",
 "AcquireCredentialsHandle (General)": "A pointer to a null-terminated string that specifies the name of the principal whose credentials the handle will reference. When using the Digest SSP, this parameter is optional. When using the Schannel SSP, this parameter is not used and should be set to NULL. Note If the process that requests the handle does not have access to the credentials, the function returns an error. A null string indicates that the process requires a handle to the credentials of the user under whose security context it is executing.",
 "ExportSecurityContext": "A handle of the security context to be exported.",
 "FreeCredentialsHandle": "A pointer to the CredHandle handle obtained by using the AcquireCredentialsHandle (General) function.",
 "ImportSecurityContext": "A string that contains the name of the security package to which the security context was exported.",
 "QueryCredentialsAttributes": "A handle of the credentials to be queried.",
 "AcceptSecurityContext (General)": "A handle to the credentials of the server. The server calls the AcquireCredentialsHandle (General) function with either the SECPKG_CRED_INBOUND or SECPKG_CRED_BOTH flag set to retrieve this handle.",
 "ApplyControlToken": "A handle to the context to which the token is applied. For information about the way the Schannel SSP notifies the remote party of the shutdown, see the Remarks section of DecryptMessage (Schannel). For additional information on the use of this function, see Shutting Down an Schannel Connection.",
 "CompleteAuthToken": "A handle of the context that needs to be completed.",
 "DeleteSecurityContext": "Handle of the security context to delete.",
 "FreeContextBuffer": "A pointer to memory to be freed.",
 "ImpersonateSecurityContext": "The handle of the context to impersonate. This handle must have been obtained by a call to the AcceptSecurityContext (General) function.",
 "InitializeSecurityContext (General)": "A handle to the credentials returned by AcquireCredentialsHandle (General). This handle is used to build the security context. The InitializeSecurityContext (General) function requires at least OUTBOUND credentials.",
 "QueryContextAttributes (General)": "A handle to the security context to be queried.",
 "QuerySecurityContextToken": "Handle of the context to query.",
 "SetContextAttributes": "A handle to the security context to be set.",
 "RevertSecurityContext": "Handle of the security context being impersonated. This handle must have been obtained in the call to the AcceptSecurityContext (General) function and used in the call to the ImpersonateSecurityContext function.",
 "DecryptMessage (General)": "A handle to the security context to be used to decrypt the message.",
 "EncryptMessage (General)": "A handle to the security context to be used to encrypt the message.",
 "MakeSignature": "A handle to the security context to use to sign the message.",
 "VerifySignature": "A handle to the security context to use for the message.",
 "SpLsaModeInitialize": "The version of the LSA.",
 "LsaApCallPackage": "Pointer to an opaque LSA_CLIENT_REQUEST buffer representing the LSA client's request.",
 "LsaCallAuthenticationPackage": "A handle obtained from a previous call to LsaRegisterLogonProcess or LsaConnectUntrusted.",
 "LsaApCallPackagePassthrough": "Pointer to an opaque LSA_CLIENT_REQUEST buffer representing the LSA client's request.",
 "LsaApCallPackageUntrusted": "Pointer to an opaque LSA_CLIENT_REQUEST buffer representing the LSA client's request.",
 "LsaApInitializePackage": "The identifier the LSA has assigned to the authentication package.",
 "LsaApLogonTerminated": "Pointer to the logon ID of the session that just ended.",
 "LsaApLogonUser": "Pointer to an opaque LSA_CLIENT_REQUEST buffer that represents the LSA client's request. Your authentication package can pass this value into AllocateClientBuffer and FreeClientBuffer in order to identify the client process in which memory should be allocated or freed.",
 "LsaApLogonUserEx": "Pointer to an opaque LSA_CLIENT_REQUEST data type representing the LSA client's request.",
 "LsaApLogonUserEx2": "Pointer to a LSA_CLIENT_REQUEST opaque buffer representing the client's request.",
 "SpAcceptCredentials": "A SECURITY_LOGON_TYPE value indicating the type of logon.",
 "SpAcceptLsaModeContext": "Optional. Handle to the credentials to use for the context.",
 "SpAcquireCredentialsHandle": "Optional. Pointer to a UNICODE_STRING structure containing the name of the security principal whose credentials are being requested. If this value is NULL, the caller requests a handle to the credentials of the user in whose security context the caller is executing.",
 "SpAddCredentials": "A handle to the credential to add.",
 "SpApplyControlToken": "A handle to the security context to be modified based on the ControlToken parameter.",
 "SpDeleteContext": "A handle to the security context to delete.",
 "SpDeleteCredentials": "A handle to the credentials to delete.",
 "SpFreeCredentialsHandle": "A handle to the credentials to free.",
 "SpGetCredentials": "A handle to the credentials to be retrieved.",
 "SpGetExtendedInformation": "A value from the SECPKG_EXTENDED_INFORMATION_CLASS enumeration indicating the type of extended information.",
 "SpGetInfo": "Pointer to a SecPkgInfo structure that is allocated by the Local Security Authority (LSA) and must be populated by the package.",
 "SpGetUserInfo": "Pointer to an LUID containing the logon session for which information is to be retrieved.",
 "SpInitialize": "A unique identifier the LSA assigns to each security package. The value is valid until the system is restarted.",
 "SpInitLsaModeContext": "Optional. Handle to the credentials to use for the context. CredentialHandle can be NULL if the ContextHandle parameter is not NULL.",
 "SpQueryContextAttributes": "A handle to the security context.",
 "SpQueryCredentialsAttributes": "A handle to the credential to query.",
 "SpSaveCredentials": "A handle to the credential to save.",
 "SpSetExtendedInformation": "A SECPKG_EXTENDED_INFORMATION_CLASS enumeration value indicating the type of extended information.",
 "SpShutDown": null,
 "SslCrackCertificate": "The certificate BLOB from which to create the new X509Certificate structure.",
 "SslEmptyCache": "A pointer to a null-terminated string that specifies the entry to remove from the cache. If the value of this parameter is NULL, all entries are removed from the cache.",
 "SslFreeCertificate": "The certificate to free.",
 "SpUserModeInitialize": "The version of the security provider DLL (either Secur32.dll or Security.dll).",
 "SpInitUserModeContext": "A handle to the LSA-mode context returned from the SpInitLsaModeContext or SpAcceptLsaModeContext function.",
 "SpCompleteAuthToken": "Handle of the context to complete.",
 "SpExportSecurityContext": "A handle to the security context to export.",
 "SpFormatCredentials": "Pointer to a SecBuffer structure containing the credentials to be formatted.",
 "SpGetContextToken": "A handle to the context to impersonate.",
 "SpImportSecurityContext": "Pointer to a SecBuffer structure containing a serialized security context previously generated by the SpExportSecurityContext function.",
 "SpInstanceInit": "The version of the Local Security Authority (LSA).",
 "SpMakeSignature": "A handle to the security context to be used to generate the message signature.",
 "SpMarshallSupplementalCreds": "Specifies the size of the supplemental credentials.",
 "SpSealMessage": "Handle of the security context used to sign the message.",
 "SpUnsealMessage": "Handle of the security context used to seal the message.",
 "SpVerifySignature": "A handle to the security context used to sign the message.",
 "AddCredential": "A pointer to an LUID that contains the session ID of the logon session to which credentials are to be added.",
 "AllocateClientBuffer": "Pointer to an opaque LSA_CLIENT_REQUEST data structure that contains information about the LSA client's authentication request. A custom authentication package should pass in the value received during the client's call to the function, such as LsaApCallPackage or LsaApLogonUser, that returns the output parameter.",
 "AllocateLsaHeap": "Number of bytes to allocate from the heap.",
 "CopyFromClientBuffer": "Pointer to an opaque LSA_CLIENT_REQUEST data structure that contains information about the LSA client's authentication request.",
 "CopyToClientBuffer": "Pointer to an opaque LSA_CLIENT_REQUEST data type representing a client request.",
 "CreateLogonSession": "Pointer to an LUID structure to be assigned to the new logon session. An authentication package calls AllocateLocallyUniqueId in order to generate this ID.",
 "DeleteCredential": "Pointer to an LUID structure containing the session ID of the logon session from which the credential is to be deleted.",
 "DeleteLogonSession": "Pointer to an LUID structure containing the session ID of logon session to delete.",
 "FreeClientBuffer": "Pointer to an opaque LSA_CLIENT_REQUEST data type containing information about the LSA client's request.",
 "FreeLsaHeap": "Pointer to the buffer to be freed.",
 "GetCredentials": "Pointer to an LUID structure containing the session ID of the logon session from which credentials are to be retrieved.",
 "AllocateSharedMemory": "Pointer to a section of reserved shared memory.",
 "AuditAccountLogon": "Security package–defined message identifier. ...",
 "AuditLogon": "Status of the logon attempt.",
 "CallPackage": "Pointer to a UNICODE_STRING containing the name of the package to call.",
 "CallPackageEx": "Pointer to a UNICODE_STRING containing the name of the authentication package to call.",
 "CallPackagePassthrough": "Pointer to a UNICODE_STRING containing the name of the package to call.",
 "CancelNotification": "Handle returned by a previous call to RegisterNotification.",
 "ClientCallback": "A pointer to the name of the function to invoke. For more information, see ClientCallback_Function.",
 "ClientCallback_Function": "First argument to the function.",
 "CloseSamUser": "A handle to the SAM user account previously opened using the OpenSamUser function.",
 "ConvertAuthDataToToken": "Pointer to the authorization data received from the GetAuthDataForUser or GetUserAuthData functions.",
 "CrackSingleName": "The format of the input name. The following table contains the valid values for this parameter. ValueMeaning DS_CANONICAL_NAME Complete canonical name (for example, example.microsoft.com/software/someone). The domain-only version includes a trailing forward slash (/). DS_CANONICAL_NAME_EX Same as DS_CANONICAL_NAME except that the rightmost forward slash (/) is replaced with a newline character (\\n), even in a domain-only case (for example, example.microsoft.com/software\\nsomeone). DS_DISPLAY_NAME A \"friendly\" display name. The display name is not necessarily the defining relative distinguished name (RDN). DS_FQDN_1779_NAME Fully qualified distinguished name (for example, CN=NameOfPerson,OU=Users,DC=Example,DC=Fabrikam,DC=Com). DS_NT4_ACCOUNT_NAME Windows account name (for example, Example\\Name). The domain-only version includes trailing backslashes (\\\\). DS_SERVICE_PRINCIPAL_NAME Generalized service principal name (for example, www/www.microsoft.com@microsoft.com). DS_SID_OR_SID_HISTORY_NAME A security identifier (SID) for the object. This can be either the current SID or a SID from the object's SID history. The SID string can use either the standard string representation of a SID, or one of the string constants defined in Sddl.h. For information about converting a binary SID into a SID string, see SID Strings. This value is not valid for the formatDesired parameter. DS_UNIQUE_ID_NAME GUID string that the IIDFromString function returns (for example, {4fa050f0-f561-11cf-bdd9-00aa003a77b6}). DS_UNKNOWN_NAME Unknown name type. DS_USER_PRINCIPAL_NAME User principal name (for example, someone@example.microsoft.com).",
 "CreateSharedMemory": "Specifies the maximum size of the shared memory.",
 "CreateToken": "Pointer to a logon session identifier for the new token. This identifier is obtained from a previous call to CreateLogonSession.",
 "DeleteSharedMemory": "Pointer to shared memory previously reserved by the CreateSharedMemory function.",
 "FreeReturnBuffer": "Pointer to the buffer to free.",
 "FreeSharedMemory": "Pointer to the shared memory section previously reserved using the CreateSharedMemory function.",
 "GetAuthDataForUser": "Pointer to a UNICODE_STRING structure that specifies the name of the SAM account.",
 "GetCallInfo": "Pointer to a SECPKG_CALL_INFO structure that receives information about the call.",
 "GetClientInfo": "Pointer to a SECPKG_CLIENT_INFO structure that receives information about the client.",
 "GetUserAuthData": "A handle to the user account. This handle is returned by the OpenSamUser function.",
 "ImpersonateClient": null,
 "MapBuffer": "Pointer to the SecBuffer structure to map.",
 "OpenSamUser": "Pointer to a UNICODE_STRING structure that specifies the name of the SAM account.",
 "RegisterNotification": "The function that is called to accept notification.",
 "UnloadPackage": null,
 "UpdateCredentials": "Pointer to a SECPKG_PRIMARY_CRED structure containing the primary credentials.",
 "AllocateHeap": "Number of bytes to allocate.",
 "FreeHeap": "Pointer to the buffer to be freed.",
 "RegisterCallback": "Specifies an identifier for the function.",
 "WlxActivateUserShell": "A pointer to the GINA context associated with this window station. This is the context value that the GINA returns when Winlogon calls WlxInitialize for this station.",
 "WlxDisplayLockedNotice": "Pointer to the GINA context associated with this window station. This is the context value that the GINA returns when Winlogon calls WlxInitialize for this station.",
 "WlxDisplaySASNotice": "A pointer to the GINA context associated with this window station. This is the context value that the GINA returns when Winlogon calls WlxInitialize for this station.",
 "WlxDisplayStatusMessage": "Pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxGetConsoleSwitchCredentials": "Pointer to a GINA-specific context.",
 "WlxGetStatusMessage": "Pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxInitialize": "A pointer to the name of the window station being initialized.",
 "WlxIsLockOk": "Pointer to the GINA context associated with this window station. The GINA supplies this context when Winlogon calls WlxInitialize.",
 "WlxIsLogoffOk": "Pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxLoggedOnSAS": "A pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxLoggedOutSAS": "A pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxLogoff": "A pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxNegotiate": "Specifies which version of Winlogon will be communicating with the GINA.",
 "WlxNetworkProviderLoad": "Pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxRemoveStatusMessage": "Pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxScreenSaverNotify": "A pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxShutdown": "A pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxStartApplication": "A pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "WlxWkstaLockedSAS": "A pointer to the GINA context associated with this window station. The GINA returns this context value when Winlogon calls WlxInitialize for this station.",
 "LogonUser": "A pointer to a null-terminated string that specifies the name of the user. This is the name of the user account to log on to. If you use the user principal name (UPN) format, User@DNSDomainName, the lpszDomain parameter must be NULL.",
 "LogonUserEx": "A pointer to a null-terminated string that specifies the name of the user. This is the name of the user account to log on to. If you use the user principal name (UPN) format, user@DNS_domain_name, the lpszDomain parameter must be NULL.",
 "LogonUserExExW": "A pointer to a null-terminated string that specifies the name of the user. This is the name of the user account to log on to. If you use the user principal name (UPN) format, the lpszDomain parameter must be NULL.",
 "WlxAssignShellProtection": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxChangePasswordNotify": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxChangePasswordNotifyEx": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxCloseUserDesktop": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxCreateUserDesktop": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxDialogBox": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxDialogBoxIndirect": "Winlogon handle provided to GINA in the WlxInitialize call.",
 "WlxDialogBoxIndirectParam": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxDialogBoxParam": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxDisconnect": null,
 "WlxGetOption": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxGetSourceDesktop": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxMessageBox": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxQueryClientCredentials": "Specifies a pointer to a WLX_CLIENT_CREDENTIALS_INFO_V1_0 structure that contains the credentials of the client on return.",
 "WlxQueryConsoleSwitchCredentials": "Pointer to a WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 structure to be filled with credentials information.",
 "WlxQueryInetConnectorCredentials": "When the return value is TRUE, pCred specifies a pointer to a WLX_CLIENT_CREDENTIALS_INFO_V1_0 structure that contains the credentials to use for auto logon.",
 "WlxQueryTerminalServicesData": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxSasNotify": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxSetContextPointer": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxSetOption": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxSetReturnDesktop": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxSetTimeout": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxSwitchDesktopToUser": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxSwitchDesktopToWinlogon": "Specifies the Winlogon handle passed to GINA in the WlxInitialize call.",
 "WlxUseCtrlAltDel": "[in] Winlogon handle provided to GINA in the WlxInitialize call.",
 "WlxWin31Migrate": "Specify the handle received in the call to WlxInitialize.",
 "NPGetCaps": "Specifies the type of information to return. The following values are defined. ValueMeaning WNNC_ADMIN A bitmask that indicates which administrative functions the network provider supports. WNNC_CONNECTION A bitmask that indicates which connection functions the network provider supports. WNNC_DIALOG A bitmask that indicates which provider-specific dialog box functions the network provider supports. WNNC_ENUMERATION A bitmask that indicates which enumeration functions the network provider supports. WNNC_NET_TYPE Network type and provider version. WNNC_SPEC_VERSION WNet API version supported by the provider. WNNC_START The state of the network provider. WNNC_USER A bitmask that indicates which user functions the network provider supports.",
 "NPAddConnection": "Pointer to a NETRESOURCE structure which specifies the network resource to connect to. The following fields must be set in the NETRESOURCE structure you pass in. The NPAddConnection function ignores the other fields. ValueMeaning lpRemoteName Specifies the network resource to connect to. lpLocalName Specifies the name of a local device to be redirected, such as \"F:\" or \"LPT1\". This name is treated as case insensitive and may be an empty string or NULL pointer. If the string is empty or NULL, the function connects to the network resource without making a redirection. dwType Specifies the type of resource to connect to. This can be RESOURCETYPE_DISK, RESOURCETYPE _PRINT, or RESOURCETYPE_ANY. The value RESOURCETYPE _ANY is used if the caller does not care or does not know.",
 "NPAddConnection3": "A handle to a window that should own any messages or dialog boxes. This handle is valid only if CONNECT_INTERACTIVE is set in dwFlags, and the handle should only be used to produce dialog boxes needed for authentication.",
 "NPCancelConnection": "Pointer to the name of either the redirected local device or the remote network resource to disconnect from.",
 "NPCloseEnum": "Handle obtained from an NPOpenEnum call.",
 "NPDeviceMode": "A handle to the window that owns dialog boxes originating from this device.",
 "NPDirectoryNotify": "A handle to a window that should own any messages or dialog boxes in the event the network provider needs to interact with the user.",
 "NPEnumResource": "Handle obtained from an NPOpenEnum call.",
 "NPOpenEnum": "Determines the scope of the enumeration. This can be one of the following. \t\t\t\t\t ValueMeaning RESOURCE_CONNECTED All currently connected resources. RESOURCE_GLOBALNET All resources on the network. RESOURCE_CONTEXT The resources associated with the user's current and default network context (used for a \"Network Neighborhood\" view). The interpretation of this is left to the provider.",
 "NPFormatNetworkName": "Pointer to the network name to format.",
 "NPGetConnection": "Pointer to the name of the local device the caller is interested in. The network provider can assume this name is syntactically valid.",
 "NPGetConnection3": "Pointer to the name of the local device the caller is interested in. The provider can assume that this is syntactically valid.",
 "NPGetConnectionPerformance": "Pointer to the local name or remote name for a connected resource.",
 "NPGetDirectoryType": "Pointer to the fully qualified name of the directory. The network provider returns the type to the address pointed to by lpType. If the value returned in lpType is zero or if the network provider returns an error, File Manager displays the directory as a \"normal\" directory.",
 "NPGetPropertyText": "Indicates the index of the button. File Manager supports a maximum of six buttons. This parameter is numbered 1-6 for each of the possible buttons if only one file is selected, or 11-16 if multiple files are selected.",
 "NPGetResourceInformation": "Specifies the network resource for which information is required. The lpRemoteName field specifies the remote name of the resource. The calling program should fill in the values for the lpProvider and dwType fields if it knows these values; otherwise, it should set these fields to NULL. All other fields in the NETRESOURCE are ignored and are not initialized. If the lpRemoteName string contains a portion that is accessed through WNet APIs and a portion that is accessed through other system APIs specific to the resource type, the function should return information only about the network portion of the resource (except for lplpSystem, as described later in this topic). For example, if the resource is \"\\\\server\\share\\dir1\\dir2\", where \"\\\\server\\share\" is accessed through WNet APIs and \"\\dir1\\dir2\" is accessed through file system APIs, the provider should verify that it is the right provider for \"\\\\server\\share\", but need not check whether \"\\dir1\\dir2\" actually exists.",
 "NPGetResourceParent": "Pointer to the network resource whose parent name is required. The NETRESOURCE could have been obtained from a previous call to NPEnumResource or NPGetResourceInformation, or constructed by the caller. The lpRemoteName field specifies the remote name of the network resource whose parent is required. The lpProvider field specifies the provider to call. This must be supplied. The dwType field is filled in if the calling program knows its value. Otherwise, it is set to NULL. All other fields in the NETRESOURCE are ignored and are not initialized.",
 "NPGetUniversalName": "Pointer to the local path of an object on a network resource. This is a drive-based path.",
 "NPGetUser": "Pointer to the name of the local device the caller is interested in, or a remote name for a resource that the user has made a connection to. This parameter may be NULL or the empty string if the caller is interested in the name of the user currently logged on to the system. If a remote name for a resource is passed in, and the user is connected to that resource using different names, it is possible that a provider cannot resolve which user name to return. In this case the provider may make an arbitrary choice amongst the possible user names.",
 "NPPropertyDialog": "A handle to the parent window that should own the file property dialog box.",
 "NPSearchDialog": "Handle of the window to be used as the parent window of the dialog box.",
 "WNetSetLastError": "The error that occurred. This is a network-specific error code.",
 "AddConnectNotify": "A pointer to a NOTIFYINFO structure that contains information about the notification.",
 "WNetAddConnection": "A pointer to a constant null-terminated string that specifies the network resource to connect to.",
 "WNetAddConnection2": "A pointer to a NETRESOURCE structure that specifies details of the proposed connection, such as information about the network resource, the local device, and the network resource provider. You must specify the following members of the NETRESOURCE structure. MemberMeaning dwType The type of network resource to connect to. If the lpLocalName member points to a nonempty string, this member can be equal to RESOURCETYPE_DISK or RESOURCETYPE_PRINT. If lpLocalName is NULL, or if it points to an empty string, dwType can be equal to RESOURCETYPE_DISK, RESOURCETYPE_PRINT, or RESOURCETYPE_ANY. Although this member is required, its information may be ignored by the network service provider. lpLocalName A pointer to a null-terminated string that specifies the name of a local device to redirect, such as \"F:\" or \"LPT1\". The string is treated in a case-insensitive manner. If the string is empty, or if lpLocalName is NULL, the function makes a connection to the network resource without redirecting a local device. lpRemoteName A pointer to a null-terminated string that specifies the network resource to connect to. The string can be up to MAX_PATH characters in length, and must follow the network provider's naming conventions. lpProvider A pointer to a null-terminated string that specifies the network provider to connect to. If lpProvider is NULL, or if it points to an empty string, the operating system attempts to determine the correct provider by parsing the string pointed to by the lpRemoteName member. If this member is not NULL, the operating system attempts to make a connection only to the named network provider. You should set this member only if you know the network provider you want to use. Otherwise, let the operating system determine which provider the network name maps to. The WNetAddConnection2 function ignores the other members of the NETRESOURCE structure.",
 "WNetAddConnection3": "A handle to a window that the provider of network resources can use as an owner window for dialog boxes. Use this parameter if you set the CONNECT_INTERACTIVE value in the dwFlags parameter. The hwndOwner parameter can be NULL. If it is, a call to WNetAddConnection3 is equivalent to calling the WNetAddConnection2 function.",
 "CancelConnectNotify": "A pointer to a NOTIFYINFO structure that contains information about the notification.",
 "WNetCancelConnection": "Pointer to a constant null-terminated string that specifies the name of either the redirected local device or the remote network resource to disconnect from. When this parameter specifies a redirected local device, the function cancels only the specified device redirection. If the parameter specifies a remote network resource, only the connections to remote networks without devices are canceled.",
 "WNetCancelConnection2": "Pointer to a constant null-terminated string that specifies the name of either the redirected local device or the remote network resource to disconnect from. If this parameter specifies a redirected local device, the function cancels only the specified device redirection. If the parameter specifies a remote network resource, all connections without devices are canceled.",
 "LsaConnectUntrusted": "Pointer to a handle that receives the connection handle, which must be provided in future authentication services.",
 "LsaDeregisterLogonProcess": "Handle obtained from a LsaRegisterLogonProcess or LsaConnectUntrusted call.",
 "LsaEnumerateLogonSessions": "Pointer to a long integer that receives the number of elements returned in the array returned in LogonSessionList parameter.",
 "LsaFreeReturnBuffer": "Pointer to the buffer to be freed.",
 "LsaGetLogonSessionData": "Specifies a pointer to a LUID that identifies the logon session whose information will be retrieved. For information about valid values for this parameter, see Remarks.",
 "LsaLogonUser": "A handle obtained from a previous call to LsaRegisterLogonProcess. The caller is required to have SeTcbPrivilege only if one or more of the following is true: A Subauthentication package is used. KERB_S4U_LOGON is used, and the caller requests an impersonation token. The LocalGroups parameter is not NULL. If SeTcbPrivilege is not required, call LsaConnectUntrusted to obtain the handle.",
 "LsaLookupAuthenticationPackage": "Handle obtained from a previous call to LsaRegisterLogonProcess or LsaConnectUntrusted.",
 "LsaQueryDomainInformationPolicy": "A handle to the Policy object for the system.",
 "LsaQueryForestTrustInformation": "A handle to the Policy object for the system.",
 "LsaRegisterLogonProcess": "Pointer to an LSA_STRING structure identifying the logon application. This should be a printable name suitable for display to administrators. For example, the Windows logon application might use the name \"User32LogonProcess\". This name is used by the LSA during auditing. LsaRegisterLogonProcess does not check whether the name is already in use. This string must not exceed 127 bytes.",
 "LsaSetDomainInformationPolicy": "A handle to the Policy object for the system.",
 "LsaSetForestTrustInformation": "A handle to the Policy object for the system.",
 "Msv1_0SubAuthenticationFilter": "Specifies the level of information given in LogonInformation. This parameter is normally set to NetlogonInteractiveInformation.",
 "Msv1_0SubAuthenticationRoutine": "Specifies the level of information given in the LogonInformation parameter. This parameter is normally set to NetlogonInteractiveInformation.",
 "CredUICmdLinePromptForCredentials": "A pointer to a null-terminated string that contains the name of the target for the credentials, typically a server name. For DFS connections, this string is of the form ServerName\\ShareName. The pszTargetName parameter is used to identify the target information and is used to store and retrieve the credential.",
 "CredUIConfirmCredentials": "Pointer to a null-terminated string that contains the name of the target for the credentials, typically a domain or server application name. This must be the same value passed as pszTargetName to CredUIPromptForCredentials or CredUICmdLinePromptForCredentials",
 "CredUIPromptForCredentials": "A pointer to a CREDUI_INFO structure that contains information for customizing the appearance of the dialog box.",
 "CredUIParseUserName": "Pointer to a null-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, pszUserName is received from the CredUIPromptForCredentials or CredUICmdLinePromptForCredentials.",
 "CredUIPromptForWindowsCredentials": "A pointer to a CREDUI_INFO structure that contains information for customizing the appearance of the dialog box that this function displays. If the hwndParent member of the CREDUI_INFO structure is not NULL, this function displays a modal dialog box centered on the parent window. If the hwndParent member of the CREDUI_INFO structure is NULL, the function displays a dialog box centered on the screen. This function ignores the hbmBanner member of the CREDUI_INFO structure.",
 "CredUIReadSSOCredW": "Pointer to a null-terminated string that specifies the realm. If this parameter is NULL, the default realm is used.",
 "CredUIStoreSSOCredW": "Pointer to a null-terminated string that specifies the realm. If this parameter is NULL, the default realm is used.",
 "CredDelete": "Pointer to a null-terminated string that contains the name of the credential to delete.",
 "CredEnumerate": "Pointer to a null-terminated string that contains the filter for the returned credentials. Only credentials with a TargetName matching the filter will be returned. The filter specifies a name prefix followed by an asterisk. For instance, the filter \"FRED*\" will return all credentials with a TargetName beginning with the string \"FRED\". If NULL is specified, all credentials will be returned.",
 "CredFindBestCredential": "A pointer to a null-terminated string that contains the name of the target resource for which to find credentials.",
 "CredFree": "Pointer to the buffer to be freed.",
 "CredGetSessionTypes": "Number of elements in the MaximumPersist array. Use CRED_TYPE_MAXIMUM to return all of the currently defined credential types.",
 "CredGetTargetInfo": "Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.",
 "CredIsMarshaledCredential": "Pointer to a null-terminated string that contains the marshaled credential.",
 "CredMarshalCredential": "Type of the credential to marshal.",
 "CredIsProtected": "A pointer to a null-terminated string that specifies the credentials to test.",
 "CredProtect": "Set to TRUE to specify that the credentials are encrypted in the security context of the current process. Set to FALSE to specify that credentials are encrypted in the security context of the calling thread security context.",
 "CredPackAuthenticationBuffer": "Specifies how the credential should be packed. This can be a combination of the following flags. ValueMeaning CRED_PACK_PROTECTED_CREDENTIALS Encrypts the credential so that it can only be decrypted by processes in the caller's logon session. CRED_PACK_WOW_BUFFER Encrypts the credential in a WOW buffer. CRED_PACK_GENERIC_CREDENTIALS Encrypts the credential in a CRED_GENERIC buffer. CRED_PACK_ID_PROVIDER_CREDENTIALS Encrypts the credential of an online identity into a SEC_WINNT_AUTH_IDENTITY_EX2 structure. If CRED_PACK_GENERIC_CREDENTIALS and CRED_PACK_ID_PROVIDER_CREDENTIALS are not set, encrypts the credentials in a KERB_INTERACTIVE_LOGON buffer. Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008: This value is not supported.",
 "CredRead": "Pointer to a null-terminated string that contains the name of the credential to read.",
 "CredReadDomainCredentials": "Target information that identifies the target server. At least one of the naming members must not be NULL: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.",
 "CredRename": "Pointer to a null-terminated string that contains the current name of the credential to be renamed.",
 "CredUnmarshalCredential": "Pointer to a null-terminated string that contains the marshaled credential.",
 "CredUnPackAuthenticationBuffer": "Setting the value of this parameter to CRED_PACK_PROTECTED_CREDENTIALS specifies that the function attempts to decrypt the credentials in the authentication buffer. If the credential cannot be decrypted, the function returns FALSE, and a call to the GetLastError function will return the value ERROR_NOT_CAPABLE. How the decryption is done depends on the format of the authentication buffer. If the authentication buffer is a SEC_WINNT_AUTH_IDENTITY_EX2 structure, the function can decrypt the buffer if it is encrypted by using SspiEncryptAuthIdentityEx with the SEC_WINNT_AUTH_IDENTITY_ENCRYPT_SAME_LOGON option. If the authentication buffer is one of the marshaled KERB_*_LOGON structures, the function decrypts the password before returning it in the pszPassword buffer.",
 "CredUnprotect": "Set to TRUE to specify that the credentials were encrypted in the security context of the current process. Set to FALSE to specify that credentials were encrypted in the security context of the calling thread security context.",
 "CredWrite": "A pointer to the CREDENTIAL structure to be written.",
 "CredWriteDomainCredentials": "Identifies the target server. At least one of the naming members must be non-NULL and can be NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName, or DnsTreeName.",
 "NPLogonNotify": "Pointer to the identifier of the session that just logged on.",
 "NPPasswordChangeNotify": "Pointer to a string that identifies the type of structure pointed to by lpAuthentInfo. When Microsoft is the primary authenticator, the following string is specified for interactive and service controller logons. C++ Copy MSV1_0:Interactive Kerberos:Interactive",
 "GetOpenCardName": "A pointer to the OPENCARDNAME structure for the \"select card\" dialog box.",
 "SCardUIDlgSelectCard": "Pointer to the OPENCARDNAME_EX structure for the Select Card dialog box.",
 "SCardAccessStartedEvent": null,
 "SCardAddReaderToGroup": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardAudit": "Handle that identifies the resource manager context. The resource manager context can be set by a previous call to the SCardEstablishContext function. This parameter cannot be NULL.",
 "SCardBeginTransaction": "A reference value obtained from a previous call to SCardConnect.",
 "SCardCancel": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.",
 "SCardConnect": "A handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.",
 "SCardControl": "Reference value returned from SCardConnect.",
 "SCardDisconnect": "Reference value obtained from a previous call to SCardConnect.",
 "SCardEndTransaction": "Reference value obtained from a previous call to SCardConnect. This value would also have been used in an earlier call to SCardBeginTransaction.",
 "SCardEstablishContext": "Scope of the resource manager context. This parameter can be one of the following values. ValueMeaning SCARD_SCOPE_USER Database operations are performed within the domain of the user. SCARD_SCOPE_SYSTEM Database operations are performed within the domain of the system. The calling application must have appropriate access permissions for any database actions.",
 "SCardForgetCardType": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardForgetReader": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardForgetReaderGroup": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardFreeMemory": "Handle that identifies the resource manager context returned from SCardEstablishContext, or NULL if the creating function also specified NULL for its hContext parameter. For more information, see Smart Card Database Query Functions.",
 "SCardGetAttrib": "Reference value returned from SCardConnect.",
 "SCardGetCardTypeProviderName": "Handle that identifies the resource manager context. The resource manager context can be set by a previous call to SCardEstablishContext. This value can be NULL if the call to SCardGetCardTypeProviderName is not directed to a specific context.",
 "SCardGetDeviceTypeId": "Handle that identifies the resource manager context for the query. You can set the resource manager context by calling the SCardEstablishContext function. This parameter cannot be NULL.",
 "SCardGetProviderId": "Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardGetReaderDeviceInstanceId": "Handle that identifies the resource manager context for the query. You can set the resource manager context by a previous call to the SCardEstablishContext function. This parameter cannot be NULL.",
 "SCardGetReaderIcon": "Handle that identifies the resource manager context for the query. You can set the resource manager context by a previous call to the SCardEstablishContext function. This parameter cannot be NULL.",
 "SCardGetStatusChange": "A handle that identifies the resource manager context. The resource manager context is set by a previous call to the SCardEstablishContext function.",
 "SCardGetTransmitCount": "A handle to a smart card obtained from a previous call to SCardConnect.",
 "SCardIntroduceCardType": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardIntroduceReader": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardIntroduceReaderGroup": "Supplies the handle that identifies the resource manager context. The resource manager context is set by a previous call to the SCardEstablishContext function. If this parameter is NULL, the scope of the resource manager is SCARD_SCOPE_SYSTEM.",
 "SCardIsValidContext": "Handle that identifies the resource manager context. The resource manager context can be set by a previous call to SCardEstablishContext.",
 "SCardListCards": "Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. If this parameter is set to NULL, the search for cards is not limited to any context.",
 "SCardListInterfaces": "Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardListReaderGroups": "Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. If this parameter is set to NULL, the search for reader groups is not limited to any context.",
 "SCardListReaders": "Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. If this parameter is set to NULL, the search for readers is not limited to any context.",
 "SCardListReadersWithDeviceInstanceId": "Handle that identifies the resource manager context for the query. You can set the resource manager context by a previous call to the SCardEstablishContext function. This parameter cannot be NULL.",
 "SCardLocateCards": "A handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.",
 "SCardLocateCardsByATR": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.",
 "SCardReadCache": "A handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.",
 "SCardReconnect": "Reference value obtained from a previous call to SCardConnect.",
 "SCardReleaseContext": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.",
 "SCardReleaseStartedEvent": null,
 "SCardRemoveReaderFromGroup": "Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. This parameter cannot be NULL.",
 "SCardSetAttrib": "Reference value returned from SCardConnect.",
 "SCardSetCardTypeProviderName": "Handle that identifies the resource manager context. The resource manager context can be set by a previous call to SCardEstablishContext. This value can be NULL if the call to SCardSetCardTypeProviderName is not directed to a specific context.",
 "SCardStatus": "Reference value returned from SCardConnect.",
 "SCardTransmit": "A reference value returned from the SCardConnect function.",
 "SCardWriteCache": "A handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.",
 "SaslAcceptSecurityContext": "A handle to the server's credentials. The server calls the AcquireCredentialsHandle function with the INBOUND flag set to retrieve this handle.",
 "SaslEnumerateProfiles": "Pointer to a list of Unicode or ANSI strings that contain the names of the packages with SASL wrapper support.",
 "SaslGetContextOption": "Handle of the SASL context.",
 "SaslGetProfilePackage": "Unicode or ANSI string that contains the name of the SASL package.",
 "SaslIdentifyPackage": "Pointer to a SecBufferDesc structure that specifies the SASL negotiation buffer for which to find the negotiate prefix.",
 "SaslInitializeSecurityContext": "A handle to the credentials returned by the AcquireCredentialsHandle function used to build the security context. Using the SaslInitializeSecurityContext function requires at least OUTBOUND credentials.",
 "SaslSetContextOption": "Handle of the SASL context.",
 "AddSecurityPackage": "The name of the package to add.",
 "ChangeAccountPassword": "The name of the provider to use. The value of this parameter must be either \"Kerberos\", \"Negotiate\", or \"NTLM\".",
 "CredMarshalTargetInfo": "A pointer to a Unicode version of the CREDENTIAL_TARGET_INFORMATION structure that specifies the target to serialize.",
 "DeleteSecurityPackage": "The name of the security provider to delete.",
 "LsaManageSidNameMapping": "Indicates if a this function is being called to add or remove an SID/name mapping.",
 "LsaOpenPolicy": "A pointer to an LSA_UNICODE_STRING structure that contains the name of the target system. The name can have the form \"ComputerName\" or \"\\\\ComputerName\". If this parameter is NULL, the function opens the Policy object on the local system.",
 "LsaQueryInformationPolicy": "A handle to a Policy object. The required access rights for this handle depend on the value of the InformationClass parameter. For more information, see Opening a Policy Object Handle.",
 "LsaSetInformationPolicy": "A handle to a Policy object. The required access rights for this handle depend on the value of the InformationClass parameter. For more information, see Opening a Policy Object Handle.",
 "NPFMXEditPerm": "Pointer to the current drive name selected in File Manager.",
 "NPFMXGetPermCaps": "Pointer to the name of the drive currently selected in File Manager.",
 "NPFMXGetPermHelp": "Pointer to the name of the drive currently selected in File Manager.",
 "SpGetCredUIContextFn": "A handle to the context for which to get information.",
 "SpQueryMetaDataFn": "A handle to the credentials to use for the security context. If the ContextHandle parameter points to NULL on input, this function uses the value of this parameter to create a security context. The value of this parameter cannot be NULL if the ContextHandle parameter points to NULL on input.",
 "SpUpdateCredentialsFn": "A handle to the context to update.",
 "SspiCompareAuthIdentities": "A pointer to an opaque structure that specifies the first credential to compare.",
 "SspiCopyAuthIdentity": "The credential structure to be copied.",
 "SspiDecryptAuthIdentity": "On input, a pointer to the encrypted credential structure to be decrypted. On output, a pointer to the decrypted credential structure.",
 "SspiEncodeAuthIdentityAsStrings": "The credential structure to be encoded.",
 "SspiEncodeStringsAsAuthIdentity": "The user name associated with the identity to encode.",
 "SspiEncryptAuthIdentity": "On input, the identity structure to encrypt. On output, the encrypted identity structure.",
 "SspiExcludePackage": "The identity structure to modify.",
 "SspiFreeAuthIdentity": "The identity structure to free.",
 "SspiGetCredUIContext": "A pointer to a SEC_WINNT_CREDUI_CONTEXT structure retrieved during a previous call to the SspiUnmarshalCredUIContext function.",
 "SspiGetTargetHostName": "The target for which to get the host name.",
 "SspiIsAuthIdentityEncrypted": "The identity structure to test.",
 "SspiIsPromptingNeeded": "The error to test.",
 "SspiPromptForCredentials": "The name of the target to use.",
 "SspiLocalFree": "The buffer to free.",
 "SspiMarshalAuthIdentity": "The identity structure to serialize.",
 "SspiPrepareForCredRead": "The identity structure from which to generate the credentials to be passed to the CredRead function.",
 "SspiPrepareForCredWrite": "The identity structure from which to generate the credentials to be passed to the CredWrite function.",
 "SspiUnmarshalAuthIdentity": "The size, in bytes, of the AuthIdentityByteArray array.",
 "SspiUnmarshalCredUIContext": "The serialized credential information obtained as the rgbSerialization member of the CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION structure retrieved from a call to the ICredentialProvider::SetSerialization method.",
 "SspiUpdateCredentials": "A pointer to a SEC_WINNT_CREDUI_CONTEXT structure retrieved during a previous call to the SspiUnmarshalCredUIContext function.",
 "SspiValidateAuthIdentity": "The identity structure to test.",
 "SspiZeroAuthIdentity": "The identity structure to fill with zeros.",
 "WlxQueryTsLogonCredentials": "When the return value is TRUE, pCred specifies a pointer to a WLX_CLIENT_CREDENTIALS_INFO_V2_0 structure that contains the credentials to use for auto logon.",
 "NetworkIsolationDiagnoseConnectFailureAndGetInfo": "Type: LPCWSTR Name (or IP address literal string) of the server to which a connection was attempted.",
 "NetworkIsolationEnumAppContainers": "Type: DWORD May be set to NETISO_FLAG_FORCE_COMPUTE_BINARIES to ensure that all binaries are computed before the app container is returned. This flag should be set if the caller requires up-to-date and complete information on app container binaries. If this flag is not set, returned data may be stale or incomplete. See NETISO_FLAG for more information.",
 "NetworkIsolationEnumerateAppContainerRules": "Type: IEnumVARIANT** Enumerator interface of an INetFwRule3 object that represents the rules enforcing app containers.",
 "NetworkIsolationFreeAppContainers": "Type: PINET_FIREWALL_APP_CONTAINER The app container memory resources to be freed.",
 "NetworkIsolationGetAppContainerConfig": "Type: DWORD* The number of app containers in the appContainerSids member.",
 "NetworkIsolationRegisterForAppContainerChanges": "Type: DWORD A bitmask value of control flags which specify when to receive notifications. May contain one or more of the following flags. ValueMeaning INET_FIREWALL_AC_NONE 0x00 No notifications will be delivered. INET_FIREWALL_AC_PACKAGE_ID_ONLY 0x01 Notifications will be delivered when an app container is created with a package identifier. INET_FIREWALL_AC_BINARY 0x02 Notifications will be delivered when an app container is created with a binary path. INET_FIREWALL_AC_MAX 0x04 Maximum value for testing purposes.",
 "NetworkIsolationSetAppContainerConfig": "Type: DWORD The number of app containers in the appContainerSids member.",
 "NetworkIsolationSetupAppContainerBinaries": "Type: PSID The package identifier of the app container.",
 "NetworkIsolationUnregisterForAppContainerChanges": "Type: HANDLE Handle to the previously created registration.",
 "PAC_CHANGES_CALLBACK_FN pointer": "Type: void* Optional context pointer. It contains the value of the context parameter of the NetworkIsolationRegisterForAppContainerChanges function.",
 "BCryptAddContextFunction": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptConfigureContext": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptConfigureContextFunction": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptCreateContext": "Identifies the configuration table to create the context in. This can be one of the following values. ValueMeaning CRYPT_LOCAL Create the context in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptDeleteContext": "Identifies the configuration table to delete the context from. This can be one of the following values. ValueMeaning CRYPT_LOCAL Delete the context from the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptEnumAlgorithms": "A value that specifies the algorithm operation types to include in the enumeration. This can be a combination of one or more of the following values. ValueMeaning BCRYPT_CIPHER_OPERATION 0x00000001 Include the cipher algorithms in the enumeration. BCRYPT_HASH_OPERATION 0x00000002 Include the hash algorithms in the enumeration. BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION 0x00000004 Include the asymmetric encryption algorithms in the enumeration. BCRYPT_SECRET_AGREEMENT_OPERATION 0x00000008 Include the secret agreement algorithms in the enumeration. BCRYPT_SIGNATURE_OPERATION 0x00000010 Include the signature algorithms in the enumeration. BCRYPT_RNG_OPERATION 0x00000020 Include the random number generator (RNG) algorithms in the enumeration.",
 "BCryptEnumContextFunctionProviders": "Identifies the configuration table from which to retrieve the context function providers. This can be one of the following values. ValueMeaning CRYPT_LOCAL Retrieve the context functions from the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptEnumContextFunctions": "Identifies the configuration table from which to retrieve the context functions. This can be one of the following values. ValueMeaning CRYPT_LOCAL Retrieve the context functions from the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptEnumContexts": "Identifies the configuration table from which to retrieve the contexts. This can be one of the following values. ValueMeaning CRYPT_LOCAL Retrieve the contexts from the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptEnumProviders": "A pointer to a null-terminated Unicode string that identifies the algorithm to obtain the providers for. This can be one of the predefined CNG Algorithm Identifiers or another algorithm identifier.",
 "BCryptEnumRegisteredProviders": "A pointer to a ULONG value that, on entry, contains the size, in bytes, of the buffer pointed to by the ppBuffer parameter. On exit, this value receives either the number of bytes copied to the buffer or the required size, in bytes, of the buffer. Note This is the total size, in bytes, of the entire buffer, not just the size of the CRYPT_PROVIDERS structure. The buffer must be able to hold other data for the providers in addition to the CRYPT_PROVIDERS structure.",
 "BCryptGetFipsAlgorithmMode": "The address of a BOOLEAN variable that receives zero if FIPS compliance is not enabled, or a nonzero value if FIPS compliance is enabled.",
 "BCryptQueryContextConfiguration": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptQueryContextFunctionConfiguration": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptQueryContextFunctionProperty": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptQueryProviderRegistration": "A pointer to a null-terminated Unicode string that contains the name of the provider to obtain information about.",
 "BCryptRegisterConfigChangeNotify(HANDLE*)": "The address of a HANDLE variable that receives the event handle. Use one of the Wait Functions, such as WaitForSingleObject, to determine when the event has been signaled. The event is unnamed and must be a manual-reset event. The event is signaled when any CNG configuration data has changed. This handle must be passed to the BCryptUnregisterConfigChangeNotify(HANDLE) function to remove the event notification.",
 "BCryptRegisterConfigChangeNotify(PRKEVENT)": "The address of a PRKEVENT variable that receives the pointer to the event dispatcher object. You use the kernel wait functions, such as KeWaitForSingleObject, to determine when the event has been signaled. The event is signaled when the CNG configuration has changed. This handle must be passed to the BCryptUnregisterConfigChangeNotify(PRKEVENT) function to remove the event notification.",
 "BCryptRemoveContextFunction": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptResolveProviders": "A pointer to a null-terminated Unicode string that contains the identifier of the context for which to obtain the providers. If this is set to NULL or to an empty string, the default context is assumed.",
 "BCryptSetContextFunctionProperty": "Identifies the configuration table that the context exists in. This can be one of the following values. ValueMeaning CRYPT_LOCAL The context exists in the local-machine configuration table. CRYPT_DOMAIN This value is not available for use.",
 "BCryptUnregisterConfigChangeNotify(HANDLE)": "The handle of the event to remove. This is the handle that was obtained by using the BCryptRegisterConfigChangeNotify(HANDLE*) function.",
 "BCryptUnregisterConfigChangeNotify(PRKEVENT)": "The pointer to the event dispatcher object to remove. This is the pointer that was obtained by using the BCryptRegisterConfigChangeNotify(PRKEVENT) function.",
 "MMCFreeNotifyHandle": "A value that specifies a handle provided by the console during an IExtendPropertySheet2::CreatePropertyPages call.",
 "MMCPropertyChangeNotify": "A value that specifies the handle used to route the notification message to the appropriate IComponent or IComponentData.",
 "MMCPropertyHelp": "A pointer to a NULL-terminated string specifying the topic to display in the merged MMC HTML Help file. The string must have the following format: helpfilename::topicfilename where helpfilename is the file name of the snap-in's HTML Help file (.chm) that MMC merged into the MMC HTML Help file (file name only, not the path to the original HTML Help file) and topicfilename is the internal path to the topic file within the snap-in's .chm file. The author of the snap-in's HTML Help file determines whether there is an internal directory structure for the topic HTML files or if all topic HTML files are at the root of the .chm file. For example, if the snap-in had the HTML Help file mysnapin.chm merged into the MMC HTML Help file and a topic HTML file that had the internal Help file path of htm/snphlp01.htm, the string would have the following form: mysnapin.chm::htm/snphlp01.htm Support for numeric IDs for topics is not available in this release.",
 "MMCPropPageCallback": "A pointer to the Microsoft Windows PROPSHEETPAGE structure. Be aware that by default, MFC installs its own callback in the pfnCallback member of the structure.",
 "AddDllDirectory": "An absolute path to the directory to add to the search path. For example, to add the directory Dir2 to the process DLL search path, specify \\Dir2. For more information about paths, see Naming Files, Paths, and Namespaces.",
 "DisableThreadLibraryCalls": "A handle to the DLL module for which the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications are to be disabled. The LoadLibrary, LoadLibraryEx, or GetModuleHandle function returns this handle. Note that you cannot call GetModuleHandle with NULL because this returns the base address of the executable image, not the DLL image.",
 "FreeLibrary": "A handle to the loaded library module. The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.",
 "FreeLibraryAndExitThread": "A handle to the DLL module whose reference count the function decrements. The LoadLibrary or GetModuleHandleEx function returns this handle. Do not call this function with a handle returned by the GetModuleHandle function, since this function does not maintain a reference count for the module.",
 "ExitThread": "The exit code for the thread.",
 "GetDllDirectory": "The size of the output buffer, in characters.",
 "GetModuleFileName": "A handle to the loaded module whose path is being requested. If this parameter is NULL, GetModuleFileName retrieves the path of the executable file of the current process. The GetModuleFileName function does not retrieve the path for modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx.",
 "GetModuleHandle": "The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process. If this parameter is NULL, GetModuleHandle returns a handle to the file used to create the calling process (.exe file). The GetModuleHandle function does not retrieve handles for modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx.",
 "GetModuleHandleEx": "This parameter can be zero or one or more of the following values. If the module's reference count is incremented, the caller must use the FreeLibrary function to decrement the reference count when the module handle is no longer needed. GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004) The lpModuleName parameter is an address in the module. GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001) The module stays loaded until the process is terminated, no matter how many times FreeLibrary is called. This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT. GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002) The reference count for the module is not incremented. This option is equivalent to the behavior of GetModuleHandle. Do not pass the retrieved module handle to the FreeLibrary function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks. This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.",
 "GetProcAddress": "A handle to the DLL module that contains the function or variable. The LoadLibrary, LoadLibraryEx, LoadPackagedLibrary, or GetModuleHandle function returns this handle. The GetProcAddress function does not retrieve addresses from modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx.",
 "LoadLibrary": "The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the LIBRARY keyword in the module-definition (.def) file. If the string specifies a full path, the function searches only that path for the module. If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks. If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\\), not forward slashes (/). For more information about paths, see Naming a File or Directory. If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension .dll to the module name. To prevent the function from appending .dll to the module name, include a trailing point character (.) in the module name string.",
 "LoadLibraryEx": "A string that specifies the file name of the module to load. This name is not related to the name stored in a library module itself, as specified by the LIBRARY keyword in the module-definition (.def) file. The module can be a library module (a .dll file) or an executable module (an .exe file). If the specified module is an executable module, static imports are not loaded; instead, the module is loaded as if DONT_RESOLVE_DLL_REFERENCES was specified. See the dwFlags parameter for more information. If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension .dll to the module name. To prevent the function from appending .dll to the module name, include a trailing point character (.) in the module name string. If the string specifies a fully qualified path, the function searches only that path for the module. When specifying a path, be sure to use backslashes (\\), not forward slashes (/). For more information about paths, see Naming Files, Paths, and Namespaces. If the string specifies a module name without a path and more than one loaded module has the same base name and extension, the function returns a handle to the module that was loaded first. If the string specifies a module name without a path and a module of the same name is not already loaded, or if the string specifies a module name with a relative path, the function searches for the specified module. The function also searches for modules if loading the specified module causes the system to load other associated modules (that is, if the module has dependencies). The directories that are searched and the order in which they are searched depend on the specified path and the dwFlags parameter. For more information, see Remarks. If the function cannot find the module or one of its dependencies, the function fails.",
 "LoadPackagedLibrary": "The file name of the packaged module to load. The module can be a library module (a .dll file) or an executable module (an .exe file). If this parameter specifies a module name without a path and the file name extension is omitted, the function appends the default library extension .dll to the module name. To prevent the function from appending .dll to the module name, include a trailing point character (.) in the module name string. If this parameter specifies a path, the function searches that path for the module. The path cannot be an absolute path or a relative path that contains \"..\" in the path. When specifying a path, be sure to use backslashes (\\), not forward slashes (/). For more information about paths, see Naming Files, Paths, and Namespaces. If the specified module is already loaded in the process, the function returns a handle to the loaded module. The module must have been originally loaded from the package dependency graph of the process. If loading the specified module causes the system to load other associated modules, the function first searches loaded modules, then it searches the package dependency graph of the process. For more information, see Remarks.",
 "RemoveDllDirectory": "The cookie returned by AddDllDirectory when the directory was added to the search path.",
 "SetDefaultDllDirectories": "The directories to search. This parameter can be any combination of the following values. ValueMeaning LOAD_LIBRARY_SEARCH_APPLICATION_DIR 0x00000200 If this value is used, the application's installation directory is searched. LOAD_LIBRARY_SEARCH_DEFAULT_DIRS 0x00001000 This value is a combination of LOAD_LIBRARY_SEARCH_APPLICATION_DIR, LOAD_LIBRARY_SEARCH_SYSTEM32, and LOAD_LIBRARY_SEARCH_USER_DIRS. This value represents the recommended maximum number of directories an application should include in its DLL search path. LOAD_LIBRARY_SEARCH_SYSTEM32 0x00000800 If this value is used, %windows%\\system32 is searched. LOAD_LIBRARY_SEARCH_USER_DIRS 0x00000400 If this value is used, any path explicitly added using the AddDllDirectory or SetDllDirectory function is searched. If more than one directory has been added, the order in which those directories are searched is unspecified.",
 "SetDllDirectory": "The directory to be added to the search path. If this parameter is an empty string (\"\"), the call removes the current directory from the default DLL search order. If this parameter is NULL, the function restores the default search order.",
 "LoadModule": "The file name of the application to be run. When specifying a path, be sure to use backslashes (\\), not forward slashes (/). If the lpModuleName parameter does not contain a directory path, the system searches for the executable file in this order: The directory from which the application loaded. The current directory. The system directory. Use the GetSystemDirectory function to get the path of this directory. The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched. The name of this directory is System. The Windows directory. Use the GetWindowsDirectory function to get the path of this directory. The directories that are listed in the PATH environment variable.",
 "CreatePipe": "A pointer to a variable that receives the read handle for the pipe.",
 "CallNamedPipe": "The pipe name.",
 "ConnectNamedPipe": "A handle to the server end of a named pipe instance. This handle is returned by the CreateNamedPipe function.",
 "CreateNamedPipe": "The unique pipe name. This string must have the following form: \\\\.\\pipe\\pipename The pipename part of the name can include any character other than a backslash, including numbers and special characters. The entire pipe name string can be up to 256 characters long. Pipe names are not case sensitive.",
 "DisconnectNamedPipe": "A handle to an instance of a named pipe. This handle must be created by the CreateNamedPipe function.",
 "GetNamedPipeClientComputerName": "A handle to an instance of a named pipe. This handle must be created by the CreateNamedPipe function.",
 "GetNamedPipeClientProcessId": "A handle to an instance of a named pipe. This handle must be created by the CreateNamedPipe function.",
 "GetNamedPipeClientSessionId": "A handle to an instance of a named pipe. This handle must be created by the CreateNamedPipe function.",
 "GetNamedPipeHandleState": "A handle to the named pipe for which information is wanted. The handle must have GENERIC_READ access for a read-only or read/write pipe, or it must have GENERIC_WRITE and FILE_READ_ATTRIBUTES access for a write-only pipe. This parameter can also be a handle to an anonymous pipe, as returned by the CreatePipe function.",
 "GetNamedPipeInfo": "A handle to the named pipe instance. The handle must have GENERIC_READ access to the named pipe for a read-only or read/write pipe, or it must have GENERIC_WRITE and FILE_READ_ATTRIBUTES access for a write-only pipe. This parameter can also be a handle to an anonymous pipe, as returned by the CreatePipe function.",
 "GetNamedPipeServerProcessId": "A handle to an instance of a named pipe. This handle must be created by the CreateNamedPipe function.",
 "GetNamedPipeServerSessionId": "A handle to an instance of a named pipe. This handle must be created by the CreateNamedPipe function.",
 "ImpersonateNamedPipeClient": "A handle to a named pipe.",
 "PeekNamedPipe": "A handle to the pipe. This parameter can be a handle to a named pipe instance, as returned by the CreateNamedPipe or CreateFile function, or it can be a handle to the read end of an anonymous pipe, as returned by the CreatePipe function. The handle must have GENERIC_READ access to the pipe.",
 "SetNamedPipeHandleState": "A handle to the named pipe instance. This parameter can be a handle to the server end of the pipe, as returned by the CreateNamedPipe function, or to the client end of the pipe, as returned by the CreateFile function. The handle must have GENERIC_WRITE access to the named pipe for a write-only or read/write pipe, or it must have GENERIC_READ and FILE_WRITE_ATTRIBUTES access for a read-only pipe. This parameter can also be a handle to an anonymous pipe, as returned by the CreatePipe function.",
 "TransactNamedPipe": "A handle to the named pipe returned by the CreateNamedPipe or CreateFile function. This parameter can also be a handle to an anonymous pipe, as returned by the CreatePipe function.",
 "WaitNamedPipe": "The name of the named pipe. The string must include the name of the computer on which the server process is executing. A period may be used for the servername if the pipe is local. The following pipe name format is used: \\\\servername\\pipe\\pipename",
 "McastApiCleanup": null,
 "McastApiStartup": "Pointer to the version of multicast (MCAST) that the client wishes to use. [out] Pointer to the version of MCAST implemented on the system.",
 "McastEnumerateScopes": "Specifies the address family to be used in enumeration, in the form of an IPNG_ADDRESS structure. Use AF_INET for IPv4 addresses and AF_INET6 for IPv6 addresses.",
 "McastGenUID": "Pointer to the MCAST_CLIENT_UID structure into which the unique identifier is stored. The size of the buffer to which pRequestID points must be at least MCAST_CLIENT_ID_LEN in size.",
 "McastReleaseAddress": "Designates the address family. Use AF_INET for Internet Protocol version 4 (IPv4), and AF_INET6 for Internet Protocol version 6 (IPv6).",
 "McastRenewAddress": "Designates the address family. Use AF_INET for Internet Protocol version 4 (IPv4), and AF_INET6 for Internet Protocol version 6 (IPv6).",
 "McastRequestAddress": "Specifies the address family to be used in the request, in the form of an IPNG_ADDRESS structure. Use AF_INET for IPv4 addresses and AF_INET6 for IPv6 addresses.",
 "RadiusExtensionFreeAttributes": "Pointer to an array of attributes. The RadiusExtensionFreeAttributes function should deallocate the memory occupied by these attributes. These attributes were returned in the pOutAttrs parameter in a previous call to the RadiusExtensionProcessEx function.",
 "RadiusExtensionInit": null,
 "RadiusExtensionProcess": "Pointer to an array of attributes from the request. The array is terminated by an attribute with dwAttrType set to ratMinimum. These attributes should be treated as read-only; they should not be modified by RadiusExtensionProcess. Also, these attributes should not be referenced in any way after RadiusExtensionProcess returns.",
 "RadiusExtensionProcessEx": "Pointer to an array of attributes from the request. The array is terminated by an attribute with dwAttrType set to ratMinimum. These attributes should be treated as read-only; they should not be modified by RadiusExtensionProcessEx. Also, these attributes should not be referenced in any way after RadiusExtensionProcessEx returns.",
 "RadiusExtensionProcess2": "Pointer to a RADIUS_EXTENSION_CONTROL_BLOCK structure. The members of this structure contain values and function pointers that enable the NPS Extension DLL to process the RADIUS packet.",
 "RadiusExtensionTerm": null,
 "GetRequest": "Pointer to a RADIUS_EXTENSION_CONTROL_BLOCK structure. NPS passes the Extension DLL a pointer to this structure when it calls the RadiusExtensionProcess2 structure.",
 "GetResponse": "Pointer to a RADIUS_EXTENSION_CONTROL_BLOCK structure. NPS passes the Extension DLL a pointer to this structure when it calls the RadiusExtensionProcess2 function.",
 "SetResponseType": "Pointer to a RADIUS_EXTENSION_CONTROL_BLOCK structure. NPS passes the Extension DLL a pointer to this structure when it calls the RadiusExtensionProcess2 \t\t\t\t\t\tfunction.",
 "Add": "Pointer to the RADIUS_ATTRIBUTE_ARRAY structure that represents the array of attributes to which to append the specified attribute. The GetRequest and GetResponse functions return pointers to RADIUS_ATTRIBUTE_ARRAY structures.",
 "AttributeAt": "Pointer to the RADIUS_ATTRIBUTE_ARRAY structure that represents the array of attributes from which to retrieve the specified attribute. The GetRequest and GetResponse functions return pointers to RADIUS_ATTRIBUTE_ARRAY structures.",
 "GetSize": "Pointer to the RADIUS_ATTRIBUTE_ARRAY structure that represents the array of attributes for which to retrieve the size. The GetRequest and GetResponse functions return pointers to RADIUS_ATTRIBUTE_ARRAY structures.",
 "InsertAt": "Pointer to the RADIUS_ATTRIBUTE_ARRAY structure that represents the array of attributes in which to insert the specified attribute. The GetRequest and GetResponse functions return pointers to RADIUS_ATTRIBUTE_ARRAY structures.",
 "RemoveAt": "Pointer to the RADIUS_ATTRIBUTE_ARRAY structure that represents the array of attributes from which to remove the specified attribute. The GetRequest and GetResponse functions return pointers to RADIUS_ATTRIBUTE_ARRAY structures.",
 "SetAt": "Pointer to the RADIUS_ATTRIBUTE_ARRAY structure that represents the array of attributes that contains the attribute to replace. The GetRequest and GetResponse functions return pointers to RADIUS_ATTRIBUTE_ARRAY structures.",
 "AMGetErrorText": "HRESULT value.",
 "CreateVPNConnection": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL.",
 "GetInternetConnected": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL.",
 "GetNetworkConnected": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL.",
 "GetVPNConnected": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL.",
 "IsInternetConnected": null,
 "RegisterPageWithPage": "Pointer to a GUID that uniquely identifies the parent page within the wizard.",
 "UnregisterPage": "Pointer to a GUID that uniquely identifies the page to be removed from the Get Connected wizard.",
 "UnregisterPagesLink": "Pointer to a GUID that uniquely identifies the parent page whose link to a child page will be removed.",
 "ClearPropVariantArray": "Type: PROPVARIANT* Array of PROPVARIANT structures to free.",
 "ClearVariantArray": "Type: VARIANT* Array of VARIANT structures to free.",
 "FreePropVariantArray": "Type: ULONG The number of elements in the array specified by rgvars.",
 "InitPropVariantFromBoolean": "Type: BOOL Source BOOL value.",
 "InitPropVariantFromBooleanVector": "Type: const BOOL* Pointer to the Boolean vector used to initialize the structure. If this parameter is NULL, the elements pointed to by the cabool.pElems structure member are initialized with VARIANT_FALSE.",
 "InitPropVariantFromBuffer": "Type: const void* Pointer to the buffer.",
 "InitPropVariantFromCLSID": "Type: REFCLSID Reference to the CLSID.",
 "InitPropVariantFromDouble": "Type: DOUBLE The source double value.",
 "InitPropVariantFromDoubleVector": "Type: const DOUBLE* Pointer to a double vector. If this value is NULL, the elements pointed to by the cadbl.pElems structure member are initialized with 0.0.",
 "InitPropVariantFromFileTime": "Type: const FILETIME* Pointer to the date and time as a FILETIME structure.",
 "InitPropVariantFromFileTimeVector": "Type: const FILETIME* Pointer to the date and time as a FILETIME vector. If this value is NULL, the elements pointed to by the cafiletime.pElems structure member is initialized with (FILETIME)0.",
 "InitPropVariantFromGUIDAsBuffer": "Type: REFGUID Reference to the source GUID.",
 "InitPropVariantFromGUIDAsString": "Type: REFGUID Reference to the source GUID.",
 "InitPropVariantFromInt16": "Type: SHORT The source SHORT value.",
 "InitPropVariantFromInt16Vector": "Type: const SHORT* Pointer to a source vector of SHORT values. If this parameter is NULL, the vector is initialized with zeros.",
 "InitPropVariantFromInt32": "Type: LONG The source LONG value.",
 "InitPropVariantFromInt32Vector": "Type: const LONG* Pointer to a source vector of LONG values. If this parameter is NULL, the vector is initialized with zeros.",
 "InitPropVariantFromInt64": "Type: LONGLONG The source LONGLONG value.",
 "InitPropVariantFromInt64Vector": "Type: const LONGLONG* Pointer to a source vector of LONGLONG values. If this parameter is NULL, the vector is initialized with zeros.",
 "InitPropVariantFromPropVariantVectorElem": "Type: REFPROPVARIANT The source PROPVARIANT structure.",
 "InitPropVariantFromResource": "Type: HINSTANCE Handle to an instance of the module whose executable file contains the string resource.",
 "InitPropVariantFromString": "Type: PCWSTR Pointer to a buffer that contains the source Unicode string.",
 "InitPropVariantFromStringAsVector": "Type: PCWSTR Pointer to a buffer that contains the source Unicode string.",
 "InitPropVariantFromStringVector": "Type: PCWSTR* Pointer to a buffer that contains the source string vector.",
 "InitPropVariantFromStrRet": "Type: STRRET* Pointer to a STRRET structure that contains the string.",
 "InitPropVariantFromUInt16": "Type: USHORT Source value.",
 "InitPropVariantFromUInt16Vector": "Type: const USHORT* Pointer to a source vector of USHORT values. If this parameter is NULL, the PROPVARIANT is initialized with zeros.",
 "InitPropVariantFromUInt32": "Type: ULONG Source ULONG value.",
 "InitPropVariantFromUInt32Vector": "Type: const ULONG* Pointer to a source vector of ULONG values. If this parameter is NULL, the PROPVARIANT is initialized with zeros.",
 "InitPropVariantFromUInt64Vector": "Type: const ULONGLONG* Pointer to a source vector of ULONGLONG values. If this parameter is NULL, the PROPVARIANT is initialized with zeros.",
 "InitPropVariantVectorFromPropVariant": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure that contains a single value.",
 "InitVariantFromBoolean": "Type: BOOL Source BOOL value.",
 "InitVariantFromBooleanArray": "Type: const BOOL* Pointer to source array of Boolean values.",
 "InitVariantFromBuffer": "Type: const VOID* Pointer to the source buffer.",
 "InitVariantFromDispatch": "Type: IDispatch* Pointer to the source IDispatch.",
 "InitVariantFromDosDateTime": "Type: WORD WORD value that represents an MS-DOS date. See DosDateTimeToVariantTime for more information about this format.",
 "InitVariantFromDouble": "Type: DOUBLE Source value.",
 "InitVariantFromDoubleArray": "Type: const DOUBLE* Pointer to the source array of DOUBLE values.",
 "InitVariantFromFileTime": "Type: const FILETIME* Pointer to date and time information stored in a FILETIME structure.",
 "InitVariantFromFileTimeArray": "Type: const FILETIME* Pointer to an array of FILETIME structures.",
 "InitVariantFromGUIDAsBuffer": "Type: REFGUID Reference to the source GUID.",
 "InitVariantFromInt16": "Type: SHORT Source SHORT value.",
 "InitVariantFromInt16Array": "Type: const SHORT* Pointer to the source array of SHORT values.",
 "InitVariantFromInt32": "Type: LONG Source LONG value.",
 "InitVariantFromInt32Array": "Type: const LONG* Pointer to the source array of LONG values.",
 "InitVariantFromInt64": "Type: LONGLONG Source LONGLONG value.",
 "InitVariantFromInt64Array": "Type: const LONGLONG* Pointer to the source array of LONGLONG values.",
 "InitVariantFromResource": "Type: HINSTANCE Handle to an instance of the module whose executable file contains the string resource.",
 "InitVariantFromString": "Type: PCWSTR Pointer to a buffer that contains the source Unicode string. If this value is NULL, the function initializes the VARIANT with a NULL BSTR.",
 "InitVariantFromStringArray": "Type: PCWSTR* Pointer to an array of strings.",
 "InitVariantFromStrRet": "Type: STRRET* Pointer to a STRRET structure.",
 "InitVariantFromUInt16": "Type: USHORT Source USHORT value.",
 "InitVariantFromUInt16Array": "Type: const USHORT* Pointer to the source array of USHORT values.",
 "InitVariantFromUInt32": "Type: ULONG Source ULONG value.",
 "InitVariantFromUInt32Array": "Type: const ULONG* Pointer to the source array of ULONG values.",
 "InitVariantFromUInt64": "Type: ULONGLONG Source ULONGLONG value.",
 "InitVariantFromVariantArrayElem": "Type: REFVARIANT Reference to the source VARIANT structure.",
 "IsPropVariantString": "Type: REFPROPVARIANT Reference to the PROPVARIANT structure.",
 "IsPropVariantVector": "Type: REFPROPVARIANT Reference to the PROPVARIANT structure being queried.",
 "IsVariantArray": "Type: REFVARIANT Reference to the variant being queried.",
 "IsVariantString": "Type: REFVARIANT Reference to the variant being queried.",
 "IsVarTypeFloat": "Type: VARTYPE Specifies the VARTYPE being queried.",
 "IsVarTypeInteger": "Type: VARTYPE Specifies the VARTYPE being queried.",
 "IsVarTypeNumber": "Type: VARTYPE Specifies the VARTYPE being queried.",
 "IsVarTypeSignedInteger": "Type: VARTYPE Specifies the VARTYPE being queried.",
 "IsVarTypeUnsignedInteger": "Type: VARTYPE Specifies the VARTYPE being queried.",
 "PropVariantChangeType": "Type: PROPVARIANT* A pointer to a PROPVARIANT structure that, when this function returns successfully, receives the coerced value and its new type.",
 "PropVariantClear": "Type: PROPVARIANT* Pointer to the PROPVARIANT structure to clear. When this function successfully returns, the PROPVARIANT is zeroed and the type is set to VT_EMPTY.",
 "PropVariantCompare": "Type: REFPROPVARIANT Reference to the first PROPVARIANT structure.",
 "PropVariantCompareEx": "Type: REFPROPVARIANT Reference to the first PROPVARIANT structure.",
 "PropVariantCopy": "Type: PROPVARIANT* Pointer to the destination PROPVARIANT structure that receives the copy.",
 "PropVariantGetBooleanElem": "Type: REFPROPVARIANT A reference to the source PROPVARIANT structure.",
 "PropVariantGetDoubleElem": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure.",
 "PropVariantGetElem": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure.",
 "PropVariantGetElementCount": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure.",
 "PropVariantGetFileTimeElem": "Type: REFPROPVARIANT The source PROPVARIANT structure.",
 "PropVariantGetInt16Elem": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure.",
 "PropVariantGetInt32Elem": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure.",
 "PropVariantGetInt64Elem": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure.",
 "PropVariantGetStringElem": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantGetUInt16Elem": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure.",
 "PropVariantGetUInt32Elem": "Type: REFPROPVARIANT The source PROPVARIANT structure.",
 "PropVariantGetUInt64Elem": "Type: REFPROPVARIANT The source PROPVARIANT structure.",
 "PropVariantToBoolean": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToBooleanVector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToBooleanVectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToBooleanWithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToBSTR": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToBuffer": "Type: REFPROPVARIANT The source PROPVARIANT structure.",
 "PropVariantToCLSID": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToDouble": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToDoubleVector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToDoubleVectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToDoubleWithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToFileTime": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToFileTimeVector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToFileTimeVectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToGUID": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt16": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt16Vector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt16VectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt16WithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt32": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt32Vector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt32VectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt32WithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt64": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt64Vector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt64VectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToInt64WithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToString": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToStringAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToStringVector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToStringVectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToStringWithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToStrRet": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt16": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt16Vector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt16VectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt16WithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt32": "Type: REFPROPVARIANT A reference to a source PROPVARIANT structure.",
 "PropVariantToUInt32Vector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt32VectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt32WithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt64": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt64Vector": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt64VectorAlloc": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToUInt64WithDefault": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure.",
 "PropVariantToVariant": "Type: const PROPVARIANT* Pointer to a source PROPVARIANT structure.",
 "StgDeserializePropVariant": "Type: const SERIALIZEDPROPERTYVALUE* Pointer to a SERIALIZEDPROPERTYVALUE structure.",
 "StgSerializePropVariant": "Type: const PROPVARIANT* A constant pointer to the source PROPVARIANT structure.",
 "VariantCompare": "Type: REFVARIANT Reference to a first variant structure.",
 "VariantGetBooleanElem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetDoubleElem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetElem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetElementCount": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetInt16Elem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetInt32Elem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetInt64Elem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetStringElem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetUInt16Elem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetUInt32Elem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantGetUInt64Elem": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToBoolean": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToBooleanArray": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToBooleanArrayAlloc": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToBooleanWithDefault": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToBuffer": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToDosDateTime": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToDouble": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToDoubleArray": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToDoubleArrayAlloc": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToDoubleWithDefault": "Type: REFVARIANT Reference to a source VARIANT structure.",
 "VariantToFileTime": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToGUID": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt16": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt16Array": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt16ArrayAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt16WithDefault": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt32": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt32Array": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt32ArrayAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt32WithDefault": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt64": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt64Array": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt64ArrayAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToInt64WithDefault": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToPropVariant": "Type: const VARIANT* Pointer to a source VARIANT structure.",
 "VariantToString": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToStringAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToStringArray": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToStringArrayAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToStringWithDefault": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToStrRet": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt16": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt16Array": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt16ArrayAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt16WithDefault": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt32": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt32Array": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt32ArrayAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt32WithDefault": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt64": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt64Array": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt64ArrayAlloc": "Type: REFVARIANT Reference to a source variant structure.",
 "VariantToUInt64WithDefault": "Type: REFVARIANT Reference to a source variant structure.",
 "AddSecureMemoryCacheCallback": "A pointer to the application-defined SecureMemoryCacheCallback function to register.",
 "CopyMemory": "A pointer to the starting address of the copied block's destination.",
 "CreateMemoryResourceNotification": "The memory condition under which the object is to be signaled. This parameter can be one of the following values from the MEMORY_RESOURCE_NOTIFICATION_TYPE enumeration. ValueMeaning LowMemoryResourceNotification 0 Available physical memory is running low. HighMemoryResourceNotification 1 Available physical memory is high.",
 "GetLargePageMinimum": null,
 "GetPhysicallyInstalledSystemMemory": "A pointer to a variable that receives the amount of physically installed RAM, in kilobytes.",
 "GetSystemFileCacheSize": "A pointer to a variable that receives the minimum size of the file cache, in bytes. The virtual memory manager attempts to keep at least this much memory resident in the system file cache, if there is a previous call to the SetSystemFileCacheSize function with the FILE_CACHE_MIN_HARD_ENABLE flag.",
 "GetWriteWatch": "Indicates whether the function resets the write-tracking state. To reset the write-tracking state, set this parameter to WRITE_WATCH_FLAG_RESET. If this parameter is 0 (zero), GetWriteWatch does not reset the write-tracking state. For more information, see the Remarks section of this topic.",
 "GlobalMemoryStatusEx": "A pointer to a MEMORYSTATUSEX structure that receives information about current memory availability.",
 "MoveMemory": "A pointer to the starting address of the move destination.",
 "QueryMemoryResourceNotification": "A handle to a memory resource notification object. The CreateMemoryResourceNotification function returns this handle.",
 "RemoveSecureMemoryCacheCallback": "A pointer to the application-defined SecureMemoryCacheCallback function to remove.",
 "ResetWriteWatch": "A pointer to the base address of the memory region for which to reset the write-tracking state. This address must be in a memory region that is allocated by the VirtualAlloc function with MEM_WRITE_WATCH.",
 "SecureMemoryCacheCallback": "The starting address of the memory range.",
 "SecureZeroMemory": "A pointer to the starting address of the block of memory to fill with zeros.",
 "SetSystemFileCacheSize": "The minimum size of the file cache, in bytes. The virtual memory manager attempts to keep at least this much memory resident in the system file cache. To flush the cache, specify (SIZE_T) -1.",
 "GetProcessDEPPolicy": "A handle to the process. PROCESS_QUERY_INFORMATION privilege is required to get the DEP policy of a process. Windows XP with SP3: The hProcess parameter is ignored.",
 "GetSystemDEPPolicy": null,
 "SetProcessDEPPolicy": "A DWORD that can be one or more of the following values. ValueMeaning 0 If the DEP system policy is OptIn or OptOut and DEP is enabled for the process, setting dwFlags to 0 disables DEP for the process. PROCESS_DEP_ENABLE 0x00000001 Enables DEP permanently on the current process. After DEP has been enabled for the process by setting PROCESS_DEP_ENABLE, it cannot be disabled for the life of the process. PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION 0x00000002 Disables DEP-ATL thunk emulation for the current process, which prevents the system from intercepting NX faults that originate from the Active Template Library (ATL) thunk layer. For more information, see the Remarks section. This flag can be specified only with PROCESS_DEP_ENABLE.",
 "CreateFileMapping": "A handle to the file from which to create a file mapping object. The file must be opened with access rights that are compatible with the protection flags that the flProtect parameter specifies. It is not required, but it is recommended that files you intend to map be opened for exclusive access. For more information, see File Security and Access Rights. If hFile is INVALID_HANDLE_VALUE, the calling process must also specify a size for the file mapping object in the dwMaximumSizeHigh and dwMaximumSizeLow parameters. In this scenario, CreateFileMapping creates a file mapping object of a specified size that is backed by the system paging file instead of by a file in the file system.",
 "CreateFileMappingFromApp": "A handle to the file from which to create a file mapping object. The file must be opened with access rights that are compatible with the protection flags that the flProtect parameter specifies. It is not required, but it is recommended that files you intend to map be opened for exclusive access. For more information, see File Security and Access Rights. If hFile is INVALID_HANDLE_VALUE, the calling process must also specify a size for the file mapping object in the dwMaximumSizeHigh and dwMaximumSizeLow parameters. In this scenario, CreateFileMappingFromApp creates a file mapping object of a specified size that is backed by the system paging file instead of by a file in the file system.",
 "CreateFileMappingNuma": "A handle to the file from which to create a file mapping object. The file must be opened with access rights that are compatible with the protection flags that the flProtect parameter specifies. It is not required, but it is recommended that files you intend to map be opened for exclusive access. For more information, see File Security and Access Rights. If hFile is INVALID_HANDLE_VALUE, the calling process must also specify a size for the file mapping object in the dwMaximumSizeHigh and dwMaximumSizeLow parameters. In this scenario, CreateFileMappingNuma creates a file mapping object of a specified size that is backed by the system paging file instead of by a file in the file system.",
 "FlushViewOfFile": "A pointer to the base address of the byte range to be flushed to the disk representation of the mapped file.",
 "MapViewOfFile": "A handle to a file mapping object. The CreateFileMapping and OpenFileMapping functions return this handle.",
 "MapViewOfFile2": "A HANDLE to a section that is to be mapped into the address space of the specified process.",
 "MapViewOfFileEx": "A handle to a file mapping object. The CreateFileMapping and OpenFileMapping functions return this handle.",
 "MapViewOfFileExNuma": "A handle to a file mapping object. The CreateFileMappingNuma and OpenFileMapping functions return this handle.",
 "MapViewOfFileFromApp": "A handle to a file mapping object. The CreateFileMappingFromApp function returns this handle.",
 "MapViewOfFileNuma2": "A HANDLE to a section that is to be mapped into the address space of the specified process.",
 "OpenFileMapping": "The access to the file mapping object. This access is checked against any security descriptor on the target file mapping object. For a list of values, see File Mapping Security and Access Rights.",
 "UnmapViewOfFile": "A pointer to the base address of the mapped view of a file that is to be unmapped. This value must be identical to the value returned by a previous call to the MapViewOfFile or MapViewOfFileEx function.",
 "UnmapViewOfFile2": "A HANDLE to the process from which the section will be unmapped.",
 "AllocateUserPhysicalPages": "A handle to a process. The function allocates memory that can later be mapped within the virtual address space of this process. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights.",
 "FreeUserPhysicalPages": "The handle to a process. The function frees memory within the virtual address space of this process.",
 "MapUserPhysicalPages": "A pointer to the starting address of the region of memory to remap. The value of lpAddress must be within the address range that the VirtualAlloc function returns when the Address Windowing Extensions (AWE) region is allocated.",
 "MapUserPhysicalPagesScatter": "A pointer to an array of starting addresses of the regions of memory to remap. Each entry in VirtualAddresses must be within the address range that the VirtualAlloc function returns when the Address Windowing Extensions (AWE) region is allocated. The value in NumberOfPages indicates the size of the array. Entries can be from multiple Address Windowing Extensions (AWE) regions.",
 "GetProcessHeap": null,
 "GetProcessHeaps": "The maximum number of heap handles that can be stored into the buffer pointed to by ProcessHeaps.",
 "HeapAlloc": "A handle to the heap from which the memory will be allocated. This handle is returned by the HeapCreate or GetProcessHeap function.",
 "HeapCompact": "A handle to the heap. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapCreate": "The heap allocation options. These options affect subsequent access to the new heap through calls to the heap functions. This parameter can be 0 or one or more of the following values. ValueMeaning HEAP_CREATE_ENABLE_EXECUTE 0x00040000 All memory blocks that are allocated from this heap allow code execution, if the hardware enforces data execution prevention. Use this flag heap in applications that run code from the heap. If HEAP_CREATE_ENABLE_EXECUTE is not specified and an application attempts to run code from a protected page, the application receives an exception with the status code STATUS_ACCESS_VIOLATION. HEAP_GENERATE_EXCEPTIONS 0x00000004 The system raises an exception to indicate failure (for example, an out-of-memory condition) for calls to HeapAlloc and HeapReAlloc instead of returning NULL. HEAP_NO_SERIALIZE 0x00000001 Serialized access is not used when the heap functions access this heap. This option applies to all subsequent heap function calls. Alternatively, you can specify this option on individual heap function calls. The low-fragmentation heap (LFH) cannot be enabled for a heap created with this option. A heap created with this option cannot be locked. For more information about serialized access, see the Remarks section of this topic.",
 "HeapDestroy": "A handle to the heap to be destroyed. This handle is returned by the HeapCreate function. Do not use the handle to the process heap returned by the GetProcessHeap function.",
 "HeapFree": "A handle to the heap whose memory block is to be freed. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapLock": "A handle to the heap to be locked. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapQueryInformation": "A handle to the heap whose information is to be retrieved. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapReAlloc": "A handle to the heap from which the memory is to be reallocated. This handle is a returned by either the HeapCreate or GetProcessHeap function.",
 "HeapSetInformation": "A handle to the heap where information is to be set. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapSize": "A handle to the heap in which the memory block resides. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapUnlock": "A handle to the heap to be unlocked. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapValidate": "A handle to the heap to be validated. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "HeapWalk": "A handle to the heap. This handle is returned by either the HeapCreate or GetProcessHeap function.",
 "DiscardVirtualMemory": "Page-aligned starting address of the memory to discard.",
 "OfferVirtualMemory": "Page-aligned starting address of the memory to offer.",
 "PrefetchVirtualMemory": "Handle to the process whose virtual address ranges are to be prefetched. Use the GetCurrentProcess function to use the current process.",
 "ReclaimVirtualMemory": "Page-aligned starting address of the memory to reclaim.",
 "VirtualAlloc": "The starting address of the region to allocate. If the memory is being reserved, the specified address is rounded down to the nearest multiple of the allocation granularity. If the memory is already reserved and is being committed, the address is rounded down to the next page boundary. To determine the size of a page and the allocation granularity on the host computer, use the GetSystemInfo function. If this parameter is NULL, the system determines where to allocate the region. If this address is within an enclave that you have not initialized by calling InitializeEnclave, VirtualAlloc allocates a page of zeros for the enclave at that address. The page must be previously uncommitted, and will not be measured with the EEXTEND instruction of the Intel Software Guard Extensions programming model. If the address in within an enclave that you initialized, then the allocation operation fails with the ERROR_INVALID_ADDRESS error.",
 "VirtualAllocEx": "The handle to a process. The function allocates memory within the virtual address space of this process. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights.",
 "VirtualAllocFromApp": "The starting address of the region to allocate. If the memory is being reserved, the specified address is rounded down to the nearest multiple of the allocation granularity. If the memory is already reserved and is being committed, the address is rounded down to the next page boundary. To determine the size of a page and the allocation granularity on the host computer, use the GetSystemInfo function. If this parameter is NULL, the system determines where to allocate the region.",
 "VirtualFree": "A pointer to the base address of the region of pages to be freed. If the dwFreeType parameter is MEM_RELEASE, this parameter must be the base address returned by the VirtualAlloc function when the region of pages is reserved.",
 "VirtualFreeEx": "A handle to a process. The function frees memory within the virtual address space of the process. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights.",
 "VirtualLock": "A pointer to the base address of the region of pages to be locked.",
 "VirtualProtect": "A pointer an address that describes the starting page of the region of pages whose access protection attributes are to be changed. All pages in the specified region must be within the same reserved region allocated when calling the VirtualAlloc or VirtualAllocEx function using MEM_RESERVE. The pages cannot span adjacent reserved regions that were allocated by separate calls to VirtualAlloc or VirtualAllocEx using MEM_RESERVE.",
 "VirtualProtectEx": "A handle to the process whose memory protection is to be changed. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights.",
 "VirtualProtectFromApp": "A pointer an address that describes the starting page of the region of pages whose access protection attributes are to be changed. All pages in the specified region must be within the same reserved region allocated when calling the VirtualAlloc, VirtualAllocFromApp, or VirtualAllocEx function using MEM_RESERVE. The pages cannot span adjacent reserved regions that were allocated by separate calls to VirtualAlloc, VirtualAllocFromApp, or VirtualAllocEx using MEM_RESERVE.",
 "VirtualQuery": "A pointer to the base address of the region of pages to be queried. This value is rounded down to the next page boundary. To determine the size of a page on the host computer, use the GetSystemInfo function. If lpAddress specifies an address above the highest memory address accessible to the process, the function fails with ERROR_INVALID_PARAMETER.",
 "VirtualQueryEx": "A handle to the process whose memory information is queried. The handle must have been opened with the PROCESS_QUERY_INFORMATION access right, which enables using the handle to read information from the process object. For more information, see Process Security and Access Rights.",
 "VirtualUnlock": "A pointer to the base address of the region of pages to be unlocked.",
 "GlobalAlloc": "The memory allocation attributes. If zero is specified, the default is GMEM_FIXED. This parameter can be one or more of the following values, except for the incompatible combinations that are specifically noted. ValueMeaning GHND 0x0042 Combines GMEM_MOVEABLE and GMEM_ZEROINIT. GMEM_FIXED 0x0000 Allocates fixed memory. The return value is a pointer. GMEM_MOVEABLE 0x0002 Allocates movable memory. Memory blocks are never moved in physical memory, but they can be moved within the default heap. The return value is a handle to the memory object. To translate the handle into a pointer, use the GlobalLock function. This value cannot be combined with GMEM_FIXED. GMEM_ZEROINIT 0x0040 Initializes memory contents to zero. GPTR 0x0040 Combines GMEM_FIXED and GMEM_ZEROINIT. The following values are obsolete, but are provided for compatibility with 16-bit Windows. They are ignored. GMEM_DDESHARE GMEM_DISCARDABLE GMEM_LOWER GMEM_NOCOMPACT GMEM_NODISCARD GMEM_NOT_BANKED GMEM_NOTIFY GMEM_SHARE",
 "LocalAlloc": "The memory allocation attributes. The default is the LMEM_FIXED value. This parameter can be one or more of the following values, except for the incompatible combinations that are specifically noted. ValueMeaning LHND 0x0042 Combines LMEM_MOVEABLE and LMEM_ZEROINIT. LMEM_FIXED 0x0000 Allocates fixed memory. The return value is a pointer to the memory object. LMEM_MOVEABLE 0x0002 Allocates movable memory. Memory blocks are never moved in physical memory, but they can be moved within the default heap. The return value is a handle to the memory object. To translate the handle to a pointer, use the LocalLock function. This value cannot be combined with LMEM_FIXED. LMEM_ZEROINIT 0x0040 Initializes memory contents to zero. LPTR 0x0040 Combines LMEM_FIXED and LMEM_ZEROINIT. NONZEROLHND Same as LMEM_MOVEABLE. NONZEROLPTR Same as LMEM_FIXED. The following values are obsolete, but are provided for compatibility with 16-bit Windows. They are ignored. LMEM_DISCARDABLE LMEM_NOCOMPACT LMEM_NODISCARD",
 "GlobalFlags": "A handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.",
 "LocalFlags": "A handle to the local memory object. This handle is returned by either the LocalAlloc or LocalReAlloc function.",
 "GlobalFree": "A handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function. It is not safe to free memory allocated with LocalAlloc.",
 "LocalFree": "A handle to the local memory object. This handle is returned by either the LocalAlloc or LocalReAlloc function. It is not safe to free memory allocated with GlobalAlloc.",
 "GlobalHandle": "A pointer to the first byte of the global memory block. This pointer is returned by the GlobalLock function.",
 "LocalHandle": "A pointer to the first byte of the local memory object. This pointer is returned by the LocalLock function.",
 "GlobalLock": "A handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.",
 "LocalLock": "A handle to the local memory object. This handle is returned by either the LocalAlloc or LocalReAlloc function.",
 "GlobalReAlloc": "A handle to the global memory object to be reallocated. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.",
 "LocalReAlloc": "A handle to the local memory object to be reallocated. This handle is returned by either the LocalAlloc or LocalReAlloc function.",
 "GlobalSize": "A handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.",
 "LocalSize": "A handle to the local memory object. This handle is returned by the LocalAlloc, LocalReAlloc, or LocalHandle function.",
 "GlobalUnlock": "A handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.",
 "LocalUnlock": "A handle to the local memory object. This handle is returned by either the LocalAlloc or LocalReAlloc function.",
 "BadMemoryCallbackRoutine": "",
 "RegisterBadMemoryNotification": "A pointer to the application-defined BadMemoryCallbackRoutine function to register.",
 "GetMemoryErrorHandlingCapabilities": "A PULONG that receives one or more of the following flags. ValueMeaning MEHC_PATROL_SCRUBBER_PRESENT 1 The hardware can detect and report failed memory.",
 "UnregisterBadMemoryNotification": "Registration handle returned from the RegisterBadMemoryNotification function.",
 "CreateEnclave": "A handle to the process for which you want to create an enclave.",
 "InitializeEnclave": "A handle to the process for which the enclave was created.",
 "IsEnclaveTypeSupported": "The type of enclave to check. Only a value of ENCLAVE_TYPE_SGX is currently supported, which specifies an enclave for the Intel Software Guard Extensions (SGX) architecture extension.",
 "LoadEnclaveData": "A handle to the process for which the enclave was created.",
 "IsBadCodePtr": "A pointer to a memory address.",
 "IsBadReadPtr": "A pointer to the first byte of the memory block.",
 "IsBadStringPtr": "A pointer to a null-terminated string, either Unicode or ASCII.",
 "IsBadWritePtr": "A pointer to the first byte of the memory block.",
 "GlobalMemoryStatus": "A pointer to a MEMORYSTATUS structure. The GlobalMemoryStatus function stores information about current memory availability into this structure.",
 "CharLower": "Type: LPTSTR A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.",
 "CharLowerBuff": "Type: LPTSTR A buffer containing one or more characters to be processed.",
 "CharNext": "Type: LPCTSTR A character in a null-terminated string.",
 "CharNextExA": "Type: WORD The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in Code Page Identifiers, or one of the following predefined values. ValueMeaning CP_ACP 0 Use system default ANSI code page. CP_MACCP 2 Use the system default Macintosh code page. CP_OEMCP 1 Use system default OEM code page.",
 "CharPrev": "Type: LPCTSTR The beginning of the string.",
 "CharPrevExA": "Type: WORD The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in Code Page Identifiers, or one of the following predefined values. ValueMeaning CP_ACP 0 Use system default ANSI code page. CP_MACCP 2 Use the system default Macintosh code page. CP_OEMCP 1 Use system default OEM code page.",
 "CharToOem": "Type: LPCTSTR The null-terminated string to be translated.",
 "CharToOemBuff": "Type: LPCTSTR The null-terminated string to be translated.",
 "CharUpper": "Type: LPTSTR A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.",
 "CharUpperBuff": "Type: LPTSTR A buffer containing one or more characters to be processed.",
 "IsCharAlpha": "Type: TCHAR The character to be tested.",
 "IsCharAlphaNumeric": "Type: TCHAR The character to be tested.",
 "IsCharLower": "Type: TCHAR The character to be tested.",
 "IsCharUpper": "Type: TCHAR The character to be tested.",
 "LoadString": "Type: HINSTANCE A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.",
 "lstrcat": "Type: LPTSTR The first null-terminated string. This buffer must be large enough \t\t\t\tto contain both strings.",
 "lstrcmp": "Type: LPCTSTR The first null-terminated string to be compared.",
 "lstrcmpi": "Type: LPCTSTR The first null-terminated string to be compared.",
 "lstrcpy": "Type: LPTSTR A buffer to receive the contents of the string pointed to by the \t\t\t\t\tlpString2 parameter. \t\t\t\t\tThe buffer must be large enough to contain the string, including the \t\t\t\t\tterminating null character.",
 "lstrcpyn": "Type: LPTSTR The destination buffer, which receives the copied characters. The buffer \t\t\t\tmust be large enough to contain the number of TCHAR values \t\t\t\tspecified by iMaxLength, including room \t\t\t\tfor a terminating null character.",
 "lstrlen": "Type: LPCTSTR The null-terminated string to be checked.",
 "OemToChar": "Type: LPCSTR A null-terminated string of characters from the OEM-defined character set.",
 "OemToCharBuff": "Type: LPCSTR One or more characters from the OEM-defined character set.",
 "wsprintf": "Type: LPTSTR The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.",
 "wvsprintf": "Type: LPTSTR The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.",
 "DnsAcquireContextHandle": "A flag that indicates the character encoding. Set to TRUE for Unicode, FALSE for ANSI.",
 "DnsCancelQuery": "A pointer to a DNS_QUERY_CANCEL structure used to cancel an asynchronous DNS query. The structure must have been returned in the pCancelHandle parameter of a previous call to DnsQueryEx.",
 "DnsExtractRecordsFromMessage": "A pointer to a DNS_MESSAGE_BUFFER structure that contains the DNS response message.",
 "DnsFree": "A pointer to the DNS data to be freed.",
 "DnsFreeProxyName": "A pointer to the proxyName string to be freed.",
 "DnsGetProxyInformation": "A pointer to a string that represents the name of the DNS server whose proxy information is returned.",
 "DnsModifyRecordsInSet": "A pointer to the DNS_RECORD structure that contains the RRs to be added to the RR set.",
 "DnsNameCompare": "A pointer to a string that represents the first DNS name of the comparison pair.",
 "DnsQuery": "A pointer to a string that represents the DNS name to query.",
 "DnsQueryConfig": "A DNS_CONFIG_TYPE value that specifies the configuration type of the information to be queried.",
 "DnsQueryEx": "A pointer to a DNS_QUERY_REQUEST structure that contains the query request information. Note By omitting the DNS_QUERY_COMPLETION_ROUTINE callback from the pQueryCompleteCallback member of this structure, DnsQueryEx is called synchronously.",
 "DnsRecordCompare": "A pointer to a DNS_RECORD structure that contains the first DNS RR of the comparison pair.",
 "DnsRecordCopyEx": "A pointer to a DNS_RECORD structure that contains the RR to be copied.",
 "DnsRecordListFree": "A pointer to a DNS_RECORD structure that contains the list of DNS records to be freed.",
 "DnsRecordSetCompare": "A pointer to a DNS_RECORD structure that contains the first DNS RR set of the comparison pair.",
 "DnsRecordSetCopyEx": "A pointer to a DNS_RECORD structure that contains the resource record set to be copied.",
 "DnsRecordSetDetach": "A pointer, on input, to a DNS_RECORD structure that contains the list prior to the detachment of the first DNS record in the list of DNS records. A pointer, on output to a DNS_RECORD structure that contains the list subsequent to the detachment of the DNS record.",
 "DnsReleaseContextHandle": "The credentials handle of a specific account.",
 "DnsReplaceRecordSet": "A pointer to a DNS_RECORD structure that contains the RR set that replaces the existing set. The specified RR set is replaced with the contents of pNewSet. To delete a RR set, specify the set in pNewSet, but set RDATA to NULL.",
 "DnsValidateName": "A pointer to a string that represents the DNS name to be examined.",
 "DnsValidateServerStatus": "A pointer to a SOCKADDR that contains the DNS server IPv4 or IPv6 address to be examined.",
 "DnsWriteQuestionToBuffer": "A pointer to a DNS_MESSAGE_BUFFER structure that contains a DNS query message stored in a buffer.",
 "ControlTrace": "Handle to an event tracing session, or NULL. You must specify SessionHandle if SessionName is NULL. However, ETW ignores the handle if SessionName is not NULL. The handle is returned by the StartTrace function.",
 "EnableTrace": "If TRUE, the provider is enabled; otherwise, the provider is disabled.",
 "EnableTraceEx": "GUID of the event trace provider that you want to enable or disable.",
 "EnableTraceEx2": "A handle of the event tracing session to which you want to enable or disable the provider. The StartTrace function returns this handle.",
 "EnumerateTraceGuids": "An array of pointers to TRACE_GUID_PROPERTIES structures.",
 "EnumerateTraceGuidsEx": "Determines the type of information to include with the list of registered providers. For possible values, see the TRACE_QUERY_INFO_CLASS enumeration.",
 "FlushTrace": "Handle to the event tracing session for whose buffers you want to flush, or NULL. You must specify SessionHandle if SessionName is NULL. However, ETW ignores the handle if SessionName is not NULL. The handle is returned by the StartTrace function.",
 "QueryAllTraces": "An array of pointers to EVENT_TRACE_PROPERTIES structures that receive session properties and statistics for the event tracing sessions. You only need to set the Wnode.BufferSize, LoggerNameOffset , and LogFileNameOffset members of the EVENT_TRACE_PROPERTIES structure. The other members should all be set to zero.",
 "QueryTrace": "Handle to the event tracing session for whose properties and statistics you want to query, or NULL. You must specify SessionHandle if SessionName is NULL. However, ETW ignores the handle if SessionName is not NULL. The handle is returned by the StartTrace function.",
 "StartTrace": "Handle to the event tracing session. Do not use this handle if the function fails. Do not compare the session handle to INVALID_HANDLE_VALUE; the session handle is 0 if the handle is not valid.",
 "StopTrace": "Handle to the event tracing session that you want to stop, or NULL. You must specify SessionHandle if SessionName is NULL. However, ETW ignores the handle if SessionName is not NULL. The handle is returned by the StartTrace function.",
 "TraceQueryInformation": "A handle of the event tracing session that wants to capture the specified information. The StartTrace function returns this handle.",
 "TraceSetInformation": "A handle of the event tracing session that wants to capture the specified information. The StartTrace function returns this handle.",
 "UpdateTrace": "Handle to the event tracing session to update, or NULL. You must specify SessionHandle if SessionName is NULL. However, ETW ignores the handle if SessionName is not NULL. The handle is returned by the StartTrace function.",
 "ControlCallback": "Request code. Specify one of the following values. ValueMeaning WMI_ENABLE_EVENTS Enables the provider. WMI_DISABLE_EVENTS Disables the provider.",
 "CreateTraceInstanceId": "Handle to a registered event trace class. The RegisterTraceGuids function returns this handle in the RegHandle member of the TRACE_GUID_REGISTRATION structure.",
 "GetTraceEnableFlags": "Handle to an event tracing session, obtained by calling the GetTraceLoggerHandle function.",
 "GetTraceEnableLevel": "Handle to an event tracing session, obtained by calling the GetTraceLoggerHandle function.",
 "GetTraceLoggerHandle": "Pointer to a WNODE_HEADER structure. ETW passes this structure to the provider's ControlCallback function in the Buffer parameter. The HistoricalContext member of WNODE_HEADER contains the session's handle.",
 "RegisterTraceGuids": "Pointer to a ControlCallback function that receives notification when the provider is enabled or disabled by an event tracing session. The EnableTrace function calls the callback.",
 "TraceEvent": "Handle to the event tracing session that records the event. The provider obtains the handle when it calls the GetTraceLoggerHandle function in its ControlCallback implementation.",
 "TraceEventInstance": "Handle to the event tracing session that records the event instance. The provider obtains the handle when it calls the GetTraceLoggerHandle function in its ControlCallback implementation.",
 "TraceMessage": "Handle to the event tracing session that records the event. The provider obtains the handle when it calls the GetTraceLoggerHandle function in its ControlCallback implementation.",
 "TraceMessageVa": "Handle to the event tracing session that records the event. The provider obtains the handle when it calls the GetTraceLoggerHandle function in its ControlCallback implementation.",
 "UnregisterTraceGuids": "Handle to the event trace provider, obtained from an earlier call to the RegisterTraceGuids function.",
 "CveEventWrite": "A pointer to the CVE ID associated with the vulnerability for which this event is being raised.",
 "EnableCallback": "GUID that identifies the session that enabled the provider. The value is GUID_NULL if EnableTraceEx did not specify a source identifier.",
 "EventActivityIdControl": "A control code that specifies if you want to create, query or set the current activity identifier. You can specify one of the following codes. ValueMeaning EVENT_ACTIVITY_CTRL_GET_ID Sets the ActivityId parameter to the current identifier value from thread local storage. EVENT_ACTIVITY_CTRL_SET_ID Uses the identifier in the ActivityId parameter to set the value of the current identifier in the thread local storage. EVENT_ACTIVITY_CTRL_CREATE_ID Creates a new identifier and sets the ActivityId parameter to the value of the new identifier. EVENT_ACTIVITY_CTRL_GET_SET_ID Performs the following: Copies the current identifier from thread local storage. Sets the current identifier in thread local storage to the new identifier specified in the ActivityId parameter. Sets the ActivityId parameter to the copy of the previous current identifier. EVENT_ACTIVITY_CTRL_CREATE_SET_ID Performs the following: Copies the current identifier from thread local storage. Creates a new identifier and sets the current identifier in thread local storage to the new identifier. Sets the ActivityId parameter to the copy of the previous current identifier.",
 "EventWriteTransfer": "Registration handle of the provider. The handle comes from EventRegister.",
 "EventEnabled": "Registration handle of the provider. The handle comes from EventRegister. Note A valid registration handle must be used.",
 "EventProviderEnabled": "Registration handle of the provider. The handle comes from EventRegister.",
 "EventRegister": "GUID that uniquely identifies the provider.",
 "EventSetInformation": "Type: REGHANDLE Registration handle returned by EventRegister.",
 "EventUnregister": "Registration handle returned by EventRegister.",
 "EventWrite": "Registration handle of the provider. The handle comes from EventRegister.",
 "EventWriteEx": "Registration handle of the provider. The handle comes from EventRegister.",
 "EventWriteString": "Registration handle of the provider. The handle comes from EventRegister.",
 "BufferCallback": "Pointer to an EVENT_TRACE_LOGFILE structure that contains information about the buffer.",
 "CloseTrace": "Handle to the trace to close. The OpenTrace function returns this handle.",
 "EventCallback": "Pointer to an EVENT_TRACE structure that contains the event information.",
 "EventRecordCallback": "Pointer to an EVENT_RECORD structure that contains the event information.",
 "OpenTrace": "Pointer to an EVENT_TRACE_LOGFILE structure. The structure specifies the source from which to consume events (from a log file or the session in real time) and specifies the callbacks the consumer wants to use to receive the events.",
 "ProcessTrace": "Pointer to an array of trace handles obtained from earlier calls to the OpenTrace function. The number of handles that you can specify is limited to 64. The array can contain the handles to multiple log files, but only one real-time trace session.",
 "TdhAggregatePayloadFilters": "The count of payload filters.",
 "TdhCleanupPayloadEventFilterDescriptor": "A pointer to an EVENT_FILTER_DESCRIPTOR structure that contains aggregated filters where the allocated memory is to be freed. The EVENT_FILTER_DESCRIPTOR structure passed was created by calling the TdhAggregatePayloadFilters function. If the call is successful, allocated memory is released for the aggregated filters and the fields in the returned EVENT_FILTER_DESCRIPTOR structure are re-initialized",
 "TdhCloseDecodingHandle": "Type: TDH_HANDLE The decoding handle to be closed.",
 "TdhCreatePayloadFilter": "A GUID that identifies the manifest provider of the EventDescriptor parameter.",
 "TdhDeletePayloadFilter": "A pointer to a single payload filter allocated by the TdhCreatePayloadFilter function.",
 "TdhEnumerateManifestProviderEvents": "A GUID that identifies the manifest provider whose list of events you want to retrieve.",
 "TdhEnumerateProviderFieldInformation": "GUID that identifies the provider whose information you want to retrieve.",
 "TdhEnumerateProviderFilters": "GUID that identifies the provider whose filters you want to retrieve.",
 "TdhEnumerateProviders": "Array of providers that publicly define their events on the computer. For details, see the PROVIDER_ENUMERATION_INFO structure.",
 "TdhFormatProperty": "A TRACE_EVENT_INFO structure that contains the event information. To get this structure, call the TdhGetEventInformation function.",
 "TdhGetDecodingParameter": "Type: TDH_HANDLE A valid decoding handle.",
 "TdhGetEventInformation": "The event record passed to your EventRecordCallback callback. For details, see the EVENT_RECORD structure.",
 "TdhGetEventMapInformation": "The event record passed to your EventRecordCallback callback. For details, see the EVENT_RECORD structure.",
 "TdhGetManifestEventInformation": "A GUID that identifies the manifest provider whose event metadata you want to retrieve.",
 "TdhGetProperty": "The event record passed to your EventRecordCallback callback. For details, see the EVENT_RECORD structure.",
 "TdhGetPropertySize": "The event record passed to your EventRecordCallback callback. For details, see the EVENT_RECORD structure.",
 "TdhGetWppMessage": "Type: TDH_HANDLE A valid decoding handle.",
 "TdhGetWppProperty": "Type: TDH_HANDLE A valid decoding handle.",
 "TdhLoadManifest": "The full path to the manifest.",
 "TdhLoadManifestFromBinary": "Type: PWSTR Path to the ETW provider binary that contains the metadata resources.",
 "TdhOpenDecodingHandle": "Type: PTDH_HANDLE A valid decoding handle.",
 "TdhQueryProviderFieldInformation": "GUID that identifies the provider whose information you want to retrieve.",
 "TdhSetDecodingParameter": "Type: TDH_HANDLE A valid decoding handle.",
 "TdhUnloadManifest": "The full path to the loaded manifest.",
 "EventAccessControl": "GUID that uniquely identifies the provider or session whose permissions you want to add or modify.",
 "EventAccessQuery": "GUID that uniquely identifies the provider or session.",
 "EventAccessRemove": "GUID that uniquely identifies the provider or session whose permissions you want to remove from the registry.",
 "EventClassCallback": "Pointer to an EVENT_TRACE structure that contains the event information.",
 "RemoveTraceCallback": "Pointer to the class GUID of the event trace class for which the callback receives events. Use the same class GUID that you passed to the SetTraceCallback to begin receiving the events.",
 "SetTraceCallback": "Pointer to the class GUID of an event trace class for which you want to receive events. For a list of kernel provider class GUIDs, see NT Kernel Logger Constants.",
 "BluetoothAuthenticateDevice": "A window to be the parent of the Authentication wizard. If set to NULL, the wizard is removed from the desktop.",
 "BluetoothAuthenticateDeviceEx": "The window to parent the authentication wizard. If NULL, the wizard will be parented off the desktop.",
 "BluetoothAuthenticateMultipleDevices": "A window to be the parent of the Authentication wizard. If set to NULL, the wizard is parented off the desktop.",
 "BluetoothDisplayDeviceProperties": "A handle to the parent window of the property sheet.",
 "BluetoothEnableDiscovery": "Valid local radio handle, or NULL. If NULL, discovery is modified on all local radios; if any radio is modified by the call, the function call succeeds.",
 "BluetoothEnableIncomingConnections": "Valid local radio handle for which to change whether incoming connections are enabled, or NULL. If NULL, the attempt to modify incoming connection acceptance iterates through all local radios; if any radio is modified by the call, the function call succeeds.",
 "BluetoothEnumerateInstalledServices": "Handle of the local Bluetooth radio device. If NULL, all local radios are searched for enabled services that match the radio address in pbtdi.",
 "BluetoothFindDeviceClose": "Handle for the query to be closed. Obtained in a previous call to the BluetoothFindFirstDevice function.",
 "BluetoothFindFirstDevice": "Pointer to a BLUETOOTH_DEVICE_SEARCH_PARAMS structure. The dwSize member of the BLUETOOTH_DEVICE_SEARCH_PARAMS structure pointed to by pbtsp must match the size of the structure.",
 "BluetoothFindFirstRadio": "Pointer to a BLUETOOTH_FIND_RADIO_PARAMS structure. The dwSize member of the BLUETOOTH_FIND_RADIO_PARAMS structure pointed to by pbtfrp must match the size of the structure.",
 "BluetoothFindNextDevice": "Handle for the query obtained in a previous call to the BluetoothFindFirstDevice function.",
 "BluetoothFindNextRadio": "Handle returned by a previous call to the BluetoothFindFirstRadio function. Use BluetoothFindRadioClose to close this handle when it is no longer needed.",
 "BluetoothFindRadioClose": "Enumeration handle to close, obtained with a previous call to the BluetoothFindFirstRadio function.",
 "BluetoothGetDeviceInfo": "A handle to a local radio, obtained from a call to the BluetoothFindFirstRadio or similar functions, or from a call to the SetupDiEnumerateDeviceInterfaces function.",
 "BluetoothGetRadioInfo": "A handle to a local Bluetooth radio, obtained by calling the BluetoothFindFirstRadio or similar functions, or the SetupDiEnumerateDeviceInterfances function.",
 "BluetoothIsConnectable": "Valid local radio handle, or NULL. If NULL, all local radios are checked for connectability; if any radio is connectable, the function call succeeds.",
 "BluetoothIsDiscoverable": "Valid local radio handle, or NULL. If NULL, discovery is determined for all local radios; if any radio is discoverable, the function call succeeds.",
 "BluetoothRegisterForAuthentication": "Pointer to a BLUETOOTH_DEVICE_INFO structure. The Address member is used for comparison.",
 "BluetoothRegisterForAuthenticationEx": "A pointer to a BLUETOOTH_DEVICE_INFO structure that specifies the bluetooth address to be utilized for comparison.",
 "BluetoothRemoveDevice": "A pointer to the address of the Bluetooth device to be removed.",
 "BluetoothSdpEnumAttributes": "Pointer to a valid record stream that is formatted as a single SDP record.",
 "BluetoothSdpGetAttributeValue": "Pointer to a valid record stream that is formatted as a single SDP record.",
 "BluetoothSdpGetContainerElementData": "A pointer to valid SDP stream. The first element in the stream must be a sequence or an alternative.",
 "BluetoothSdpGetElementData": "A pointer to a valid SDP stream.",
 "BluetoothSdpGetString": "A pointer to a valid record stream formatted as a single SDP record.",
 "BluetoothSelectDevices": "A pointer to a BLUETOOTH_SELECT_DEVICE_PARAMS structure that identifies Bluetooth devices.",
 "BluetoothSelectDevicesFree": "A pointer to a BLUETOOTH_SELECT_DEVICE_PARAMS structure that identifies the Bluetooth device resources to free.",
 "BluetoothSendAuthenticationResponse": "Optional handle to the local radio handle, or NULL. If NULL, the function attempts to send an authentication response on all local radios.",
 "BluetoothSendAuthenticationResponseEx": "A handle of the Bluetooth radio device to specify local service information for.",
 "BluetoothSetLocalServiceInfo": "A handle of the Bluetooth radio device to which the local service information applies. If this parameter is NULL, BluetoothSetLocalServiceInfo searches for the first available local Bluetooth radio.",
 "BluetoothSetServiceState": "A handle of the local Bluetooth radio.",
 "BluetoothUnregisterAuthentication": "Handle returned by a previous call to the BluetoothRegisterForAuthentication function.",
 "BluetoothUpdateDeviceRecord": "A pointer to the BLUETOOTH_DEVICE_INFO structure to update. For more information, see the Remarks section.",
 "EmptyWorkingSet": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right and the PROCESS_SET_QUOTA access right. For more information, see Process Security and Access Rights.",
 "EnumDeviceDrivers": "An array that receives the list of load addresses for the device drivers.",
 "EnumPageFiles": "A pointer to the routine called for each pagefile. For more information, see EnumPageFilesProc.",
 "EnumProcesses": "A pointer to an array that receives the list of process identifiers.",
 "EnumProcessModules": "A handle to the process.",
 "EnumProcessModulesEx": "A handle to the process.",
 "GetDeviceDriverBaseName": "The load address of the device driver. This value can be retrieved using the EnumDeviceDrivers function.",
 "GetDeviceDriverFileName": "The load address of the device driver.",
 "GetMappedFileName": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights.",
 "GetModuleBaseName": "A handle to the process that contains the module. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights.",
 "GetModuleFileNameEx": "A handle to the process that contains the module. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights. The GetModuleFileNameEx function does not retrieve the path for modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx.",
 "GetModuleInformation": "A handle to the process that contains the module. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights.",
 "GetPerformanceInfo": "A pointer to a PERFORMANCE_INFORMATION structure that receives the performance information.",
 "GetProcessImageFileName": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
 "GetProcessMemoryInfo": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right and the PROCESS_VM_READ access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights.",
 "GetWsChanges": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "GetWsChangesEx": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "InitializeProcessForWsWatch": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights.",
 "QueryWorkingSet": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights.",
 "QueryWorkingSetEx": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights.",
 "AlertSamplesAvailFunc": null,
 "GetTimeSysInfoFunc": "Requested state information. This parameter can be one of the following values. ValueMeaning TSI_ClockPrecision The pvInfo parameter is a signed __int32 value that specifies the clock precision, in log2 seconds. TSI_ClockTickSize The pvInfo parameter is an unsigned __int64 value that specifies the clock tick size, in (10^-7) seconds. TSI_CurrentTime The pvInfo parameter is an unsigned __int64 value that specifies the current time, in (10^-7) second intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). TSI_LastSyncTime The pvInfo parameter is an unsigned __int64 value that specifies the last synch time, in (10^-7) second intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). TSI_LeapFlags The pvInfo parameter is a BYTE value that indicates an impending leap second or loss of synchronization. The following values are defined: 0 - No change 1 - Add leap second 2 - Subtract leap second 3 - Not synchronized TSI_PhaseOffset The pvInfo parameter is a signed __int64 value that specifies the phase offset used to adjust the clock, in seconds. TSI_PollInterval The pvInfo parameter is a signed __int32 value that specifies the poll interval, in log2 seconds. TSI_ReferenceIdentifier The pvInfo parameter is a DWORD value that specifies the reference identifier for the time source, in NTP format (either an IP address or a four character ASCII string that describes the hardware source, such as Global Positioning System (GPS) or WWVB). TSI_RootDelay The pvInfo parameter is a signed __int64 value that specifies the root delay, in (10^-7) seconds. TSI_RootDispersion The pvInfo parameter is an unsigned __int64 value that specifies, the root dispersion, in (10^-7) seconds. TSI_Stratum The pvInfo parameter is a BYTE value that specifies the number of network hops that separate this computer from the root source. Hardware providers should return zero. NTP providers should return the stratum of the peer that provided the sample. TSI_TickCount The pvInfo parameter is an unsigned __int64 value that specifies the tick count (number of milliseconds since the system was started). This value will eventually wrap, so it should be used only to compare short intervals. TSI_TSFlags The pvInfo parameter is a DWORD value that specifies one of the following time source flags: TSF_Authenticated TSF_Hardware TSF_IPv6",
 "LogTimeProvEventFunc": "The event type. This parameter can be one of the following values. ValueMeaning Error Indicates a significant problem. Information Provides information about a successful operation. Warning Indicates a problem that is not immediately significant, but may cause future problems.",
 "SetProviderStatusFunc": "A pointer to a SetProviderStatusInfo structure that provides the status information.",
 "SetProviderStatusInfoFreeFunc": "A pointer to the SetProviderStatusInfo structure to be freed.",
 "TimeProvClose": "A handle to the time provider. The TimeProvOpen function receives this handle.",
 "TimeProvCommand": "A handle to the time provider. The TimeProvOpen function receives this handle.",
 "TimeProvOpen": "The provider name.",
 "CopyRect": "Pointer to the RECT structure that receives the logical coordinates of the source rectangle.",
 "EqualRect": "Pointer to a RECT structure that contains the logical coordinates of the first rectangle.",
 "InflateRect": "A pointer to the RECT structure that increases or decreases in size.",
 "IntersectRect": "A pointer to the RECT structure that is to receive the intersection of the rectangles pointed to by the lprcSrc1 and lprcSrc2 parameters. This parameter cannot be NULL.",
 "IsRectEmpty": "Pointer to a RECT structure that contains the logical coordinates of the rectangle.",
 "OffsetRect": "Pointer to a RECT structure that contains the logical coordinates of the rectangle to be moved.",
 "PtInRect": "A pointer to a RECT structure that contains the specified rectangle.",
 "SetRect": "Pointer to the RECT structure that contains the rectangle to be set.",
 "SetRectEmpty": "Pointer to the RECT structure that contains the coordinates of the rectangle.",
 "SubtractRect": "A pointer to a RECT structure that receives the coordinates of the rectangle determined by subtracting the rectangle pointed to by lprcSrc2 from the rectangle pointed to by lprcSrc1.",
 "UnionRect": "A pointer to the RECT structure that will receive a rectangle containing the rectangles pointed to by the lprcSrc1 and lprcSrc2 parameters.",
 "CombineRgn": "A handle to a new region with dimensions defined by combining two other regions. (This region must exist before CombineRgn is called.)",
 "CreateEllipticRgn": "Specifies the x-coordinate in logical units, of the upper-left corner of the bounding rectangle of the ellipse.",
 "CreateEllipticRgnIndirect": "Pointer to a RECT structure that contains the coordinates of the upper-left and lower-right corners of the bounding rectangle of the ellipse in logical units.",
 "CreatePolygonRgn": "A pointer to an array of POINT structures that define the vertices of the polygon in logical units. The polygon is presumed closed. Each vertex can be specified only once.",
 "CreatePolyPolygonRgn": "A pointer to an array of POINT structures that define the vertices of the polygons in logical units. The polygons are specified consecutively. Each polygon is presumed closed and each vertex is specified only once.",
 "CreateRectRgn": "Specifies the x-coordinate of the upper-left corner of the region in logical units.",
 "CreateRectRgnIndirect": "Pointer to a RECT structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines the region in logical units.",
 "CreateRoundRectRgn": "Specifies the x-coordinate of the upper-left corner of the region in device units.",
 "EqualRgn": "Handle to a region.",
 "ExtCreateRegion": "A pointer to an XFORM structure that defines the transformation to be performed on the region. If this pointer is NULL, the identity transformation is used.",
 "FillRgn": "Handle to the device context.",
 "FrameRgn": "Handle to the device context.",
 "GetPolyFillMode": "Handle to the device context.",
 "GetRegionData": "A handle to the region.",
 "GetRgnBox": "A handle to the region.",
 "InvertRgn": "Handle to the device context.",
 "OffsetRgn": "Handle to the region to be moved.",
 "PaintRgn": "Handle to the device context.",
 "PtInRegion": "Handle to the region to be examined.",
 "RectInRegion": "Handle to the region.",
 "SetPolyFillMode": "A handle to the device context.",
 "SetRectRgn": "Handle to the region.",
 "CreatePen": "The pen style. It can be any one of the following values. ValueMeaning PS_SOLID The pen is solid. PS_DASH The pen is dashed. This style is valid only when the pen width is one or less in device units. PS_DOT The pen is dotted. This style is valid only when the pen width is one or less in device units. PS_DASHDOT The pen has alternating dashes and dots. This style is valid only when the pen width is one or less in device units. PS_DASHDOTDOT The pen has alternating dashes and double dots. This style is valid only when the pen width is one or less in device units. PS_NULL The pen is invisible. PS_INSIDEFRAME The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to geometric pens.",
 "CreatePenIndirect": "Pointer to a LOGPEN structure that specifies the pen's style, width, and color.",
 "ExtCreatePen": "A combination of type, style, end cap, and join attributes. The values from each category are combined by using the bitwise OR operator ( | ). The pen type can be one of the following values. ValueMeaning PS_GEOMETRIC The pen is geometric. PS_COSMETIC The pen is cosmetic. The pen style can be one of the following values. ValueMeaning PS_ALTERNATE The pen sets every other pixel. (This style is applicable only for cosmetic pens.) PS_SOLID The pen is solid. PS_DASH The pen is dashed. PS_DOT The pen is dotted. PS_DASHDOT The pen has alternating dashes and dots. PS_DASHDOTDOT The pen has alternating dashes and double dots. PS_NULL The pen is invisible. PS_USERSTYLE The pen uses a styling array supplied by the user. PS_INSIDEFRAME The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to geometric pens. The end cap is only specified for geometric pens. The end cap can be one of the following values. ValueMeaning PS_ENDCAP_ROUND End caps are round. PS_ENDCAP_SQUARE End caps are square. PS_ENDCAP_FLAT End caps are flat. The join is only specified for geometric pens. The join can be one of the following values. ValueMeaning PS_JOIN_BEVEL Joins are beveled. PS_JOIN_MITER Joins are mitered when they are within the current limit set by the SetMiterLimit function. If it exceeds this limit, the join is beveled. PS_JOIN_ROUND Joins are round.",
 "AbortPath": "Handle to the device context from which a path will be discarded.",
 "BeginPath": "A handle to the device context.",
 "CloseFigure": "Handle to the device context in which the figure will be closed.",
 "EndPath": "A handle to the device context into which the new path is selected.",
 "FillPath": "A handle to a device context that contains a valid path.",
 "FlattenPath": "A handle to a DC that contains a valid path.",
 "GetMiterLimit": "Handle to the device context.",
 "GetPath": "A handle to a device context that contains a closed path.",
 "PathToRegion": "Handle to a device context that contains a closed path.",
 "SetMiterLimit": "Handle to the device context.",
 "StrokeAndFillPath": "A handle to the device context.",
 "StrokePath": "Handle to a device context that contains the completed path.",
 "WidenPath": "A handle to a device context that contains a closed path.",
 "CloseEnhMetaFile": "Handle to an enhanced-metafile device context.",
 "CopyEnhMetaFile": "A handle to the enhanced metafile to be copied.",
 "CreateEnhMetaFile": "A handle to a reference device for the enhanced metafile. This parameter can be NULL; for more information, see Remarks.",
 "DeleteEnhMetaFile": "A handle to an enhanced metafile.",
 "EnhMetaFileProc": "Handle to the device context passed to EnumEnhMetaFile.",
 "EnumEnhMetaFile": "A handle to a device context. This handle is passed to the callback function.",
 "GdiComment": "A handle to an enhanced-metafile device context.",
 "GetEnhMetaFile": "A pointer to a null-terminated string that specifies the name of an enhanced metafile.",
 "GetEnhMetaFileBits": "A handle to the enhanced metafile.",
 "GetEnhMetaFileDescription": "A handle to the enhanced metafile.",
 "GetEnhMetaFileHeader": "A handle to the enhanced metafile for which the header is to be retrieved.",
 "GetEnhMetaFilePaletteEntries": "A handle to the enhanced metafile.",
 "GetMetaFile": "A pointer to a null-terminated string that specifies the name of a metafile.",
 "GetWinMetaFileBits": "A handle to the enhanced metafile.",
 "PlayEnhMetaFile": "A handle to the device context for the output device on which the picture will appear.",
 "PlayEnhMetaFileRecord": "A handle to the device context passed to the EnumEnhMetaFile function.",
 "SetEnhMetaFileBits": "Specifies the size, in bytes, of the data provided.",
 "SetWinMetaFileBits": "The size, in bytes, of the buffer that contains the Windows-format metafile.",
 "CloseMetaFile": "Handle to a metafile device context used to create a Windows-format metafile.",
 "CopyMetaFile": "A handle to the source Windows-format metafile.",
 "CreateMetaFile": "A pointer to the file name for the Windows-format metafile to be created. If this parameter is NULL, the Windows-format metafile is memory based and its contents are lost when it is deleted by using the DeleteMetaFile function.",
 "DeleteMetaFile": "A handle to a Windows-format metafile.",
 "EnumMetaFile": "Handle to a device context. This handle is passed to the callback function.",
 "EnumMetaFileProc": "Handle to the device context passed to EnumMetaFile.",
 "GetMetaFileBitsEx": "A handle to a Windows-format metafile.",
 "PlayMetaFile": "Handle to a device context.",
 "PlayMetaFileRecord": "A handle to a device context.",
 "SetMetaFileBitsEx": "Specifies the size, in bytes, of the Windows-format metafile.",
 "AngleArc": "Handle to a device context.",
 "Arc": "A handle to the device context where drawing takes place.",
 "ArcTo": "A handle to the device context where drawing takes place.",
 "GetArcDirection": "Handle to the device context.",
 "LineDDA": "Specifies the x-coordinate, in logical units, of the line's starting point.",
 "LineDDAProc": "Specifies the x-coordinate, in logical units, of the current point.",
 "LineTo": "Handle to a device context.",
 "MoveToEx": "Handle to a device context.",
 "PolyBezier": "A handle to a device context.",
 "PolyBezierTo": "A handle to a device context.",
 "PolyDraw": "A handle to a device context.",
 "Polyline": "A handle to a device context.",
 "PolylineTo": "A handle to the device context.",
 "PolyPolyline": "A handle to the device context.",
 "SetArcDirection": "A handle to the device context.",
 "CFP_ALLOCPROC pointer": "Number of bytes to allocate.",
 "CFP_FREEPROC pointer": "Previously allocated memory block to be freed.",
 "CFP_REALLOCPROC pointer": "Pointer to previously allocated memory block.",
 "CreateFontPackage": "Points to a buffer containing source TTF or TTC data, describing the font that is to be subsetted.",
 "MergeFontPackage": "A pointer to a buffer containing a font to merge with. This is used only when usMode is TTFMFP_DELTA.",
 "READEMBEDPROC pointer": "Stream identifier (file handle or other) of the input stream (font structure).",
 "TTCharToUnicode": "A device context handle.",
 "TTDeleteEmbeddedFont": "Handle identifying font, as provided in the TTLoadEmbeddedFont function.",
 "TTEmbedFont": "Device context handle.",
 "TTEmbedFontEx": "Device context handle.",
 "TTEmbedFontFromFileA": "Device context handle.",
 "TTEnableEmbeddingForFacename": "Pointer to the facename of the font to be added or removed from the typeface exclusion list.",
 "TTGetEmbeddedFontInfo": "Flags specifying the request. This flag can have zero or more of the following values. ValueMeaning TTEMBED_EMBEDEUDC Include the associated EUDC font file data with the font structure. TTEMBED_RAW Return a font structure containing the full character set, non-compressed. This is the default behavior of the function. TTEMBED_SUBSET Return a subsetted font containing only the glyphs indicated by the pusCharCodeSet or pulCharCodeSet parameter. These character codes must be denoted as 16-bit or UCS-4 characters, as appropriate for the parameter. TTEMBED_TTCOMPRESSED Return a compressed font structure.",
 "TTGetEmbeddingType": "Device context handle.",
 "TTGetNewFontName": "Handle that identifies the embedded font that has been installed. The handle references an internal structure, not an Hfont.",
 "TTIsEmbeddingEnabled": "Device context handle.",
 "TTIsEmbeddingEnabledForFacename": "Pointer to the facename of the font, such as Arial Bold.",
 "TTLoadEmbeddedFont": "A pointer to a handle that identifies the installed embedded font. This handle references an internal structure, not an Hfont.",
 "TTRunValidationTests": "Device context handle.",
 "TTRunValidationTestsEx": "Device context handle.",
 "WRITEEMBEDPROC pointer": "Stream identifier (file handle or other) of the output stream (font structure).",
 "Chord": "A handle to the device context in which the chord appears.",
 "Ellipse": "A handle to the device context.",
 "FillRect": "A handle to the device context.",
 "FrameRect": "A handle to the device context in which the border is drawn.",
 "InvertRect": "A handle to the device context.",
 "Pie": "A handle to the device context.",
 "Polygon": "A handle to the device context.",
 "PolyPolygon": "A handle to the device context.",
 "Rectangle": "A handle to the device context.",
 "RoundRect": "A handle to the device context.",
 "AnimatePalette": "A handle to the logical palette.",
 "CreateHalftonePalette": "A handle to the device context.",
 "CreatePalette": "A pointer to a LOGPALETTE structure that contains information about the colors in the logical palette.",
 "GetColorAdjustment": "A handle to the device context.",
 "GetNearestColor": "A handle to the device context.",
 "GetNearestPaletteIndex": "A handle to a logical palette.",
 "GetPaletteEntries": "A handle to the logical palette.",
 "GetSystemPaletteEntries": "A handle to the device context.",
 "GetSystemPaletteUse": "A handle to the device context.",
 "RealizePalette": "A handle to the device context into which a logical palette has been selected.",
 "ResizePalette": "A handle to the palette to be changed.",
 "SelectPalette": "A handle to the device context.",
 "SetColorAdjustment": "A handle to the device context.",
 "SetPaletteEntries": "A handle to the logical palette.",
 "SetSystemPaletteUse": "A handle to the device context. This device context must refer to a device that supports color palettes.",
 "UnrealizeObject": "A handle to the logical palette to be reset.",
 "UpdateColors": "A handle to the device context.",
 "ExcludeClipRect": "A handle to the device context.",
 "ExtSelectClipRgn": "A handle to the device context.",
 "GetClipBox": "A handle to the device context.",
 "GetClipRgn": "A handle to the device context.",
 "GetMetaRgn": "A handle to the device context.",
 "GetRandomRgn": "A handle to the device context.",
 "IntersectClipRect": "A handle to the device context.",
 "OffsetClipRgn": "A handle to the device context.",
 "PtVisible": "A handle to the device context.",
 "RectVisible": "A handle to the device context.",
 "SelectClipPath": "A handle to the device context of the path.",
 "SelectClipRgn": "A handle to the device context.",
 "SetMetaRgn": "A handle to the device context.",
 "CreateBrushIndirect": "A pointer to a LOGBRUSH structure that contains information about the brush.",
 "CreateDIBPatternBrushPt": "A pointer to a packed DIB consisting of a BITMAPINFO structure immediately followed by an array of bytes defining the pixels of the bitmap.",
 "CreateHatchBrush": "The hatch style of the brush. This parameter can be one of the following values. ValueMeaning HS_BDIAGONAL 45-degree upward left-to-right hatch HS_CROSS Horizontal and vertical crosshatch HS_DIAGCROSS 45-degree crosshatch HS_FDIAGONAL 45-degree downward left-to-right hatch HS_HORIZONTAL Horizontal hatch HS_VERTICAL Vertical hatch",
 "CreatePatternBrush": "A handle to the bitmap to be used to create the logical brush.",
 "CreateSolidBrush": "The color of the brush. To create a COLORREF color value, use the RGB macro.",
 "GetBrushOrgEx": "A handle to the device context.",
 "GetSysColorBrush": "A color index. This value corresponds to the color used to paint one of the window elements. See GetSysColor for system color index values.",
 "PatBlt": "A handle to the device context.",
 "SetBrushOrgEx": "A handle to the device context.",
 "CreateDIBPatternBrush": "A handle to a global memory object containing a packed DIB, which consists of a BITMAPINFO structure immediately followed by an array of bytes defining the pixels of the bitmap.",
 "AlphaBlend": "A handle to the destination device context.",
 "BitBlt": "A handle to the destination device context.",
 "CreateBitmap": "The bitmap width, in pixels.",
 "CreateBitmapIndirect": "A pointer to a BITMAP structure that contains information about the bitmap. If an application sets the bmWidth or bmHeight members to zero, CreateBitmapIndirect returns the handle to a 1-by-1 pixel, monochrome bitmap.",
 "CreateCompatibleBitmap": "A handle to a device context.",
 "CreateDIBitmap": "A handle to a device context.",
 "CreateDIBSection": "A handle to a device context. If the value of iUsage is DIB_PAL_COLORS, the function uses this device context's logical palette to initialize the DIB colors.",
 "ExtFloodFill": "A handle to a device context.",
 "GetBitmapDimensionEx": "A handle to a compatible bitmap (DDB).",
 "GetDIBColorTable": "A handle to a device context. A DIB section bitmap must be selected into this device context.",
 "GetDIBits": "A handle to the device context.",
 "GetPixel": "A handle to the device context.",
 "GetStretchBltMode": "A handle to the device context.",
 "GradientFill": "A handle to the destination device context.",
 "LoadBitmap": "A handle to the instance of the module whose executable file contains the bitmap to be loaded.",
 "MaskBlt": "A handle to the destination device context.",
 "PlgBlt": "A handle to the destination device context.",
 "SetBitmapDimensionEx": "A handle to the bitmap. The bitmap cannot be a DIB-section bitmap.",
 "SetDIBColorTable": "A device context. A DIB must be selected into this device context.",
 "SetDIBits": "A handle to a device context.",
 "SetDIBitsToDevice": "A handle to the device context.",
 "SetPixel": "A handle to the device context.",
 "SetPixelV": "A handle to the device context.",
 "SetStretchBltMode": "A handle to the device context.",
 "StretchBlt": "A handle to the destination device context.",
 "StretchDIBits": "A handle to the destination device context.",
 "TransparentBlt": "A handle to the destination device context.",
 "CreateDiscardableBitmap": "A handle to a device context.",
 "FloodFill": "A handle to a device context.",
 "GetBitmapBits": "A handle to the device-dependent bitmap.",
 "SetBitmapBits": "A handle to the bitmap to be set. This must be a compatible bitmap (DDB).",
 "AddPropSheetPageProc": "Type: HPROPSHEETPAGE Handle to a property sheet page.",
 "CreatePropertySheetPage": "Type: LPCPROPSHEETPAGE Pointer to a PROPSHEETPAGE structure that defines a page to be included in a property sheet.",
 "DestroyPropertySheetPage": "Type: HPROPSHEETPAGE Handle to the property sheet page to delete.",
 "PropertySheet": "Type: LPCPROPSHEETHEADER Pointer to a PROPSHEETHEADER structure that defines the frame and pages of a property sheet.",
 "PropSheetPageProc": "Type: HWND Reserved; must be NULL.",
 "PropSheetProc": "Type: HWND Handle to the property sheet dialog box.",
 "lineAccept": "Handle to the call to be accepted. The application must be an owner of the call. Call state of hCall must be offering.",
 "lineAddProvider": "Pointer to a null-terminated string containing the path of the service provider to be added.",
 "lineAddToConference": "Handle to the conference call. The application must be an owner of this call. Any monitoring (media, tones, digits) on a conference call applies only to the hConfCall, not to the individual participating calls. Call state of hConfCall must be onHoldPendingConference or onHold.",
 "lineAnswer": "Handle to the call to be answered. The application must be an owner of this call. The call state of hCall must be offering or accepted.",
 "lineBlindTransfer": "Handle to the call to be transferred. The application must be an owner of this call. The call state of hCall must be connected.",
 "lineCallbackFunc": "Handle to either a line device or a call associated with the callback. The nature of this handle (line handle or call handle) can be determined by the context provided by dwMsg. Applications must use the DWORD type for this parameter because using the HANDLE type may generate an error.",
 "lineClose": "Handle to the open line device to be closed. After the line has been successfully closed, this handle is no longer valid.",
 "lineCompleteCall": "Handle to the call whose completion is requested. The application must be an owner of the call. The call state of hCall must be busy or ringback.",
 "lineCompleteTransfer": "Handle to the call to be transferred. The application must be an owner of this call. The call state of hCall must be onHold or onHoldPendingTransfer.",
 "lineConfigDialog": "Identifier of the line device to be configured.",
 "lineConfigDialogEdit": "Identifier of the line device to be configured.",
 "lineConfigProvider": "Handle to a window to which the configuration dialog box (displayed by TSPI_providerConfig) is attached. Can be NULL to indicate that any window created during the function should have no owner window.",
 "lineDeallocateCall": "The call handle to be deallocated. An application with monitoring privileges for a call can always deallocate its handle for that call. An application with owner privilege for a call can deallocate its handle unless it is the sole owner of the call and the call is not in the idle state. The call handle is no longer valid after it has been deallocated.",
 "lineDevSpecific": "Handle to a line device. This parameter is required.",
 "lineDevSpecificFeature": "Handle to the line device.",
 "lineDial": "Handle to the call on which a number is to be dialed. The application must be an owner of the call. The call state of hCall can be any state except idle and disconnected.",
 "lineDrop": "Handle to the call to be dropped. The application must be an owner of the call. The call state of hCall can be any state except idle.",
 "lineForward": "Handle to the line device.",
 "lineGatherDigits": "Handle to the call on which digits are to be gathered. The application must be an owner of the call. The call state of hCall can be any state.",
 "lineGenerateDigits": "Handle to the call. The application must be an owner of the call. Call state of hCall can be any state. TAPI does not impose any callstate requirements, however some Tapi Service Providers may require that the hCall be in the LINECALLSTATE_CONNECTED state.",
 "lineGenerateTone": "Handle to the call on which a tone is to be generated. The application must be an owner of the call. The call state of hCall can be any state.",
 "lineGetAddressCaps": "Handle to the application's registration with TAPI.",
 "lineGetAddressID": "Handle to the open line device.",
 "lineGetAddressStatus": "Handle to the open line device.",
 "lineGetAppPriority": "A pointer to a string that contains the application executable module file name, without directory data. In API version 2.0 or later, the parameter can be in long file name format, of which the 8.3 file name format is a proper subset. Long file names, unlike 8.3 file names, are case preserving. Neither file name format is case sensitive. For more information, see File Name Conventions. In API versions earlier than 2.0, the parameter must specify a file name in the 8.3 format; long file names cannot be used.",
 "lineGetCallInfo": "Handle to the call to be queried. The call state of hCall can be any state.",
 "lineGetCallStatus": "Handle to the call to be queried. The call state of hCall can be any state.",
 "lineGetConfRelatedCalls": "Handle to a call. This is either a conference call or a participant call in a conference call. For a conference parent call, the call state of hCall can be any state. For a conference participant call, it must be in the conferenced state.",
 "lineGetCountry": "Country/region identifier (not the country code) of the country/region for which information is to be obtained. ...",
 "lineGetDevCaps": "Handle to the application's registration with TAPI.",
 "lineGetDevConfig": "Identifier of the line device to be configured.",
 "lineGetIcon": "Identifier of the line device whose icon is requested.",
 "lineGetID": "Handle to an open line device.",
 "lineGetLineDevStatus": "Handle to the open line device to be queried.",
 "lineGetMessage": "Handle returned by lineInitializeEx. The application must have set the LINEINITIALIZEEXOPTION_USEEVENT option in the dwOptions member of the LINEINITIALIZEEXPARAMS structure.",
 "lineGetNewCalls": "Handle to an open line device.",
 "lineGetNumRings": "Handle to the open line device.",
 "lineGetProviderList": "Highest version of TAPI supported by the application (not necessarily the value negotiated by lineNegotiateAPIVersion on some particular line device).",
 "lineGetRequest": "The application usage handle for the line portion of TAPI.",
 "lineGetStatusMessages": "Handle to the line device.",
 "lineGetTranslateCaps": "Handle returned by the lineInitializeEx function. If an application has not yet called the lineInitializeEx function, this parameter can be zero. Note TAPI 1.4 applications must set this parameter to a valid hLineApp handle, as returned by the lineInitialize function.",
 "lineHandoff": "Handle to the call to be handed off. The application must be an owner of the call. The call state of hCall can be any state.",
 "lineHold": "Handle to the call to be placed on hold. The application must be an owner of the call. The call state of hCall must be connected.",
 "lineInitialize": "Pointer to a location that is filled with the application's usage handle for TAPI.",
 "lineInitializeEx": "Pointer to a location that is filled with the application's usage handle for TAPI.",
 "lineMakeCall": "Handle to the open line device on which a call is to be originated.",
 "lineMonitorDigits": "Handle to the call on which digits are to be detected. The call state of hCall can be any state except idle or disconnected.",
 "lineMonitorMedia": "Handle to the call. The call state of hCall can be any state except idle.",
 "lineMonitorTones": "Handle to the call on whose voice channel tones are to be monitored. The call state of hCall can be any state except idle.",
 "lineNegotiateAPIVersion": "Handle to the application's registration with TAPI.",
 "lineNegotiateExtVersion": "Handle to the application's registration with TAPI.",
 "lineOpen": "Handle to the application's registration with TAPI.",
 "linePark": "Handle to the call to be parked. The application must be an owner of the call. The call state of hCall must be connected.",
 "linePickup": "Handle to the open line device on which a call is to be picked up.",
 "linePrepareAddToConference": "Handle to a conference call. The application must be an owner of this call. The call state of hConfCall must be connected.",
 "lineRedirect": "Handle to the call to be redirected. The application must be an owner of the call. The call state of hCall must be offering.",
 "lineRegisterRequestRecipient": "Application's usage handle for the line portion of TAPI.",
 "lineReleaseUserUserInfo": "Handle to the call. The application must be an owner of the call. The call state of hCall can be any state.",
 "lineRemoveFromConference": "Handle to the call to be removed from the conference. The application must be an owner of this call. The call state of hCall must be conferenced.",
 "lineRemoveProvider": "Permanent provider identifier of the service provider to be removed.",
 "lineSecureCall": "Handle to the call to be secured. The application must be an owner of the call. The call state of hCall can be any state.",
 "lineSendUserUserInfo": "Handle to the call on which to send user-user information. The application must be an owner of the call. The call state of hCall must be connected, offering, accepted, or ringback.",
 "lineSetAppPriority": "A pointer to a string that contains the application executable module filename, without the directory data. In TAPI version 2.0 or later, the parameter can specify a filename in either long or 8.3 filename format.",
 "lineSetAppSpecific": "Handle to the call whose application-specific field needs to be set. The application must be an owner of the call. The call state of hCall can be any state.",
 "lineSetCallData": "Handle to the call. The application must have OWNER privilege.",
 "lineSetCallParams": "Handle to the call whose parameters are to be changed. The application must be an owner of the call. The call state of hCall can be any state except idle or disconnected.",
 "lineSetCallPrivilege": "Handle to the call whose privilege is to be set. The call state of hCall can be any state.",
 "lineSetCallQualityOfService": "Handle to the call. The application must have OWNER privilege.",
 "lineSetCallTreatment": "Handle to the call. The application must have OWNER privilege.",
 "lineSetCurrentLocation": "Application handle returned by lineInitializeEx. If an application has not yet called the lineInitializeEx function, it can set the hLineApp parameter to zero.",
 "lineSetDevConfig": "Identifier of the line device to be configured.",
 "lineSetLineDevStatus": "Handle to the line device.",
 "lineSetMediaControl": "Handle to an open line device.",
 "lineSetMediaMode": "Handle to the call whose media type is to be changed. The application must be an owner of the call. The call state of hCall can be any state.",
 "lineSetNumRings": "Handle to the open line device.",
 "lineSetStatusMessages": "Handle to the line device.",
 "lineSetTerminal": "Handle to an open line device.",
 "lineSetTollList": "Application handle returned by lineInitializeEx. If an application has not yet called the lineInitializeEx function, it can set the hLineApp parameter to zero.",
 "lineSetupConference": "Handle to the Initial call that identifies the first party of a conference call. In some environments (as described in device capabilities), a call must exist to start a conference call, and the application must be an owner of this call. In other telephony environments, no call initially exists, hCall must be left NULL, and hLine must be specified to identify the line on which the conference call is to be initiated. The call state of hCall must be connected.",
 "lineSetupTransfer": "Handle to the call to be transferred. The application must be an owner of the call. The call state of hCall must be connected.",
 "lineShutdown": "Application's usage handle for the line API.",
 "lineSwapHold": "Handle to the active call. The application must be an owner of the call. The call state of hActiveCall must be connected.",
 "lineTranslateAddress": "Handle returned by lineInitializeEx. If a TAPI 2.x application has not yet called the lineInitializeEx function, it can set this parameter to NULL. TAPI 1.4 applications must still call lineInitialize first.",
 "lineTranslateDialog": "Application handle returned by lineInitializeEx. If an application has not yet called the lineInitializeEx function, it can set the hLineApp parameter to zero.",
 "lineUncompleteCall": "Handle to the line device on which a call completion is to be canceled.",
 "lineUnhold": "Handle to the call to be retrieved. The application must be an owner of this call. The call state of hCall must be onHold, onHoldPendingTransfer, or onHoldPendingConference.",
 "lineUnpark": "Handle to the open line device on which a call is to be unparked.",
 "phoneCallbackFunc": "Handle to a phone device associated with the callback.",
 "phoneClose": "Handle to the open phone device to be closed. If the function succeeds, the handle is no longer valid.",
 "phoneConfigDialog": "Identifier of the phone device to be configured.",
 "phoneDevSpecific": "Handle to a phone device.",
 "phoneGetButtonInfo": "Handle to the open phone device.",
 "phoneGetData": "Handle to the open phone device.",
 "phoneGetDevCaps": "Handle to the application's registration with TAPI.",
 "phoneGetDisplay": "Handle to the open phone device.",
 "phoneGetGain": "Handle to the open phone device.",
 "phoneGetHookSwitch": "Handle to the open phone device.",
 "phoneGetIcon": "Identifier of the phone device whose icon is requested.",
 "phoneGetID": "Handle to an open phone device.",
 "phoneGetLamp": "Handle to the open phone device.",
 "phoneGetMessage": "Handle returned by phoneInitializeEx. The application must have set the PHONEINITIALIZEEXOPTION_USEEVENT option in the dwOptions member of the PHONEINITIALIZEEXPARAMS structure.",
 "phoneGetRing": "Handle to the open phone device.",
 "phoneGetStatus": "Handle to the open phone device to be queried.",
 "phoneGetStatusMessages": "Handle to the open phone device to be monitored.",
 "phoneGetVolume": "Handle to the open phone device.",
 "phoneInitialize": "Pointer to a location that is filled with the application's usage handle for TAPI.",
 "phoneInitializeEx": "Pointer to a location that is filled with the application's usage handle for TAPI.",
 "phoneNegotiateAPIVersion": "Handle to the application's registration with TAPI.",
 "phoneNegotiateExtVersion": "Handle to the application's registration with TAPI.",
 "phoneOpen": "Handle to the application's registration with TAPI.",
 "phoneSetButtonInfo": "Handle to the open phone device. The application must be the owner of the phone device.",
 "phoneSetData": "Handle to the open phone device. The application must be the owner of the phone.",
 "phoneSetDisplay": "Handle to the open phone device. The application must be the owner of the phone.",
 "phoneSetGain": "Handle to the open phone device. The application must be the owner of the phone.",
 "phoneSetHookSwitch": "Handle to the open phone device. The application must be the owner of the phone.",
 "phoneSetLamp": "Handle to the open phone device. The application must be the owner of the phone.",
 "phoneSetRing": "Handle to the open phone device. The application must be the owner of the phone device.",
 "phoneSetStatusMessages": "Handle to the open phone device to be monitored.",
 "phoneSetVolume": "Handle to the open phone device. The application must be the owner of the phone.",
 "phoneShutdown": "Application's usage handle for TAPI.",
 "lineAgentSpecific": "Handle to the open line device.",
 "lineCreateAgent": "Handle to the line device.",
 "lineCreateAgentSession": "Handle to the line device.",
 "lineGetAgentActivityList": "Handle to the open line device.",
 "lineGetAgentCaps": "Handle to the application's registration with TAPI.",
 "lineGetAgentGroupList": "Handle to the open line device.",
 "lineGetAgentInfo": "Handle to the line device.",
 "lineGetAgentSessionInfo": "Handle to the line device.",
 "lineGetAgentSessionList": "Handle to the line device.",
 "lineGetAgentStatus": "Handle to the open line device.",
 "lineGetGroupList": "Handle to the line device.",
 "lineGetProxyStatus": "Handle to the application's registration with TAPI.",
 "lineGetQueueInfo": "Handle to the line device.",
 "lineGetQueueList": "Handle to the line device.",
 "lineProxyMessage": "Handle to the open line device. This is converted by TAPI into the correct hLine for each application that receives the message.",
 "lineProxyResponse": "A handle to the open line device.",
 "lineSetAgentActivity": "Handle to the line device.",
 "lineSetAgentGroup": "Handle to the line device.",
 "lineSetAgentMeasurementPeriod": "Handle to the line device.",
 "lineSetAgentSessionState": "Handle to the line device.",
 "lineSetAgentState": "Handle to the line device.",
 "lineSetAgentStateEx": "Handle to the line device.",
 "lineSetQueueMeasurementPeriod": "Handle to the line device.",
 "CreateDataAdviseHolder": "Address of an IDataAdviseHolder pointer variable that receives the interface pointer to the new advise holder object.",
 "CreateDataCache": "If the cache is to be created as part of an aggregate, pointer to the controlling IUnknown of the aggregate. If not, the parameter should be NULL.",
 "CreateFormatEnumerator": "Number of FORMATETC structures in the static array specified by the rgfmtetc parameter. The cfmtetc parameter cannot be zero.",
 "CreateOleAdviseHolder": "Address of IOleAdviseHolder pointer variable that receives the interface pointer to the new advise holder object.",
 "DoDragDrop": "Pointer to the IDataObject interface on a data object that contains the data being dragged.",
 "OleCreatePropertyFrame": "Handle to the parent window of the resulting property sheet dialog box.",
 "OleCreateDefaultHandler": "CLSID identifying the OLE server to be loaded when the embedded object enters the running state.",
 "OleCreateEmbeddingHelper": "CLSID of the class to be helped.",
 "OleCreateEx": "Identifies the class of the object to create.",
 "OleCreateFontIndirect": "Address of a caller-allocated, FONTDESC structure containing the initial state of the font. This value must not be NULL.",
 "OleCreateFromData": "Pointer to the IDataObject interface on the data transfer object that holds the data from which the object is created.",
 "OleCreateFromDataEx": "Pointer to the data transfer object holding the new data used to create the new object. (see OleCreateFromData).",
 "OleCreateFromFile": "This parameter is reserved and must be CLSID_NULL.",
 "OleCreateFromFileEx": "This parameter is reserved and must be CLSID_NULL.",
 "OleCreateLink": "Pointer to the IMoniker interface on the moniker that can be used to locate the source of the linked object.",
 "OleCreateLinkEx": "Pointer to a moniker to the object to create a link to.",
 "OleCreateLinkFromData": "Pointer to the IDataObject interface on the data transfer object from which the linked object is to be created.",
 "OleCreateLinkFromDataEx": "Pointer to the data object to create a link object from.",
 "OleCreateLinkToFile": "Pointer to a string naming the source file to be linked to.",
 "OleCreateLinkToFileEx": "Pointer to the name of the file to create a link to.",
 "OleCreateMenuDescriptor": "Handle to the combined menu created by the object.",
 "OleCreatePictureIndirect": "Pointer to a caller-allocated structure containing the initial state of the picture. The specified structure can be NULL to create an uninitialized object, in the event the picture needs to initialize via IPersistStream::Load.",
 "OleCreateStaticFromData": "Pointer to the IDataObject interface on the data transfer object that holds the data from which the object will be created.",
 "OleDestroyMenuDescriptor": "Handle to the shared menu descriptor that was returned by the OleCreateMenuDescriptor function.",
 "OleDraw": "Pointer to the IUnknown interface on the view object that is to be drawn.",
 "OleDuplicateData": "Handle of the source data.",
 "OleGetClipboard": "Address of IDataObject pointer variable that receives the interface pointer to the clipboard data object.",
 "OleInitialize": "This parameter is reserved and must be NULL.",
 "OleIsCurrentClipboard": "Pointer to the IDataObject interface on the data object containing clipboard data of interest, which the caller previously placed on the clipboard.",
 "OleIsRunning": "Pointer to the IOleObject interface on the object of interest.",
 "OleLoadPicturePath": "The path or URL to the file you want to open.",
 "OleLoadFromStream": "Pointer to the IStream interface on the stream from which the object is to be loaded.",
 "OleLoadPicture": "Pointer to the stream that contains the picture's data.",
 "OleLoadPictureEx": "Pointer to the stream that contains the picture's data.",
 "OleLockRunning": "Pointer to the IUnknown interface on the object, which the function uses to query for a pointer to IRunnableObject.",
 "OleMetafilePictFromIconAndLabel": "Handle to the icon that is to be drawn into the metafile. This parameter can be NULL. If hIcon is NULL, this function returns NULL without creating a metafile.",
 "OleNoteObjectVisible": "Pointer to the IUnknown interface on the object that is to be locked or unlocked.",
 "OleQueryCreateFromData": "Pointer to the IDataObject interface on the data transfer object to be queried.",
 "OleQueryLinkFromData": "Pointer to the IDataObject interface on the clipboard data object from which the object is to be created.",
 "OleRegEnumFormatEtc": "CLSID of the class whose formats are being requested.",
 "OleRegEnumVerbs": "Class identifier whose verbs are being requested.",
 "OleRun": "Pointer to the IUnknown interface on the object, with which it will query for a pointer to the IRunnableObject interface, and then call its Run method.",
 "OleSave": "Pointer to the IPersistStorage interface on the object to be saved.",
 "OleSaveToStream": "Pointer to the IPersistStream interface on the object to be saved to the stream. The pPStm parameter cannot be NULL.",
 "OleSetContainedObject": "Pointer to the IUnknown interface of the object.",
 "OleSetMenuDescriptor": "Handle to the composite menu descriptor returned by the OleCreateMenuDescriptor function. If NULL, the dispatching code is unhooked.",
 "OleTranslateAccelerator": "Pointer to the IOleInPlaceFrame interface to which the keystroke might be sent.",
 "OleUIAddVerbMenu": "Pointer to the IOleObject interface on the selected object. If this is NULL, then a default disabled menu item is created.",
 "OleUIBusy": "Pointer to an OLEUIBUSY structure that contains information used to initialize the dialog box.",
 "OleUICanConvertOrActivateAs": "The CLSID of the class for which the information is required.",
 "OleUIChangeIcon": "Pointer to the In/Out OLEUICHANGEICON structure for this dialog box.",
 "OleUIChangeSource": "Pointer to the in-out OLEUICHANGESOURCE structure for this dialog box.",
 "OleUIConvert": "Pointer to an OLEUICONVERT structure that contains information used to initialize the dialog box.",
 "OleUIEditLinks": "Pointer to an OLEUIEDITLINKS structure that contains information used to initialize the dialog box.",
 "OleUIInsertObject": "Pointer to the in-out OLEUIINSERTOBJECT structure for this dialog box.",
 "OleUIObjectProperties": "Pointer to the OLEUIOBJECTPROPS structure.",
 "OleUIPasteSpecial": "A pointer to an OLEUIPASTESPECIAL structure.",
 "OleUIPromptUser": "The resource number of the dialog box to be displayed. See Remarks.",
 "OleUIUpdateLinks": "Pointer to the IOleUILinkContainer interface on the link container.",
 "OleUninitialize": null,
 "RegisterDragDrop": "Handle to a window that can be a target for an OLE drag-and-drop operation.",
 "ReleaseStgMedium": "Pointer to the storage medium that is to be freed.",
 "RevokeDragDrop": "Handle to a window previously registered as a target for an OLE drag-and-drop operation.",
 "WMCheckURLExtension": "A wide-character null-terminated string containing a file name or URL.",
 "WMCheckURLScheme": "A wide-character null-terminated string containing a network protocol designation, such as \"http\".",
 "WMCreateBackupRestorer": "Pointer to an IWMStatusCallback interface containing the OnStatus callback method to be used by the new backup restorer object.",
 "WMCreateCertificate": "Pointer to a pointer to the IUnknown interface of the newly created certificate object.",
 "WMCreateDeviceRegistration": "Address of a pointer to the IWMDeviceRegistration interface of the newly created device registration object.",
 "WMCreateDRMTranscryptor": "Address of a pointer to the IWMDRMTranscryptor interface of the newly created DRM transcryptor object.",
 "WMCreateEditor": "Pointer to a pointer to the IWMMetadataEditor interface of the newly created metadata editor object.",
 "WMCreateIndexer": "Pointer to a pointer to the IWMIndexer interface of the newly created indexer object.",
 "WMCreateLicenseRevocationAgent": "Address of the IUnknown interface of the object that implements the IWMStatusCallback::OnStatus callback method used to communicate license revocation status to the application.",
 "WMCreateProfileManager": "Pointer to a pointer to the IWMProfileManager interface of the newly created profile manager object.",
 "WMCreateReader": "This value must be set to NULL.",
 "WMCreateSecureChannel": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object.",
 "WMCreateSecureChannel_Certified": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object.",
 "WMCreateSecureChannel_Certified_DES": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object.",
 "WMCreateSecureChannel_DES": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object.",
 "WMCreateSyncReader": "Pointer to an IUnknown interface. This value must be set to NULL.",
 "WMCreateWriter": "Pointer to an IUnknown interface. This value is not used and should be set to NULL.",
 "WMCreateWriterFileSink": "Pointer to a pointer to the IWMWriterFileSink interface of the newly created writer file sink object.",
 "WMCreateWriterNetworkSink": "Pointer to a pointer to the IWMWriterNetworkSink interface of the newly created writer network sink object.",
 "WMCreateWriterPushSink": "Pointer to a pointer to the IWMWriterPushSink interface of the newly created writer push sink object.",
 "WMIsAvailableOffline": "Wide-character null-terminated string containing the URL of the file to be checked.",
 "WMIsContentProtected": "Pointer to a wide-character null-terminated string containing the name of the file to check for DRM-protected content.",
 "WMValidateData": "Pointer to a BYTE array containing the data buffer to validate. This data should be part of a file, starting at the beginning of the file, and continuing for the number of bytes specified in pdwDataSize. You can set this parameter to NULL to retrieve the minimum number of bytes to pass.",
 "BuildCommDCB": "The device-control information. The function takes this string, parses it, and then sets appropriate values in the DCB structure pointed to by lpDCB. The string must have the same form as the mode command's command-line arguments: COMx[:][baud=b][parity=p][data=d][stop=s][to={on|off}][xon={on|off}][odsr={on|off}][octs={on|off}][dtr={on|off|hs}][rts={on|off|hs|tg}][idsr={on|off}] The device name is optional, but it must specify a valid device if used. For example, the following string specifies a baud rate of 1200, no parity, 8 data bits, and 1 stop bit: baud=1200 parity=N data=8 stop=1",
 "BuildCommDCBAndTimeouts": "The device-control information. The function takes this string, parses it, and then sets appropriate values in the DCB structure pointed to by lpDCB. The string must have the same form as the mode command's command-line arguments: COMx[:][baud={11|110|15|150|30|300|60|600|12|1200|24|2400|48|4800|96|9600|19|19200}][parity={n|e|o|m|s}][data={5|6|7|8}][stop={1|1.5|2}][to={on|off}][xon={on|off}][odsr={on|off}][octs={on|off}][dtr={on|off|hs}][rts={on|off|hs|tg}][idsr={on|off}] The \"baud\" substring can be any of the values listed, which are in pairs. The two-digit values are the first two digits of the associated values that they represent. For example, 11 represents 110 baud, 19 represents 19,200 baud. The \"parity\" substring indicates how the parity bit is used to detect transmission errors. The values represent \"none\", \"even\", \"odd\", \"mark\", and \"space\". For more information, see the Mode command reference in TechNet. For example, the following string specifies a baud rate of 1200, no parity, 8 data bits, and 1 stop bit: baud=1200 parity=N data=8 stop=1",
 "ClearCommBreak": "A handle to the communications device. The CreateFile function returns this handle.",
 "ClearCommError": "A handle to the communications device. The CreateFile function returns this handle.",
 "CommConfigDialog": "The name of the device for which a dialog box should be displayed. For example, COM1 through COM9 are serial ports and LPT1 through LPT9 are parallel ports.",
 "EscapeCommFunction": "A handle to the communications device. The CreateFile function returns this handle.",
 "GetCommConfig": "A handle to the open communications device. The CreateFile function returns this handle.",
 "GetCommMask": "A handle to the communications device. The CreateFile function returns this handle.",
 "GetCommModemStatus": "A handle to the communications device. The CreateFile function returns this handle.",
 "GetCommProperties": "A handle to the communications device. The CreateFile function returns this handle.",
 "GetCommState": "A handle to the communications device. The CreateFile function returns this handle.",
 "GetCommTimeouts": "A handle to the communications device. The CreateFile function returns this handle.",
 "GetDefaultCommConfig": "The name of the device. For example, COM1 through COM9 are serial ports and LPT1 through LPT9 are parallel ports.",
 "PurgeComm": "A handle to the communications resource. The CreateFile function returns this handle.",
 "SetCommBreak": "A handle to the communications device. The CreateFile function returns this handle.",
 "SetCommConfig": "A handle to the open communications device. The CreateFile function returns this handle.",
 "SetCommMask": "A handle to the communications device. The CreateFile function returns this handle.",
 "SetCommState": "A handle to the communications device. The CreateFile function returns this handle.",
 "SetCommTimeouts": "A handle to the communications device. The CreateFile function returns this handle.",
 "SetDefaultCommConfig": "The name of the device. For example, COM1 through COM9 are serial ports and LPT1 through LPT9 are parallel ports.",
 "SetupComm": "A handle to the communications device. The CreateFile function returns this handle.",
 "TransmitCommChar": "A handle to the communications device. The CreateFile function returns this handle.",
 "WaitCommEvent": "A handle to the communications device. The CreateFile function returns this handle.",
 "BrowseForGPO": "A pointer to a GPOBROWSEINFO structure that contains information used to initialize the dialog box. When the BrowseForGPO function returns, this structure contains information about the user's actions.",
 "CreateGPOLink": "A value that specifies the path to the GPO, in ADSI format (\"LDAP://cn=user, ou=users, dc=coname, dc=com\"). You cannot specify a server name in this parameter.",
 "DeleteAllGPOLinks": "A value that specifies the path to the site, domain, or organizational unit, in ADSI format (LDAP://cn=user, ou=users, dc=coname, dc=com). You cannot specify a server name in this parameter.",
 "DeleteGPOLink": "A value that specifies the path to the GPO, in ADSI format (LDAP://cn=user, ou=users, dc=coname, dc=com). You cannot specify a server name in this parameter.",
 "EnterCriticalPolicySection": "A value that specifies whether to stop the application of computer policy or user policy. If this value is TRUE, the system stops applying computer policy. If this value is FALSE, the system stops applying user policy.",
 "ExportRSoPData": "A pointer to a string that specifies the namespace which contains the RSoP data.",
 "FreeGPOList": "A pointer to the list of GPO structures. This list is returned by the GetGPOList or GetAppliedGPOList function. For more information, see GROUP_POLICY_OBJECT.",
 "GenerateGroupPolicy": "A parameter that represents one or more of the following flags. GPO_INFO_FLAG_SLOWLINK The policy is applied across a slow link. GPO_INFO_FLAG_VERBOSE Write verbose output to the event log.",
 "GetAppliedGPOList": "A value that specifies the policy type. This parameter can be the following value. GPO_LIST_FLAG_MACHINE Retrieves information about the computer policy. If this value is not specified, the function retrieves only user policy information.",
 "GetGPOList": "A token for the user or computer, returned from the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. This token must have TOKEN_IMPERSONATE and TOKEN_QUERY access. For more information, see Access Rights for Access-Token Objects and the following Remarks section. If this parameter is NULL, you must supply values for the lpName and lpHostName parameters.",
 "GetLocalManagedApplications": "A value that, if TRUE, the prgLocalApps parameter contains a list of managed applications that applies to the user. If the value of this parameter is FALSE, the prgLocalApps parameter contains a list of managed applications that applies to the local computer.",
 "GetManagedApplications": "A pointer to a GUID that specifies the category of applications to be listed. If pCategory is not null, dwQueryFlags must contain MANAGED_APPS_FROMCATEGORY. If pCategory is null, dwQueryFlags cannot contain MANAGED_APPS_FROMCATEGORY.",
 "GetManagedApplicationCategories": "This parameter is reserved. Its value must be 0.",
 "ImportRSoPData": "Pointer to a string specifying the namespace to contain the RSoP data. The namespace must exist prior to calling ImportRSoPData.",
 "InstallApplication": "A pointer to a INSTALLDATA structure that specifies the application to install.",
 "LeaveCriticalPolicySection": "Handle to a policy section, which is returned by the EnterCriticalPolicySection function.",
 "ProcessGroupPolicyCompleted": "Specifies the unique GUID that identifies the extension.",
 "ProcessGroupPolicyCompletedEx": "Specifies the unique GUID that identifies the policy extension.",
 "ProcessGroupPolicy": "This parameter can be one or more of the following flags. GPO_INFO_FLAG_MACHINE Apply computer policy rather than user policy. GPO_INFO_FLAG_BACKGROUND Perform a background refresh of the policy. GPO_INFO_FLAG_ASYNC_FOREGROUND Perform an asynchronous foreground refresh of policy. For more information about foreground policy application, see Initial Processing of Group Policy. GPO_INFO_FLAG_SLOWLINK The policy is being applied across a slow link. GPO_INFO_FLAG_VERBOSE Write verbose output to the event log. GPO_INFO_FLAG_NOCHANGES No changes to the GPO were detected. GPO_INFO_FLAG_LINKTRANSITION A change in the link speed was detected between policy applications. GPO_INFO_FLAG_LOGRSOP_TRANSITION A change in RSoP logging was detected between the application of the previous policy and the application of the current policy. GPO_INFO_FLAG_FORCED_REFRESH A forced policy refresh is being applied. GPO_INFO_FLAG_SAFEMODE_BOOT Safe mode flag.",
 "ProcessGroupPolicyEx": "This parameter can be one or more of the following flags. GPO_INFO_FLAG_MACHINE Apply computer policy rather than user policy. GPO_INFO_FLAG_BACKGROUND Perform a background refresh of the policy. For more information, see the text following this list. GPO_INFO_FLAG_ASYNC_FOREGROUND Perform an asynchronous foreground refresh of policy. For more information, see the text following this list. For more information about foreground policy application, see Initial Processing of Group Policy. GPO_INFO_FLAG_SLOWLINK The policy is being applied across a slow link. GPO_INFO_FLAG_VERBOSE Write verbose output to the event log. GPO_INFO_FLAG_NOCHANGES No changes to the GPO were detected. GPO_INFO_FLAG_LINKTRANSITION A change in the link speed was detected between policy applications. GPO_INFO_FLAG_LOGRSOP_TRANSITION A change in RSoP logging was detected between the application of the previous policy and the application of the current policy. GPO_INFO_FLAG_FORCED_REFRESH A forced policy refresh is being applied. GPO_INFO_FLAG_SAFEMODE_BOOT Safe mode flag. The GPO_INFO_FLAG_BACKGROUND flag and the GPO_INFO_FLAG_ASYNC_FOREGROUND flag can both be set. Because policies are always applied asynchronously during a background refresh, most extensions handle an asynchronous foreground refresh in the same manner in which they handle a background refresh. Therefore, they do not need to check for the GPO_INFO_FLAG_ASYNC_FOREGROUND flag. In instances when an extension must distinguish between a background refresh of policy and an asynchronous foreground refresh of policy, the extension can check for the GPO_INFO_FLAG_ASYNC_FOREGROUND flag.",
 "RefreshPolicy": "Specifies whether to refresh the computer policy or user policy. If this value is TRUE, the system refreshes the computer policy. If this value is FALSE, the system refreshes the user policy.",
 "RefreshPolicyEx": "Specifies whether to refresh the computer policy or user policy. If this value is TRUE, the system refreshes the computer policy. If this value is FALSE, the system refreshes the user policy.",
 "RegisterGPNotification": "Handle to an event object. Use the CreateEvent function to create the event object.",
 "RSoPAccessCheckByType": "Pointer to a SECURITY_DESCRIPTOR against which access on the object is checked.",
 "RSoPFileAccessCheck": "Pointer to the name of the relevant file. The file must already exist.",
 "RSoPResetPolicySettingStatus": "This parameter is currently unused.",
 "RSoPSetPolicySettingStatus": "This parameter is currently unused.",
 "StatusMessageCallback": "Specifies whether the message is verbose. If this parameter is TRUE, the message is verbose. If this parameter is FALSE, the message is not verbose.",
 "UninstallApplication": "The Windows Installer product code of the product being uninstalled. The product code of the application should be provided in the form of a Windows Installer GUID as a string with braces.",
 "UnregisterGPNotification": "Policy-notification handle passed to the RegisterGPNotification function.",
 "AddConsoleAlias": "The console alias to be mapped to the text specified by Target.",
 "AllocConsole": null,
 "AttachConsole": "The identifier of the process whose console is to be used. This parameter can be one of the following values. ValueMeaning pid Use the console of the specified process. ATTACH_PARENT_PROCESS (DWORD)-1 Use the console of the parent of the current process.",
 "CreateConsoleScreenBuffer": "The access to the console screen buffer. For a list of access rights, see Console Buffer Security and Access Rights.",
 "FillConsoleOutputAttribute": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "FillConsoleOutputCharacter": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "FlushConsoleInputBuffer": "A handle to the console input buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "FreeConsole": null,
 "GenerateConsoleCtrlEvent": "The type of signal to be generated. This parameter can be one of the following values. ValueMeaning CTRL_C_EVENT 0 Generates a CTRL+C signal. This signal cannot be generated for process groups. If dwProcessGroupId is nonzero, this function will succeed, but the CTRL+C signal will not be received by processes within the specified process group. CTRL_BREAK_EVENT 1 Generates a CTRL+BREAK signal.",
 "GetConsoleAlias": "The console alias whose text is to be retrieved.",
 "GetConsoleAliases": "A pointer to a buffer that receives the aliases. The format of the data is as follows: Source1=Target1\\0Source2=Target2\\0... SourceN=TargetN\\0, where N is the number of console aliases defined.",
 "GetConsoleAliasesLength": "The name of the executable file whose console aliases are to be retrieved.",
 "GetConsoleAliasExes": "A pointer to a buffer that receives the names of the executable files.",
 "GetConsoleAliasExesLength": null,
 "GetConsoleCP": null,
 "GetConsoleCursorInfo": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetConsoleDisplayMode": "The display mode of the console. This parameter can be one or more of the following values. ValueMeaning CONSOLE_FULLSCREEN 1 Full-screen console. The console is in this mode as soon as the window is maximized. At this point, the transition to full-screen mode can still fail. CONSOLE_FULLSCREEN_HARDWARE 2 Full-screen console communicating directly with the video hardware. This mode is set after the console is in CONSOLE_FULLSCREEN mode to indicate that the transition to full-screen mode has completed.",
 "GetConsoleFontSize": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetConsoleHistoryInfo": "A pointer to a CONSOLE_HISTORY_INFO structure that receives the history settings for the calling process's console.",
 "GetConsoleMode": "A handle to the console input buffer or the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetConsoleOriginalTitle": "A pointer to a buffer that receives a null-terminated string containing the original title. The storage for this buffer is allocated from a shared heap for the process that is 64 KB in size. The maximum size of the buffer will depend on heap usage.",
 "GetConsoleOutputCP": null,
 "GetConsoleProcessList": "A pointer to a buffer that receives an array of process identifiers upon success. The storage for this buffer is allocated from a shared heap for the process that is 64 KB in size. The maximum size of the buffer will depend on heap usage.",
 "GetConsoleScreenBufferInfo": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetConsoleScreenBufferInfoEx": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetConsoleSelectionInfo": "A pointer to a CONSOLE_SELECTION_INFO structure that receives the selection information.",
 "GetConsoleTitle": "A pointer to a buffer that receives a null-terminated string containing the title. If the buffer is too small to store the title, the function stores as many characters of the title as will fit in the buffer, ending with a null terminator. The storage for this buffer is allocated from a shared heap for the process that is 64 KB in size. The maximum size of the buffer will depend on heap usage.",
 "GetConsoleWindow": null,
 "GetCurrentConsoleFont": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetCurrentConsoleFontEx": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetLargestConsoleWindowSize": "A handle to the console screen buffer.",
 "GetNumberOfConsoleInputEvents": "A handle to the console input buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "GetNumberOfConsoleMouseButtons": "A pointer to a variable that receives the number of mouse buttons.",
 "GetStdHandle": "The standard device. This parameter can be one of the following values. ValueMeaning STD_INPUT_HANDLE (DWORD)-10 The standard input device. Initially, this is the console input buffer, CONIN$. STD_OUTPUT_HANDLE (DWORD)-11 The standard output device. Initially, this is the active console screen buffer, CONOUT$. STD_ERROR_HANDLE (DWORD)-12 The standard error device. Initially, this is the active console screen buffer, CONOUT$.",
 "HandlerRoutine": "The type of control signal received by the handler. This parameter can be one of the following values. ValueMeaning CTRL_C_EVENT 0 A CTRL+C signal was received, either from keyboard input or from a signal generated by the GenerateConsoleCtrlEvent function. CTRL_BREAK_EVENT 1 A CTRL+BREAK signal was received, either from keyboard input or from a signal generated by GenerateConsoleCtrlEvent. CTRL_CLOSE_EVENT 2 A signal that the system sends to all processes attached to a console when the user closes the console (either by clicking Close on the console window's window menu, or by clicking the End Task button command from Task Manager). CTRL_LOGOFF_EVENT 5 A signal that the system sends to all console processes when a user is logging off. This signal does not indicate which user is logging off, so no assumptions can be made. Note that this signal is received only by services. Interactive applications are terminated at logoff, so they are not present when the system sends this signal. CTRL_SHUTDOWN_EVENT 6 A signal that the system sends when the system is shutting down. Interactive applications are not present by the time the system sends this signal, therefore it can be received only be services in this situation. Services also have their own notification mechanism for shutdown events. For more information, see Handler. This signal can also be generated by an application using GenerateConsoleCtrlEvent.",
 "SetConsoleCtrlHandler": "A pointer to the application-defined HandlerRoutine function to be added or removed. This parameter can be NULL.",
 "PeekConsoleInput": "A handle to the console input buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "ReadConsole": "A handle to the console input buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "ReadConsoleInput": "A handle to the console input buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "ReadConsoleOutput": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "ReadConsoleOutputAttribute": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "ReadConsoleOutputCharacter": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "ScrollConsoleScreenBuffer": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "SetConsoleActiveScreenBuffer": "A handle to the console screen buffer.",
 "SetConsoleCP": "The identifier of the code page to be set. For more information, see Remarks.",
 "SetConsoleCursorInfo": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "SetConsoleCursorPosition": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "SetConsoleDisplayMode": "A handle to the console screen buffer.",
 "SetConsoleHistoryInfo": "A pointer to a CONSOLE_HISTORY_INFO structure that contains the history settings for the process's console.",
 "SetConsoleMode": "A handle to the console input buffer or a console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "SetConsoleOutputCP": "The identifier of the code page to set. For more information, see Remarks.",
 "SetConsoleScreenBufferInfoEx": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "SetConsoleScreenBufferSize": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "SetConsoleTextAttribute": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "SetConsoleTitle": "The string to be displayed in the title bar of the console window. The total size must be less than 64K.",
 "SetConsoleWindowInfo": "A handle to the console screen buffer. The handle must have the GENERIC_READ access right. For more information, see Console Buffer Security and Access Rights.",
 "SetCurrentConsoleFontEx": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "SetStdHandle": "The standard device for which the handle is to be set. This parameter can be one of the following values. ValueMeaning STD_INPUT_HANDLE (DWORD)-10 The standard input device. STD_OUTPUT_HANDLE (DWORD)-11 The standard output device. STD_ERROR_HANDLE (DWORD)-12 The standard error device.",
 "WriteConsole": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "WriteConsoleInput": "A handle to the console input buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "WriteConsoleOutput": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "WriteConsoleOutputAttribute": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "WriteConsoleOutputCharacter": "A handle to the console screen buffer. The handle must have the GENERIC_WRITE access right. For more information, see Console Buffer Security and Access Rights.",
 "AllocConnections": "A pointer to an array of newly allocated Connections structures.",
 "AllocCountedString": "A pointer to the address of a newly allocated CountedString structure.",
 "AllocFixupInfo": "A pointer to the address of a newly allocated FixupInfo structure.",
 "FreeConnections": "A pointer to the Connections structure to free.",
 "FreeCountedString": "A pointer to the CountedString data structure to free.",
 "FreeFixupInfo": "A pointer to the FixupInfo data structure to free.",
 "FreeIsolationInfo": "A pointer to the IsolationInfo data structure to free.",
 "FreeIsolationInfoEx": "A pointer to the IsolationInfoEx data structure to free.",
 "FreeNapComponentRegistrationInfoArray": "The number of NapComponentRegistrationInfo structures in info to free.",
 "FreeNetworkSoH": "A pointer to the NetworkSoH data structure to free.",
 "FreePrivateData": "A pointer to the PrivateData data structure to free.",
 "FreeSoH": "A pointer to the SoH data structure to free.",
 "FreeSoHAttributeValue": "A SoHAttributeType value that specifies the type of SoH attribute value to free.",
 "FreeSystemHealthAgentState": "A pointer to the SystemHealthAgentState data structure to free.",
 "InitializeNapAgentNotifier": "A NapNotifyType value that specifies the type of service notifications to receive.",
 "UninitializeNapAgentNotifier": "A NapNotifyType value that specifies the type of service notifications to unsubscribe from.",
 "CopyAcceleratorTable": "Type: HACCEL A handle to the accelerator table to copy.",
 "CreateAcceleratorTable": "Type: LPACCEL An array of ACCEL structures that describes the accelerator table.",
 "DestroyAcceleratorTable": "Type: HACCEL A handle to the accelerator table to be destroyed. This handle must have been created by a call to the CreateAcceleratorTable or LoadAccelerators function.",
 "LoadAccelerators": "Type: HINSTANCE A handle to the module whose executable file contains the accelerator table to be loaded.",
 "TranslateAccelerator": "Type: HWND A handle to the window whose messages are to be translated.",
 "RegisterPointerInputTarget": "The window to register as a global redirection target. Redirection can cause the foreground window to lose activation (focus). To avoid this, ensure the window is a message-only window or has the WS_EX_NOACTIVATE style set.",
 "RegisterPointerInputTargetEx": "Not supported.",
 "SoundSentryProc": "Type: DWORD The duration, in milliseconds, of the visual signal that is displayed.",
 "UnregisterPointerInputTarget": "Window to be un-registered as a global redirection target on its desktop.",
 "UnregisterPointerInputTargetEx": "Not supported.",
 "BeginBufferedAnimation": "Type: HWND A handle to the window in which the animations play.",
 "BeginBufferedPaint": "Type: HDC The handle of the target DC on which the buffer will be painted.",
 "BeginPanningFeedback": "Type: HWND The handle to the target window that will receive feedback.",
 "BufferedPaintClear": "Type: HPAINTBUFFER The handle of the buffered paint context, obtained through BeginBufferedPaint.",
 "BufferedPaintInit": null,
 "BufferedPaintRenderAnimation": "Type: HWND Handle to the window in which the animations play.",
 "BufferedPaintSetAlpha": "Type: HPAINTBUFFER The handle of the buffered paint context, obtained through BeginBufferedPaint.",
 "BufferedPaintStopAllAnimations": "Type: HWND The handle of the window in which to stop all animations.",
 "BufferedPaintUnInit": null,
 "CloseThemeData": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "DrawThemeBackground": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "DrawThemeBackgroundEx": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "DrawThemeEdge": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "DrawThemeIcon": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "DrawThemeParentBackground": "Type: HWND The child control.",
 "DrawThemeParentBackgroundEx": "Type: HWND Handle of the child control.",
 "DrawThemeText": "Type: HTHEME Handle to a window's theme data. Use OpenThemeData to create an HTHEME.",
 "DrawThemeTextEx": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "EnableThemeDialogTexture": "Type: HWND Window handle of the target dialog box.",
 "EnableTheming": "Type: BOOL Receives one of the following values. ValueMeaning TRUE Enables visual styles. If the user previously had an active visual style, it becomes active again. Note Only clients with trusted computing base (TCB) privileges, where the client acts as part of the operating system, can load or change a global theme. FALSE Disables visual styles and turns visual styles off.",
 "EndBufferedAnimation": "Type: HANIMATIONBUFFER The handle to the buffered animation context that was returned by BeginBufferedAnimation.",
 "EndBufferedPaint": "Type: HPAINTBUFFER The handle of the buffered paint context, obtained through BeginBufferedPaint.",
 "EndPanningFeedback": "Type: HWND The handle to the target window that will receive feedback.",
 "UpdatePanningFeedback": "Type: HWND The handle to the target window that will receive feedback. For the method to succeed, this must be the same HWND as provided in BeginPanningFeedback.",
 "GetBufferedPaintBits": "Type: HPAINTBUFFER The handle of the buffered paint context, obtained through BeginBufferedPaint.",
 "GetBufferedPaintDC": "Type: HPAINTBUFFER Handle of the buffered paint context, obtained through BeginBufferedPaint.",
 "GetBufferedPaintTargetDC": "Type: HPAINTBUFFER A handle to the buffered paint context obtained through BeginBufferedPaint.",
 "GetBufferedPaintTargetRect": "Type: HPAINTBUFFER Handle to the buffered paint context obtained through BeginBufferedPaint.",
 "GetCurrentThemeName": "Type: LPWSTR Pointer to a string that receives the theme path and file name.",
 "GetThemeAppProperties": null,
 "GetThemeBackgroundContentRect": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeBackgroundExtent": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeBackgroundRegion": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeBitmap": "Type: HTHEME A handle to theme data.",
 "GetThemeBool": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeColor": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeDocumentationProperty": "Type: LPCWSTR Pointer to a string that contains the name of the theme file that will be opened to query for the property.",
 "GetThemeEnumValue": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeFilename": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeFont": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeInt": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeIntList": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeMargins": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeMetric": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemePartSize": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemePosition": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemePropertyOrigin": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeRect": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeStream": "Type: HTHEME Handle to the theme from which the stream will be retrieved.",
 "GetThemeString": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeSysBool": "Type: HTHEME Handle to theme data.",
 "GetThemeSysColor": "Type: HTHEME Handle to theme data.",
 "GetThemeSysColorBrush": "Type: HTHEME Handle to theme data.",
 "GetThemeSysFont": "Type: HTHEME Handle to theme data.",
 "GetThemeSysInt": "Type: HTHEME Handle to theme data.",
 "GetThemeSysSize": "Type: HTHEME Handle to theme data.",
 "GetThemeSysString": "Type: HTHEME Handle to theme data.",
 "GetThemeTextExtent": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeTextMetrics": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "GetThemeTransitionDuration": "Type: HTHEME Handle of the theme data.",
 "GetWindowTheme": "Type: HWND Handle of the window.",
 "HitTestThemeBackground": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "IsAppThemed": null,
 "IsCompositionActive": null,
 "IsThemeActive": null,
 "IsThemeBackgroundPartiallyTransparent": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "IsThemeDialogTextureEnabled": "Type: HWND HWND value that specifies a dialog window.",
 "IsThemePartDefined": "Type: HTHEME Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.",
 "OpenThemeData": "Type: HWND Handle of the window for which theme data is required.",
 "OpenThemeDataEx": "Type: HWND A handle to a window or control that the theme is to be retrieved from.",
 "SetThemeAppProperties": "Type: DWORD DWORD that specifies one or more of the following bit flags, which can be combined with a logical OR. ValueMeaning STAP_ALLOW_NONCLIENT Specifies that the nonclient areas of application windows will have visual styles applied. STAP_ALLOW_CONTROLS Specifies that the common controls used in an application will have visual styles applied. STAP_ALLOW_WEBCONTENT Specifies that web content displayed in an application will have visual styles applied.",
 "SetWindowTheme": "Type: HWND Handle to the window whose visual style information is to be changed.",
 "SetWindowThemeAttribute": "Type: HWND Handle to a window to apply changes to.",
 "SetWindowThemeNonClientAttributes": "Type: HWND A handle to the window in which to apply changes.",
 "WPUGetQOSTemplate": "Pointer to a provider selected–globally unique identifier (GUID). ...",
 "WSCInstallQOSTemplate": "Pointer to a provider-selected globally unique identifier (GUID).",
 "WSCRemoveQOSTemplate": "Pointer to a provider-selected globally unique identifier (GUID).",
 "WSAGetQOSByName": "A descriptor identifying a socket.",
 "WSPGetQOSByName": "Descriptor identifying a socket.",
 "NetSessionDel": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetSessionEnum": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetSessionGetInfo": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetConnectionEnum": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE is defined.",
 "NetShareAdd": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetShareCheck": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetShareDel": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE is defined.",
 "NetShareDelEx": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. This string is Unicode if _WIN32_WINNT or FORCE_UNICODE is defined.",
 "NetShareEnum": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "NetStatisticsGet": "Pointer to a string that specifies the DNS or NetBIOS name of the server on which the function is to execute. If this parameter is NULL, the local computer is used.",
 "CeipIsOptedIn": null,
 "DnsHostnameToComputerName": "The DNS name. If the DNS name is not a valid, translatable name, the function fails. For more information, see Computer Names.",
 "EnumSystemFirmwareTables": "The identifier of the firmware table provider to which the query is to be directed. This parameter can be one of the following values. ValueMeaning 'ACPI'The ACPI firmware table provider. 'FIRM'The raw firmware table provider. Not supported for UEFI systems; use 'RSMB' instead. 'RSMB'The raw SMBIOS firmware table provider.",
 "ExpandEnvironmentStrings": "A buffer that contains one or more environment-variable strings in the form: %variableName%. For each such reference, the %variableName% portion is replaced with the current value of that environment variable. Case is ignored when looking up the environment-variable name. If the name is not found, the %variableName% portion is left unexpanded. Note that this function does not support all the features that Cmd.exe supports. For example, it does not support %variableName:str1=str2% or %variableName:~offset,length%.",
 "GetComputerName": "A pointer to a buffer that receives the computer name or the cluster virtual server name. The buffer size should be large enough to contain MAX_COMPUTERNAME_LENGTH 1 characters.",
 "GetComputerNameEx": "The type of name to be retrieved. This parameter is a value from the COMPUTER_NAME_FORMAT enumeration type. The following table provides additional information. ValueMeaning ComputerNameDnsDomain The name of the DNS domain assigned to the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS domain name of the cluster virtual server. ComputerNameDnsFullyQualified The fully qualified DNS name that uniquely identifies the local computer. This name is a combination of the DNS host name and the DNS domain name, using the form HostName.DomainName. If the local computer is a node in a cluster, lpBuffer receives the fully qualified DNS name of the cluster virtual server. ComputerNameDnsHostname The DNS host name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS host name of the cluster virtual server. ComputerNameNetBIOS The NetBIOS name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the NetBIOS name of the cluster virtual server. ComputerNamePhysicalDnsDomain The name of the DNS domain assigned to the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS domain name of the local computer, not the name of the cluster virtual server. ComputerNamePhysicalDnsFullyQualified The fully qualified DNS name that uniquely identifies the computer. If the local computer is a node in a cluster, lpBuffer receives the fully qualified DNS name of the local computer, not the name of the cluster virtual server. The fully qualified DNS name is a combination of the DNS host name and the DNS domain name, using the form HostName.DomainName. ComputerNamePhysicalDnsHostname The DNS host name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS host name of the local computer, not the name of the cluster virtual server. ComputerNamePhysicalNetBIOS The NetBIOS name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the NetBIOS name of the local computer, not the name of the cluster virtual server.",
 "GetComputerObjectName": "The format for the name. This parameter is a value from the EXTENDED_NAME_FORMAT enumeration type. It cannot be NameUnknown.",
 "GetCurrentHwProfile": "A pointer to an HW_PROFILE_INFO structure that receives information about the current hardware profile.",
 "GetFirmwareEnvironmentVariable": "The name of the firmware environment variable. The pointer must not be NULL.",
 "GetFirmwareEnvironmentVariableEx": "The name of the firmware environment variable. The pointer must not be NULL.",
 "GetFirmwareType": "A pointer to a FIRMWARE_TYPE enumeration.",
 "GetIntegratedDisplaySize": "The best estimate of the diagonal size of the built-in screen, in inches.",
 "GetNativeSystemInfo": "A pointer to a SYSTEM_INFO structure that receives the information.",
 "GetProductInfo": "The major version number of the operating system. The minimum value is 6. The combination of the dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, and dwSpMinorVersion parameters describes the maximum target operating system version for the application. For example, Windows Vista and Windows Server 2008 are version 6.0.0.0 and Windows 7 and Windows Server 2008 R2 are version 6.1.0.0.",
 "GetSystemDirectory": "A pointer to the buffer to receive the path. This path does not end with a backslash unless the system directory is the root directory. For example, if the system directory is named Windows\\System32 on drive C, the path of the system directory retrieved by this function is C:\\Windows\\System32.",
 "GetSystemFirmwareTable": "The identifier of the firmware table provider to which the query is to be directed. This parameter can be one of the following values. ValueMeaning 'ACPI'The ACPI firmware table provider. 'FIRM'The raw firmware table provider. 'RSMB'The raw SMBIOS firmware table provider.",
 "GetSystemInfo": "A pointer to a SYSTEM_INFO structure that receives the information.",
 "GetSystemWindowsDirectory": "A pointer to the buffer to receive the path. This path does not end with a backslash unless the Windows directory is the root directory. For example, if the Windows directory is named Windows on drive C, the path of the Windows directory retrieved by this function is C:\\Windows. If the system was installed in the root directory of drive C, the path retrieved is C:\\.",
 "GetSystemWow64Directory": "A pointer to the buffer to receive the path. This path does not end with a backslash.",
 "GetUserName": "A pointer to the buffer to receive the user's logon name. If this buffer is not large enough to contain the entire user name, the function fails. A buffer size of (UNLEN 1) characters will hold the maximum length user name including the terminating null character. UNLEN is defined in Lmcons.h.",
 "GetUserNameEx": "The format of the name. This parameter is a value from the EXTENDED_NAME_FORMAT enumeration type. It cannot be NameUnknown. If the user account is not in a domain, only NameSamCompatible is supported.",
 "GetVersion": null,
 "GetVersionEx": "An OSVERSIONINFO or OSVERSIONINFOEX structure that receives the operating system information. Before calling the GetVersionEx function, set the dwOSVersionInfoSize member of the structure as appropriate to indicate which data structure is being passed to this function.",
 "GetWindowsDirectory": "A pointer to a buffer that receives the path. This path does not end with a backslash unless the Windows directory is the root directory. For example, if the Windows directory is named Windows on drive C, the path of the Windows directory retrieved by this function is C:\\Windows. If the system was installed in the root directory of drive C, the path retrieved is C:\\.",
 "IsNativeVhdBoot": "Pointer to a variable that receives a boolean indicating if the OS was booted from a VHD.",
 "IsProcessorFeaturePresent": "The processor feature to be tested. This parameter can be one of the following values. ValueMeaning PF_ARM_64BIT_LOADSTORE_ATOMIC 25 The 64-bit load/store atomic instructions are available. PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE 24 The divide instructions are available. PF_ARM_EXTERNAL_CACHE_AVAILABLE 26 The external cache is available. PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE 27 The floating-point multiply-accumulate instruction is available. PF_ARM_VFP_32_REGISTERS_AVAILABLE 18 The VFP/Neon: 32 x 64bit register bank is present. This flag has the same meaning as PF_ARM_VFP_EXTENDED_REGISTERS. PF_3DNOW_INSTRUCTIONS_AVAILABLE 7 The 3D-Now instruction set is available. PF_CHANNELS_ENABLED 16 The processor channels are enabled. PF_COMPARE_EXCHANGE_DOUBLE 2 The atomic compare and exchange operation (cmpxchg) is available. PF_COMPARE_EXCHANGE128 14 The atomic compare and exchange 128-bit operation (cmpxchg16b) is available. Windows Server 2003 and Windows XP/2000: This feature is not supported. PF_COMPARE64_EXCHANGE128 15 The atomic compare 64 and exchange 128-bit operation (cmp8xchg16) is available. Windows Server 2003 and Windows XP/2000: This feature is not supported. PF_FASTFAIL_AVAILABLE 23 _fastfail() is available. PF_FLOATING_POINT_EMULATED 1 Floating-point operations are emulated using a software emulator. This function returns a nonzero value if floating-point operations are emulated; otherwise, it returns zero. PF_FLOATING_POINT_PRECISION_ERRATA 0 On a Pentium, a floating-point precision error can occur in rare circumstances. PF_MMX_INSTRUCTIONS_AVAILABLE 3 The MMX instruction set is available. PF_NX_ENABLED 12 Data execution prevention is enabled. Windows XP/2000: This feature is not supported until Windows XP with SP2 and Windows Server 2003 with SP1. PF_PAE_ENABLED 9 The processor is PAE-enabled. For more information, see Physical Address Extension. All x64 processors always return a nonzero value for this feature. PF_RDTSC_INSTRUCTION_AVAILABLE 8 The RDTSC instruction is available. PF_RDWRFSGSBASE_AVAILABLE 22 RDFSBASE, RDGSBASE, WRFSBASE, and WRGSBASE instructions are available. PF_SECOND_LEVEL_ADDRESS_TRANSLATION 20 Second Level Address Translation is supported by the hardware. PF_SSE3_INSTRUCTIONS_AVAILABLE 13 The SSE3 instruction set is available. Windows Server 2003 and Windows XP/2000: This feature is not supported. PF_VIRT_FIRMWARE_ENABLED 21 Virtualization is enabled in the firmware. PF_XMMI_INSTRUCTIONS_AVAILABLE 6 The SSE instruction set is available. PF_XMMI64_INSTRUCTIONS_AVAILABLE 10 The SSE2 instruction set is available. Windows 2000: This feature is not supported. PF_XSAVE_ENABLED 17 The processor implements the XSAVE and XRSTOR instructions. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This feature is not supported until Windows 7 and Windows Server 2008 R2.",
 "RtlGetSuiteMask": null,
 "SetComputerName": "The computer name that will take effect the next time the computer is started. The name must not be longer than MAX_COMPUTERNAME_LENGTH characters. The standard character set includes letters, numbers, and the following symbols: ! @ # $ % ^ & ' ) ( . - _ { } ~ . If this parameter contains one or more characters that are outside the standard character set, SetComputerName returns ERROR_INVALID_PARAMETER.",
 "SetComputerNameEx": "The type of name to be set. This parameter can be one of the following values from the COMPUTER_NAME_FORMAT enumeration type. ValueMeaning ComputerNamePhysicalDnsDomain Sets the primary DNS suffix of the computer. ComputerNamePhysicalDnsHostname Sets the NetBIOS and the Computer Name (the first label of the full DNS name) to the name specified in lpBuffer. If the name exceeds MAX_COMPUTERNAME_LENGTH characters, the NetBIOS name is truncated to MAX_COMPUTERNAME_LENGTH characters, not including the terminating null character. ComputerNamePhysicalNetBIOS Sets the NetBIOS name to the name specified in lpBuffer. The name cannot exceed MAX_COMPUTERNAME_LENGTH characters, not including the terminating null character. Warning: Using this option to set the NetBIOS name breaks the convention of interdependent NetBIOS and DNS names. Applications that use the DnsHostnameToComputerName function to derive the NetBIOS name from the first label of the DNS name will fail if this convention is broken.",
 "SetFirmwareEnvironmentVariable": "The name of the firmware environment variable. The pointer must not be NULL.",
 "SetFirmwareEnvironmentVariableEx": "The name of the firmware environment variable. The pointer must not be NULL.",
 "TranslateName": "The name to be translated.",
 "VerifyVersionInfo": "A pointer to an OSVERSIONINFOEX structure containing the operating system version requirements to compare. The dwTypeMask parameter indicates the members of this structure that contain information to compare. You must set the dwOSVersionInfoSize member of this structure to sizeof(OSVERSIONINFOEX). You must also specify valid data for the members indicated by dwTypeMask. The function ignores structure members for which the corresponding dwTypeMask bit is not set.",
 "VerSetConditionMask": "A value to be passed as the dwlConditionMask parameter of the VerifyVersionInfo function. The function stores the comparison information in the bits of this variable. Before the first call to VerSetCondition, initialize this variable to zero. For subsequent calls, pass in the variable used in the previous call.",
 "NtQuerySystemInformation": "One of the values enumerated in SYSTEM_INFORMATION_CLASS, which indicate the kind of system information to be retrieved. These include the following values. SystemBasicInformation Returns the number of processors in the system in a SYSTEM_BASIC_INFORMATION structure. Use the GetSystemInfo function instead. SystemCodeIntegrityInformation Returns a SYSTEM_CODEINTEGRITY_INFORMATION structure that can be used to determine the options being enforced by Code Integrity on the system. SystemExceptionInformation Returns an opaque SYSTEM_EXCEPTION_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemInterruptInformation Returns an opaque SYSTEM_INTERRUPT_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemLookasideInformation Returns an opaque SYSTEM_LOOKASIDE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemPerformanceInformation Returns an opaque SYSTEM_PERFORMANCE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemProcessInformation Returns an array of SYSTEM_PROCESS_INFORMATION structures, one for each process running in the system. These structures contain information about the resource usage of each process, including the number of handles used by the process, the peak page-file usage, and the number of memory pages that the process has allocated. SystemProcessorPerformanceInformation Returns an array of SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION structures, one for each processor installed in the system. SystemQueryPerformanceCounterInformation Returns a SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION structure that can be used to determine whether the system requires a kernel transition to retrieve the high-resolution performance counter information through a QueryPerformanceCounter function call. SystemRegistryQuotaInformation Returns a SYSTEM_REGISTRY_QUOTA_INFORMATION structure. SystemTimeOfDayInformation Returns an opaque SYSTEM_TIMEOFDAY_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemPolicyInformation Returns policy information in a SYSTEM_POLICY_INFORMATION structure. Use the SLGetWindowsInformation function instead to obtain policy information.",
 "ZwQuerySystemInformation": "The type of system information to be retrieved. This parameter can be one of the following values from the SYSTEM_INFORMATION_CLASS enumeration type. SystemBasicInformation The number of processors in the system in a SYSTEM_BASIC_INFORMATION structure. Use the GetSystemInfo function instead. SystemPerformanceInformation An opaque SYSTEM_PERFORMANCE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemTimeOfDayInformation An opaque SYSTEM_TIMEOFDAY_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemProcessInformation An array of SYSTEM_PROCESS_INFORMATION structures, one for each process running in the system. These structures contain information about the resource usage of each process, including the number of handles used by the process, the peak page-file usage, and the number of memory pages that the process has allocated. SystemProcessorPerformanceInformation An array of SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION structures, one for each processor installed in the system. SystemInterruptInformation An opaque SYSTEM_INTERRUPT_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemExceptionInformation An opaque SYSTEM_EXCEPTION_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead. SystemRegistryQuotaInformation A SYSTEM_REGISTRY_QUOTA_INFORMATION structure. SystemLookasideInformation An opaque SYSTEM_LOOKASIDE_INFORMATION structure that can be used to generate an unpredictable seed for a random number generator. Use the CryptGenRandom function instead.",
 "CreateDialog": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
 "CreateDialogIndirect": "Type: HINSTANCE A handle to the module that creates the dialog box.",
 "CreateDialogIndirectParam": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
 "CreateDialogParam": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
 "DefDlgProc": "Type: HWND A handle to the dialog box.",
 "DialogBox": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
 "DialogBoxIndirect": "Type: HINSTANCE A handle to the module that creates the dialog box.",
 "DialogBoxIndirectParam": "Type: HINSTANCE A handle to the module that creates the dialog box.",
 "DialogBoxParam": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
 "DialogProc": "Type: HWND A handle to the dialog box.",
 "EndDialog": "Type: HWND A handle to the dialog box to be destroyed.",
 "GetDialogBaseUnits": null,
 "GetDlgCtrlID": "Type: HWND A handle to the control.",
 "GetDlgItem": "Type: HWND A handle to the dialog box that contains the control.",
 "GetDlgItemInt": "Type: HWND A handle to the dialog box that contains the control of interest.",
 "GetDlgItemText": "Type: HWND A handle to the dialog box that contains the control.",
 "GetNextDlgGroupItem": "Type: HWND A handle to the dialog box to be searched.",
 "GetNextDlgTabItem": "Type: HWND A handle to the dialog box to be searched.",
 "IsDialogMessage": "Type: HWND A handle to the dialog box.",
 "MapDialogRect": "Type: HWND A handle to a dialog box. This function accepts only handles returned by one of the dialog box creation functions; handles for other windows are not valid.",
 "MessageBox": "Type: HWND A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.",
 "MessageBoxEx": "Type: HWND A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.",
 "MessageBoxIndirect": "Type: const LPMSGBOXPARAMS A pointer to a MSGBOXPARAMS structure that contains information used to display the message box.",
 "SendDlgItemMessage": "Type: HWND A handle to the dialog box that contains the control.",
 "SetDlgItemInt": "Type: HWND A handle to the dialog box that contains the control.",
 "SetDlgItemText": "Type: HWND A handle to the dialog box that contains the control.",
 "IsDestinationReachable": "A pointer to a null-terminated string that specifies a destination. The destination can be an IP address, UNC name, or URL.",
 "IsNetworkAlive": "The type of network connection that is available. This parameter can be one of the following values: NETWORK_ALIVE_LAN The computer has one or more LAN cards that are active. NETWORK_ALIVE_WAN The computer has one or more active RAS connections.",
 "AddAtom": "Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Strings differing only in case are considered identical. The case of the first string added is preserved and returned by the GetAtomName function. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See the Remarks for more information.",
 "DeleteAtom": "Type: ATOM The atom to be deleted.",
 "FindAtom": "Type: LPCTSTR The character string for which to search. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See Remarks for more information.",
 "GetAtomName": "Type: ATOM The local atom that identifies the character string to be retrieved.",
 "GlobalAddAtom": "Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Strings that differ only in case are considered identical. The case of the first string of this name added to the table is preserved and returned by the GlobalGetAtomName function. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See the Remarks for more information.",
 "GlobalDeleteAtom": "Type: ATOM The atom and character string to be deleted.",
 "GlobalFindAtom": "Type: LPCTSTR The null-terminated character string for which to search. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See the Remarks for more information.",
 "GlobalGetAtomName": "Type: ATOM The global atom associated with the character string to be retrieved.",
 "InitAtomTable": "Type: DWORD The number of hash buckets to use for the atom table. If this parameter is zero, the default number of hash buckets are created. To achieve better performance, specify a prime number in \t\t\t\t\tnSize.",
 "acmDriverAdd": "Pointer to the buffer that receives a handle identifying the installed driver. This handle is used to identify the driver in calls to other ACM functions.",
 "acmDriverClose": "Handle to the open driver instance to be closed.",
 "acmDriverDetails": "Handle to the driver identifier of an installed ACM driver. Disabled drivers can be queried for details.",
 "acmDriverEnum": "Procedure instance address of the application-defined callback function.",
 "acmDriverEnumCallback": "Handle to an ACM driver identifier.",
 "acmDriverID": "Handle to the open driver instance or stream handle. This is the handle of an ACM object, such as HACMDRIVER or HACMSTREAM.",
 "acmDriverMessage": "Handle to the ACM driver instance to which the message will be sent.",
 "acmDriverOpen": "Pointer to a buffer that receives the new driver instance handle that can be used to communicate with the driver.",
 "acmDriverPriority": "Handle to the driver identifier of an installed ACM driver. If the ACM_DRIVERPRIORITYF_BEGIN and ACM_DRIVERPRIORITYF_END flags are specified, this parameter must be NULL.",
 "acmDriverProc": "Identifier of the installable ACM driver.",
 "acmDriverRemove": "Handle to the driver identifier to be removed.",
 "acmFilterChoose": "Pointer to an ACMFILTERCHOOSE structure that contains information used to initialize the dialog box. When acmFilterChoose returns, this structure contains information about the user's filter selection. The pwfltr member of this structure must contain a valid pointer to a memory location that will contain the returned filter header structure. The cbwfltr member must be filled in with the size, in bytes, of this memory buffer.",
 "acmFilterChooseHookProc": "Window handle for the dialog box.",
 "acmFilterDetails": "Handle to the ACM driver to query for waveform-audio filter details for a filter tag. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.",
 "acmFilterEnum": "Handle to the ACM driver to query for waveform-audio filter details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.",
 "acmFilterEnumCallback": "Handle to the ACM driver identifier.",
 "acmFilterTagDetails": "Handle to the ACM driver to query for waveform-audio filter tag details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver. An application must specify a valid HACMDRIVER or HACMDRIVERID identifier when using the ACM_FILTERTAGDETAILSF_INDEX query type. Driver identifiers for disabled drivers are not allowed.",
 "acmFilterTagEnum": "Handle to the ACM driver to query for waveform-audio filter tag details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.",
 "acmFilterTagEnumCallback": "Handle to the ACM driver identifier.",
 "acmFormatChoose": "Pointer to an ACMFORMATCHOOSE structure that contains information used to initialize the dialog box. When this function returns, this structure contains information about the user's format selection. The pwfx member of this structure must contain a valid pointer to a memory location that will contain the returned format header structure. Moreover, the cbwfx member must be filled in with the size, in bytes, of this memory buffer.",
 "acmFormatChooseHookProc": "Window handle for the dialog box.",
 "acmFormatDetails": "Handle to the ACM driver to query for waveform-audio format details for a format tag. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.",
 "acmFormatEnum": "Handle to the ACM driver to query for waveform-audio format details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.",
 "acmFormatEnumCallback": "Handle to the ACM driver identifier.",
 "acmFormatSuggest": "Handle to an open instance of a driver to query for a suggested destination format. If this parameter is NULL, the ACM attempts to find the best driver to suggest a destination format.",
 "acmFormatTagDetails": "Handle to the ACM driver to query for waveform-audio format tag details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver. An application must specify a valid handle or driver identifier when using the ACM_FORMATTAGDETAILSF_INDEX query type. Driver identifiers for disabled drivers are not allowed.",
 "acmFormatTagEnum": "Handle to the ACM driver to query for waveform-audio format tag details. If this parameter is NULL, the ACM uses the details from the first suitable ACM driver.",
 "acmFormatTagEnumCallback": "Handle to the ACM driver identifier.",
 "acmGetVersion": null,
 "acmMetrics": "Handle to the ACM object to query for the metric specified in uMetric. For some queries, this parameter can be NULL.",
 "acmStreamClose": "Handle to the open conversion stream to be closed.",
 "acmStreamConvert": "Handle to the open conversion stream.",
 "acmStreamConvertCallback": "Handle to the ACM conversion stream associated with the callback function.",
 "acmStreamMessage": "Handle to an open conversion stream.",
 "acmStreamOpen": "Pointer to a handle that will receive the new stream handle that can be used to perform conversions. This handle is used to identify the stream in calls to other ACM stream conversion functions. If the ACM_STREAMOPENF_QUERY flag is specified, this parameter should be NULL.",
 "acmStreamPrepareHeader": "Handle to the conversion steam.",
 "acmStreamReset": "Handle to the conversion stream.",
 "acmStreamSize": "Handle to the conversion stream.",
 "acmStreamUnprepareHeader": "Handle to the conversion steam.",
 "auxGetDevCaps": "Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant: Value Meaning AUX_MAPPERAuxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.",
 "auxGetNumDevs": null,
 "auxGetVolume": "Identifier of the auxiliary output device to be queried.",
 "auxOutMessage": "Identifier of the auxiliary output device to receive the message.",
 "auxSetVolume": "Identifier of the auxiliary output device to be queried. Device identifiers are determined implicitly from the number of devices present in the system. Device identifier values range from zero to one less than the number of devices present. Use the auxGetNumDevs function to determine the number of auxiliary devices in the system.",
 "AVIBuildFilter": "Pointer to the buffer containing the filter string.",
 "AVIClearClipboard": null,
 "AVIFileAddRef": "Handle to an open AVI file.",
 "AVIFileCreateStream": "Handle to an open AVI file.",
 "AVIFileEndRecord": "Handle to an open AVI file.",
 "AVIFileExit": null,
 "AVIFileGetStream": "Handle to an open AVI file.",
 "AVIFileInfo": "Handle to an open AVI file.",
 "AVIFileInit": null,
 "AVIFileOpen": "Pointer to a buffer that receives the new IAVIFile interface pointer.",
 "AVIFileReadData": "Handle to an open AVI file.",
 "AVIFileRelease": "Handle to an open AVI file.",
 "AVIFileWriteData": "Handle to an open AVI file.",
 "AVIGetFromClipboard": "Pointer to the location used to return the handle created for the AVI file.",
 "AVIMakeCompressedStream": "Pointer to a buffer that receives the compressed stream pointer.",
 "AVIMakeFileFromStreams": "Pointer to a buffer that receives the new file interface pointer.",
 "AVIMakeStreamFromClipboard": "Clipboard flag.",
 "AVIPutFileOnClipboard": "Handle to an open AVI file.",
 "AVISave": "Null-terminated string containing the name of the file to save.",
 "AVISaveOptions": "Handle to the parent window for the Compression Options dialog box.",
 "AVISaveOptionsFree": "Count of the AVICOMPRESSOPTIONS structures referenced in plpOptions.",
 "AVISaveV": "Null-terminated string containing the name of the file to save.",
 "AVIStreamAddRef": "Handle to an open AVI stream.",
 "AVIStreamBeginStreaming": "Pointer to a stream.",
 "AVIStreamCreate": "Pointer to a buffer that receives the new stream interface.",
 "AVIStreamEndStreaming": "Pointer to a stream.",
 "AVIStreamFindSample": "Handle to an open stream.",
 "AVIStreamGetFrame": "Pointer to the IGetFrame interface.",
 "AVIStreamGetFrameClose": "Handle returned from the AVIStreamGetFrameOpen function. After calling this function, the handle is invalid.",
 "AVIStreamGetFrameOpen": "Pointer to the video stream used as the video source.",
 "AVIStreamInfo": "Handle to an open stream.",
 "AVIStreamLength": "Handle to an open stream.",
 "AVIStreamOpenFromFile": "Pointer to a buffer that receives the new stream handle.",
 "AVIStreamRead": "Handle to an open stream.",
 "AVIStreamReadData": "Handle to an open stream.",
 "AVIStreamReadFormat": "Handle to an open stream.",
 "AVIStreamRelease": "Handle to an open stream.",
 "AVIStreamSampleToTime": "Handle to an open stream.",
 "AVIStreamSetFormat": "Handle to an open stream.",
 "AVIStreamStart": "Handle to an open stream.",
 "AVIStreamTimeToSample": "Handle to an open stream.",
 "AVIStreamWrite": "Handle to an open stream.",
 "AVIStreamWriteData": "Handle to an open stream.",
 "capControlCallback": "Handle to the capture window associated with the callback function.",
 "capCreateCaptureWindow": "Null-terminated string containing the name used for the capture window.",
 "capErrorCallback": "Handle to the capture window associated with the callback function.",
 "capGetDriverDescription": "Index of the capture driver. The index can range from 0 through 9. Plug-and-Play capture drivers are enumerated first, followed by capture drivers listed in the registry, which are then followed by capture drivers listed in SYSTEM.INI.",
 "capStatusCallback": "Handle to the capture window associated with the callback function.",
 "capVideoStreamCallback": "Handle to the capture window associated with the callback function.",
 "capWaveStreamCallback": "Handle to the capture window associated with the callback function.",
 "capYieldCallback": "Handle to the capture window associated with the callback function.",
 "CreateEditableStream": "Pointer to a buffer that receives the new stream handle.",
 "DllGetClassObject": "Class identifier of the file or stream handler.",
 "DrawDibBegin": "Handle to a DrawDib DC.",
 "DrawDibChangePalette": "Handle to a DrawDib DC.",
 "DrawDibClose": "Handle to a DrawDib DC.",
 "DrawDibDraw": "Handle to a DrawDib DC.",
 "DrawDibEnd": "Handle to the DrawDib DC to free.",
 "DrawDibGetBuffer": "Handle to a DrawDib DC.",
 "DrawDibGetPalette": "Handle to a DrawDib DC.",
 "DrawDibOpen": null,
 "DrawDibProfileDisplay": "Pointer to a BITMAPINFOHEADER structure that contains bitmap information. You can also specify NULL to verify that the profile information is current. If the profile information is not current, DrawDib will rerun the profile tests to obtain a current set of information. When you call DrawDibProfileDisplay with this parameter set to NULL, the return value is meaningless.",
 "DrawDibRealize": "Handle to a DrawDib DC.",
 "DrawDibSetPalette": "Handle to a DrawDib DC.",
 "DrawDibStart": "Handle to a DrawDib DC.",
 "DrawDibStop": "Handle to a DrawDib DC.",
 "DrawDibTime": "Handle to a DrawDib DC.",
 "EditStreamClone": "Handle to an editable stream that will be copied.",
 "EditStreamCopy": "Handle to the stream being copied.",
 "EditStreamCut": "Handle to the stream being edited.",
 "EditStreamPaste": "Handle to an editable stream that will receive the copied stream data.",
 "EditStreamSetInfo": "Handle to an open stream.",
 "EditStreamSetName": "Handle to an open stream.",
 "GetOpenFileNamePreview": "Pointer to an OPENFILENAME structure used to initialize the dialog box. On return, the structure contains information about the user's file selection.",
 "GetSaveFileNamePreview": "Pointer to an OPENFILENAME structure used to initialize the dialog box. On return, the structure contains information about the user's file selection.",
 "ICClose": "Handle to a compressor or decompressor.",
 "ICCompress": "Handle to the compressor to use.",
 "ICCompressorChoose": "Handle to a parent window for the dialog box.",
 "ICCompressorFree": "Pointer to the COMPVARS structure containing the resources to be freed.",
 "ICDecompress": "Handle to the decompressor to use.",
 "ICDecompressEx": "Handle to the decompressor.",
 "ICDecompressExBegin": "Handle to the decompressor to use.",
 "ICDecompressExQuery": "Handle to the decompressor to use.",
 "ICDraw": "Handle to an decompressor.",
 "ICDrawBegin": "Handle to the decompressor to use.",
 "ICDrawSuggestFormat": "Handle to the driver to use.",
 "ICGetDisplayFormat": "Handle to the compressor to use. Specify NULL to have VCM select and open an appropriate compressor.",
 "ICGetInfo": "Handle to a compressor.",
 "ICImageCompress": "Handle to a compressor opened with the ICOpen function. Specify NULL to have VCM select an appropriate compressor for the compression format. An application can have the user select the compressor by using the ICCompressorChoose function, which opens the selected compressor and returns a handle of the compressor in this parameter.",
 "ICImageDecompress": "Handle to a decompressor opened with the ICOpen function. Specify NULL to have VCM select an appropriate decompressor for the compressed image.",
 "ICInfo": "Four-character code indicating the type of compressor. Specify zero to match all compressor types.",
 "ICInstall": "Four-character code indicating the type of data used by the compressor or decompressor. Specify \"VIDC\" for a video compressor or decompressor.",
 "ICLocate": "Four-character code indicating the type of compressor or decompressor to open. For video streams, the value of this parameter is 'VIDC'.",
 "ICOpen": "Four-character code indicating the type of compressor or decompressor to open. For video streams, the value of this parameter is \"VIDC\".",
 "ICOpenFunction": "Type of compressor to open. For video, the value of this parameter is ICTYPE_VIDEO.",
 "ICRemove": "Four-character code indicating the type of data used by the compressor or decompressor. Specify \"VIDC\" for a video compressor or decompressor.",
 "ICSendMessage": "Handle to the compressor to receive the message.",
 "ICSeqCompressFrame": "Pointer to a COMPVARS structure initialized with information about the compression.",
 "ICSeqCompressFrameEnd": "Pointer to a COMPVARS structure used during sequence compression.",
 "ICSeqCompressFrameStart": "Pointer to a COMPVARS structure initialized with information for compression.",
 "ICSetStatusProc": "Handle to the compressor.",
 "IOProc": "Pointer to an MMIOINFO structure containing information about the open file. The I/O procedure must maintain the lDiskOffset member in this structure to indicate the file offset to the next read or write location. The I/O procedure can use the adwInfo member to store state information. The I/O procedure should not modify any other members of the MMIOINFO structure.",
 "joyConfigChanged": "Reserved for future use. Must equal zero.",
 "joyGetDevCaps": "Identifier of the joystick to be queried. Valid values for uJoyID range from -1 to 15. A value of -1 enables retrieval of the szRegKey member of the JOYCAPS structure whether a device is present or not.",
 "joyGetNumDevs": null,
 "joyGetPos": "Identifier of the joystick to be queried. Valid values for uJoyID range from zero (JOYSTICKID1) to 15.",
 "joyGetPosEx": "Identifier of the joystick to be queried. Valid values for uJoyID range from zero (JOYSTICKID1) to 15.",
 "joyGetThreshold": "Identifier of the joystick. Valid values for uJoyID range from zero (JOYSTICKID1) to 15.",
 "joyReleaseCapture": "Identifier of the joystick to be released. Valid values for uJoyID range from zero (JOYSTICKID1) to 15.",
 "joySetCapture": "Handle to the window to receive the joystick messages.",
 "joySetThreshold": "Identifier of the joystick. Valid values for uJoyID range from zero (JOYSTICKID1) to 15.",
 "mciExecute": "Pointer to a null-terminated string that specifies an MCI command string.",
 "mciGetCreatorTask": "Device for which the creator task is returned.",
 "mciGetDeviceID": "Pointer to a null-terminated string that specifies the device name or the alias name by which the device is known.",
 "mciGetDeviceIDFromElementID": "The element identifier.",
 "mciGetErrorString": "Error code returned by the mciSendCommand or mciSendString function.",
 "mciGetYieldProc": "MCI device being monitored (the device performing an MCI command).",
 "mciSendCommand": "Device identifier of the MCI device that is to receive the command message. This parameter is not used with the MCI_OPEN command message.",
 "mciSendString": "Pointer to a null-terminated string that specifies an MCI command string. For a list, see Multimedia Command Strings.",
 "mciSetYieldProc": "Identifier of the device to assign a procedure to.",
 "MCIWndCreate": "Handle to the parent window.",
 "MCIWndRegisterClass": "Handle to the device instance.",
 "midiConnect": "Handle to a MIDI input device or a MIDI thru device. (For thru devices, this handle must have been returned by a call to the midiOutOpen function.)",
 "midiDisconnect": "Handle to a MIDI input device or a MIDI thru device.",
 "midiInAddBuffer": "Handle to the MIDI input device.",
 "midiInClose": "Handle to the MIDI input device. If the function is successful, the handle is no longer valid after the call to this function.",
 "midiInGetDevCaps": "Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.",
 "midiInGetErrorText": "Error code.",
 "midiInGetID": "Handle to the MIDI input device.",
 "midiInGetNumDevs": null,
 "midiInMessage": "Identifier of the MIDI device that receives the message. You must cast the device ID to the HMIDIIN handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.",
 "midiInOpen": "Pointer to an HMIDIIN handle. This location is filled with a handle identifying the opened MIDI input device. The handle is used to identify the device in calls to other MIDI input functions.",
 "midiInPrepareHeader": "Handle to the MIDI input device. To get the device handle, call midiInOpen.",
 "MidiInProc": "Handle to the MIDI input device.",
 "midiInReset": "Handle to the MIDI input device.",
 "midiInStart": "Handle to the MIDI input device.",
 "midiInStop": "Handle to the MIDI input device.",
 "midiInUnprepareHeader": "Handle to the MIDI input device.",
 "midiOutCacheDrumPatches": "Handle to the opened MIDI output device. This device should be an internal MIDI synthesizer. This parameter can also be the handle of a MIDI stream, cast to HMIDIOUT.",
 "midiOutCachePatches": "Handle to the opened MIDI output device. This device must be an internal MIDI synthesizer. This parameter can also be the handle of a MIDI stream, cast to HMIDIOUT.",
 "midiOutClose": "Handle to the MIDI output device. If the function is successful, the handle is no longer valid after the call to this function.",
 "midiOutGetDevCaps": "Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier. This parameter can also be a properly cast device handle.",
 "midiOutGetErrorText": "Error code.",
 "midiOutGetID": "Handle to the MIDI output device.",
 "midiOutGetNumDevs": null,
 "midiOutGetVolume": "Handle to an open MIDI output device. This parameter can also contain the handle of a MIDI stream, as long as it is cast to HMIDIOUT. This parameter can also be a device identifier.",
 "midiOutLongMsg": "Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to HMIDIOUT.",
 "midiOutMessage": "Identifier of the MIDI device that receives the message. You must cast the device ID to the HMIDIOUT handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.",
 "midiOutOpen": "Pointer to an HMIDIOUT handle. This location is filled with a handle identifying the opened MIDI output device. The handle is used to identify the device in calls to other MIDI output functions.",
 "midiOutPrepareHeader": "Handle to the MIDI output device. To get the device handle, call midiOutOpen. This parameter can also be the handle of a MIDI stream cast to a HMIDIOUT type.",
 "MidiOutProc": "Handle to the MIDI device associated with the callback function.",
 "midiOutReset": "Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to HMIDIOUT.",
 "midiOutSetVolume": "Handle to an open MIDI output device. This parameter can also contain the handle of a MIDI stream, as long as it is cast to HMIDIOUT. This parameter can also be a device identifier.",
 "midiOutShortMsg": "Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to HMIDIOUT.",
 "midiOutUnprepareHeader": "Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to HMIDIOUT.",
 "midiStreamClose": "Handle to a MIDI stream, as retrieved by using the midiStreamOpen function.",
 "midiStreamOpen": "Pointer to a variable to contain the stream handle when the function returns.",
 "midiStreamOut": "Handle to a MIDI stream. This handle must have been returned by a call to the midiStreamOpen function. This handle identifies the output device.",
 "midiStreamPause": "Handle to a MIDI stream. This handle must have been returned by a call to the MIDIEVENT function. This handle identifies the output device.",
 "midiStreamPosition": "Handle to a MIDI stream. This handle must have been returned by a call to the midiStreamOpen function. This handle identifies the output device.",
 "midiStreamProperty": "Handle to the MIDI device that the property is associated with.",
 "midiStreamRestart": "Handle to a MIDI stream. This handle must have been returned by a call to the midiStreamOpen function. This handle identifies the output device.",
 "midiStreamStop": "Handle to a MIDI stream. This handle must have been returned by a call to the midiStreamOpen function. This handle identifies the output device.",
 "mixerClose": "Handle to the mixer device. This handle must have been returned successfully by the mixerOpen function. If mixerClose is successful, hmx is no longer valid.",
 "mixerGetControlDetails": "Handle to the mixer device object being queried.",
 "mixerGetDevCaps": "Identifier or handle of an open mixer device.",
 "mixerGetID": "Handle to the audio mixer object to map to a mixer device identifier.",
 "mixerGetLineControls": "Handle to the mixer device object that is being queried.",
 "mixerGetLineInfo": "Handle to the mixer device object that controls the specific audio line.",
 "mixerGetNumDevs": null,
 "mixerMessage": "Identifier of the mixer that receives the message. You must cast the device ID to the HMIXER handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.",
 "mixerOpen": "Pointer to a variable that will receive a handle identifying the opened mixer device. Use this handle to identify the device when calling other audio mixer functions. This parameter cannot be NULL.",
 "mixerSetControlDetails": "Handle to the mixer device object for which properties are being set.",
 "mmGetCurrentTask": null,
 "mmioAdvance": "File handle of a file opened by using the mmioOpen function.",
 "mmioAscend": "File handle of an open RIFF file.",
 "mmioClose": "File handle of the file to close.",
 "mmioCreateChunk": "File handle of an open RIFF file.",
 "mmioDescend": "File handle of an open RIFF file.",
 "mmioFlush": "File handle of a file opened by using the mmioOpen function.",
 "mmioGetInfo": "File handle of the file.",
 "mmioInstallIOProc": "Four-character code identifying the I/O procedure to install, remove, or locate. All characters in this code should be uppercase.",
 "mmioOpen": "Pointer to a buffer that contains the name of the file. If no I/O procedure is specified to open the file, the file name determines how the file is opened, as follows: If the file name does not contain a plus sign (+), it is assumed to be the name of a standard file (that is, a file whose type is not HMMIO). If the file name is of the form EXAMPLE.EXT+ABC, the extension EXT is assumed to identify an installed I/O procedure which is called to perform I/O on the file. For more information, see mmioInstallIOProc. If the file name is NULL and no I/O procedure is given, the adwInfo member of the MMIOINFO structure is assumed to be the standard (non-HMMIO) file handle of a currently open file. The file name should not be longer than 128 characters, including the terminating NULL character. When opening a memory file, set szFilename to NULL.",
 "MMIOProc": "Points to an MMIOINFO structure containing information about the open file. The I/O procedure must maintain the lDiskOffset member in this structure to indicate the file offset to the next read or write location. The I/O procedure can use the adwInfo[] member to store state information. The I/O procedure should not modify any other members of the MMIOINFO structure.",
 "mmioRead": "File handle of the file to be read.",
 "mmioRename": "Pointer to a string containing the file name of the file to rename.",
 "mmioSeek": "File handle of the file to seek in.",
 "mmioSendMessage": "File handle for a file opened by using the mmioOpen function.",
 "mmioSetBuffer": "File handle of the file.",
 "mmioSetInfo": "File handle of the file.",
 "mmioStringToFOURCC": "Pointer to a null-terminated string to convert to a four-character code.",
 "mmioWrite": "File handle of the file.",
 "mmsystemGetVersion": null,
 "mmTaskBlock": "Reserved.",
 "mmTaskCreate": "Reserved.",
 "mmTaskSignal": "Reserved.",
 "mmTaskYield": null,
 "MyStatusProc": "Constant specified with the status callback address.",
 "PlaySound": "A string that specifies the sound to play. The maximum length, including the null terminator, is 256 characters. If this parameter is NULL, any currently playing waveform sound is stopped. To stop a non-waveform sound, specify SND_PURGE in the fdwSound parameter. Three flags in fdwSound (SND_ALIAS, SND_FILENAME, and SND_RESOURCE) determine whether the name is interpreted as an alias for a system event, a file name, or a resource identifier. If none of these flags are specified, PlaySound searches the registry or the WIN.INI file for an association with the specified sound name. If an association is found, the sound event is played. If no association is found in the registry, the name is interpreted as a file name.",
 "sndOpenSound": "The name of the sound event.",
 "sndPlaySound": "A string that specifies the sound to play. This parameter can be either an entry in the registry or in WIN.INI that identifies a system sound, or it can be the name of a waveform-audio file. (If the function does not find the entry, the parameter is treated as a file name.) If this parameter is NULL, any currently playing sound is stopped.",
 "StretchDIB": "Pointer to a BITMAPINFOHEADER structure that describes the destination bitmap.",
 "timeBeginPeriod": "Minimum timer resolution, in milliseconds, for the application or device driver. A lower value specifies a higher (more accurate) resolution.",
 "timeEndPeriod": "Minimum timer resolution specified in the previous call to the timeBeginPeriod function.",
 "timeGetDevCaps": "A pointer to a TIMECAPS structure. This structure is filled with information about the resolution of the timer device.",
 "timeGetSystemTime": "Pointer to an MMTIME structure.",
 "timeGetTime": null,
 "timeKillEvent": "Identifier of the timer event to cancel. This identifier was returned by the timeSetEvent function when the timer event was set up.",
 "TimeProc": "Identifier of the timer event. This identifier was returned by the timeSetEvent function when the timer event was set up.",
 "timeSetEvent": "Event delay, in milliseconds. If this value is not in the range of the minimum and maximum event delays supported by the timer, the function returns an error.",
 "waveInAddBuffer": "Handle to the waveform-audio input device.",
 "waveInClose": "Handle to the waveform-audio input device. If the function succeeds, the handle is no longer valid after this call.",
 "waveInGetDevCaps": "Identifier of the waveform-audio output device. It can be either a device identifier or a handle of an open waveform-audio input device.",
 "waveInGetErrorText": "Error number.",
 "waveInGetID": "Handle to the waveform-audio input device.",
 "waveInGetNumDevs": null,
 "waveInGetPosition": "Handle to the waveform-audio input device.",
 "waveInMessage": "Identifier of the waveform device that receives the message. You must cast the device ID to the HWAVEIN handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.",
 "waveInOpen": "Pointer to a buffer that receives a handle identifying the open waveform-audio input device. Use this handle to identify the device when calling other waveform-audio input functions. This parameter can be NULL if WAVE_FORMAT_QUERY is specified for fdwOpen.",
 "waveInPrepareHeader": "Handle to the waveform-audio input device.",
 "waveInProc": "Handle to the waveform-audio device associated with the callback function.",
 "waveInReset": "Handle to the waveform-audio input device.",
 "waveInStart": "Handle to the waveform-audio input device.",
 "waveInStop": "Handle to the waveform-audio input device.",
 "waveInUnprepareHeader": "Handle to the waveform-audio input device.",
 "waveOutBreakLoop": "Handle to the waveform-audio output device.",
 "waveOutClose": "Handle to the waveform-audio output device. If the function succeeds, the handle is no longer valid after this call.",
 "waveOutGetDevCaps": "Identifier of the waveform-audio output device. It can be either a device identifier or a handle of an open waveform-audio output device.",
 "waveOutGetErrorText": "Error number.",
 "waveOutGetID": "Handle to the waveform-audio output device.",
 "waveOutGetNumDevs": null,
 "waveOutGetPitch": "Handle to the waveform-audio output device.",
 "waveOutGetPlaybackRate": "Handle to the waveform-audio output device.",
 "waveOutGetPosition": "Handle to the waveform-audio output device.",
 "waveOutGetVolume": "Handle to an open waveform-audio output device. This parameter can also be a device identifier.",
 "waveOutMessage": "Identifier of the waveform device that receives the message. You must cast the device ID to the HWAVEOUT handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.",
 "waveOutOpen": "Pointer to a buffer that receives a handle identifying the open waveform-audio output device. Use the handle to identify the device when calling other waveform-audio output functions. This parameter might be NULL if the WAVE_FORMAT_QUERY flag is specified for fdwOpen.",
 "waveOutPause": "Handle to the waveform-audio output device.",
 "waveOutPrepareHeader": "Handle to the waveform-audio output device.",
 "waveOutProc": "Handle to the waveform-audio device associated with the callback.",
 "waveOutReset": "Handle to the waveform-audio output device.",
 "waveOutRestart": "Handle to the waveform-audio output device.",
 "waveOutSetPitch": "Handle to the waveform-audio output device.",
 "waveOutSetPlaybackRate": "Handle to the waveform-audio output device.",
 "waveOutSetVolume": "Handle to an open waveform-audio output device. This parameter can also be a device identifier.",
 "waveOutUnprepareHeader": "Handle to the waveform-audio output device.",
 "waveOutWrite": "Handle to the waveform-audio output device.",
 "MultinetGetConnectionPerformance": "A pointer to a NETRESOURCE structure that specifies the network resource. The following members have specific meanings in this context. MemberMeaning lpLocalName A pointer to a buffer that specifies a local device, such as \"F:\" or \"LPT1\", that is redirected to a network resource to be queried. If this member is NULL or an empty string, the network resource is specified in the lpRemoteName member. If this flag specifies a local device, lpRemoteName is ignored. lpRemoteName A pointer to a network resource to query. The resource must currently have an established connection. For example, if the resource is a file on a file server, then having the file open will ensure the connection. lpProvider Usually set to NULL, but can be a pointer to the owner (provider) of the resource if the network on which the resource resides is known. If the lpProvider member is not NULL, the system attempts to return information only about the named network.",
 "WNetCloseEnum": "Handle that identifies an enumeration instance. This handle must be returned by the WNetOpenEnum function.",
 "WNetConnectionDialog": "Handle to the owner window for the dialog box.",
 "WNetConnectionDialog1": "Pointer to a CONNECTDLGSTRUCT structure. The structure establishes the browsing dialog parameters.",
 "WNetDisconnectDialog": "Handle to the owner window for the dialog box.",
 "WNetDisconnectDialog1": "Pointer to a DISCDLGSTRUCT structure. The structure specifies the behavior for the disconnect attempt.",
 "WNetEnumResource": "Handle that identifies an enumeration instance. This handle must be returned by the WNetOpenEnum function.",
 "WNetGetConnection": "Pointer to a constant null-terminated string that specifies the name of the local device to get the network name for.",
 "WNetGetLastError": "Pointer to a variable that receives the error code reported by the network provider. The error code is specific to the network provider.",
 "WNetGetNetworkInformation": "Pointer to a constant null-terminated string that contains the name of the network provider for which information is required.",
 "WNetGetProviderName": "Network type that is unique to the network. If two networks claim the same type, the function returns the name of the provider loaded first. Only the high word of the network type is used. If a network reports a subtype in the low word, it is ignored. You can find a complete list of network types in the header file Winnetwk.h.",
 "WNetGetResourceInformation": "Pointer to a NETRESOURCE structure that specifies the network resource for which information is required. The lpRemoteName member of the structure should specify the remote path name of the resource, typically one typed in by a user. The lpProvider and dwType members should also be filled in if known, because this operation can be memory intensive, especially if you do not specify the dwType member. If you do not know the values for these members, you should set them to NULL. All other members of the NETRESOURCE structure are ignored.",
 "WNetGetResourceParent": "Pointer to a NETRESOURCE structure that specifies the network resource for which the parent name is required. Specify the members of the input NETRESOURCE structure as follows. The caller typically knows the values to provide for the lpProvider and dwType members after previous calls to WNetGetResourceInformation or WNetGetResourceParent. MemberMeaning dwType This member should be filled in if known; otherwise, it should be set to NULL. lpRemoteName This member should specify the remote name of the network resource whose parent is required. lpProvider This member should specify the network provider that owns the resource. This member is required; otherwise, the function could produce incorrect results. All other members of the NETRESOURCE structure are ignored.",
 "WNetGetUniversalName": "A pointer to a constant null-terminated string that is a drive-based path for a network resource. For example, if drive H has been mapped to a network drive share, and the network resource of interest is a file named Sample.doc in the directory \\Win32\\Examples on that share, the drive-based path is H:\\Win32\\Examples\\Sample.doc.",
 "WNetGetUser": "A pointer to a constant null-terminated string that specifies either the name of a local device that has been redirected to a network resource, or the remote name of a network resource to which a connection has been made without redirecting a local device. If this parameter is NULL or the empty string, the system returns the name of the current user for the process.",
 "WNetOpenEnum": "Scope of the enumeration. This parameter can be one of the following values. ValueMeaning RESOURCE_CONNECTED Enumerate all currently connected resources. The function ignores the dwUsage parameter. For more information, see the following Remarks section. RESOURCE_CONTEXT Enumerate only resources in the network context of the caller. Specify this value for a Network Neighborhood view. The function ignores the dwUsage parameter. RESOURCE_GLOBALNET Enumerate all resources on the network. RESOURCE_REMEMBERED Enumerate all remembered (persistent) connections. The function ignores the dwUsage parameter.",
 "WNetRestoreConnectionW": "Handle to the parent window that the function uses to display the user interface (UI) that prompts the user for a name and password when making the network connection. If this parameter is NULL, there is no owner window.",
 "WNetUseConnection": "Handle to a window that the provider of network resources can use as an owner window for dialog boxes. Use this parameter if you set the CONNECT_INTERACTIVE value in the dwFlags parameter.",
 "FCIAddFile": "A valid FCI context handle returned by the FCICreate function.",
 "FCICreate": "Pointer to an ERF structure that receives the error information.",
 "FCIDestroy": "A valid FCI context handle returned by the FCICreate function.",
 "FCIFlushCabinet": "A valid FCI context handle returned by theFCICreate function.",
 "FCIFlushFolder": "A valid FCI context handle returned by the FCICreate function.",
 "FDICopy": "A valid FDI context handle returned by the FDICreate function.",
 "FDICreate": "Pointer to an application-defined callback function to allocate memory. The function should be declared using the FNALLOC macro.",
 "FDIDestroy": "A valid FDI context handle returned by the FDICreate function.",
 "FDIIsCabinet": "A valid FDI context handle returned by FDICreate.",
 "FDITruncateCabinet": "A valid FDI context handle returned by the FDICreate function.",
 "DeleteExtractedFiles": "A pointer to a SESSION structure that contains information about the current session. This function frees the memory in the pFileList member of this structure and sets pFileList to NULL.",
 "Extract": "Pointer to a SESSION structure that contains information about the current session.",
 "GetDllVersion": null,
 "CreateNamedPropertyStore": "Receives a pointer to the INamedPropertyStore interface. The caller must release the interface.",
 "CreatePropertyStore": "Receives a pointer to the IPropertyStore interface. The caller must release the interface.",
 "DXVA2_Fixed32OpaqueAlpha": null,
 "DXVA2_Fixed32TransparentAlpha": null,
 "DXVA2CreateDirect3DDeviceManager9": "Receives a token that identifies this instance of the Direct3D device manager. Use this token when calling IDirect3DDeviceManager9::ResetDevice.",
 "DXVA2CreateVideoService": "A pointer to the IDirect3DDevice9 interface of a Direct3D device.",
 "DXVA2FixedToFloat": "DXVA2_Fixed32 structure that contains a fixed-point value.",
 "DXVA2FloatToFixed": "Floating-point number to convert to a fixed-point value.",
 "DXVAHD_CreateDevice": "A pointer to the IDirect3DDevice9Ex interface of a Direct3D 9 device.",
 "MFAddPeriodicCallback": "Pointer to the callback function, of type MFPERIODICCALLBACK.",
 "MFAllocateSerialWorkQueue": "The identifier of an existing work queue. This must be either a multithreaded queue or another serial work queue. Any of the following can be used: The default work queue (MFASYNC_CALLBACK_QUEUE_STANDARD) The platform multithreaded queue (MFASYNC_CALLBACK_QUEUE_MULTITHREADED) A multithreaded queue returned by the MFLockSharedWorkQueue function. A serial queue created by the MFAllocateSerialWorkQueue function.",
 "MFAllocateWorkQueue": "Receives an identifier for the work queue.",
 "MFAllocateWorkQueueEx": "A member of the MFASYNC_WORKQUEUE_TYPE enumeration, specifying the type of work queue to create. ValueMeaning MF_MULTITHREADED_WORKQUEUE Create a multithreaded work queue. Generally, applications should not create private multithreaded queues. Use the platform multithreaded queues instead. For more information, see Work Queue and Threading Improvements. MF_STANDARD_WORKQUEUE Create a work queue without a message loop. Using this flag is equivalent to calling MFAllocateWorkQueue. MF_WINDOW_WORKQUEUE Create a work queue with a message loop. The thread that dispatches the work items for this queue will also call PeekMessage and DispatchMessage. Use this option if your callback performs any actions that require a message loop.",
 "MFAverageTimePerFrameToFrameRate": "The average duration of a video frame, in 100-nanosecond units.",
 "MFBeginCreateFile": "The requested access mode, specified as a member of the MF_FILE_ACCESSMODE enumeration.",
 "MFBeginRegisterWorkQueueWithMMCSS": "The identifier of the work queue. For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers.",
 "MFBeginRegisterWorkQueueWithMMCSSEx": "The identifier of the work queue. For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers.",
 "MFBeginUnregisterWorkQueueWithMMCSS": "The identifier of the work queue. For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers.",
 "MFCalculateBitmapImageSize": "Pointer to a BITMAPINFOHEADER structure that describes the format.",
 "MFCalculateImageSize": "Media subtype for the video format. For a list of subtypes, see Media Type GUIDs.",
 "MFCancelCreateFile": "A pointer to the IUnknown interface of the cancellation object. This pointer is received in the ppCancelCookie parameter of the MFBeginCreateFile function.",
 "MFCancelWorkItem": "The key that was received in the pKey parameter of the MFScheduleWorkItem, MFScheduleWorkItemEx, or MFPutWaitingWorkItem functions.",
 "MFScheduleWorkItem": "Pointer to the IMFAsyncCallback interface. The caller must implement this interface.",
 "MFScheduleWorkItemEx": "Pointer to the IMFAsyncResult interface of an asynchronous result object. To create the result object, call MFCreateAsyncResult.",
 "MFCheckContentProtectionDevice": "The identifier of the protection system that you want to check.",
 "MFCompareFullToPartialMediaType": "Pointer to the IMFMediaType interface of the full media type.",
 "MFConvertColorInfoFromDXVA": "Pointer to an MFVIDEOFORMAT structure. The function fills in the structure members that correspond to the DXVA color information in the dwFromDXVA parameter. The function does not modify the other structure members.",
 "MFConvertColorInfoToDXVA": "Receives the DXVA extended color information. The bitfields in the DWORD are defined in the DXVA2_ExtendedFormat structure.",
 "MFConvertFromFP16Array": "Pointer to an array of float values. The array must contain at least dwCount elements.",
 "MFConvertToFP16Array": "Pointer to an array of 16-bit floating-point values, typed as WORD values. The array must contain at least dwCount elements.",
 "MFCopyImage": "Pointer to the start of the first row of pixels in the destination buffer.",
 "MFCreate2DMediaBuffer": "Width of the image, in pixels.",
 "MFCreate3GPMediaSink": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the 3GP file to this byte stream. The byte stream must be writable and support seeking.",
 "MFCreateAC3MediaSink": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the AC-3 file to this byte stream. The byte stream must be writable.",
 "MFCreateADTSMediaSink": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the ADTS stream to this byte stream. The byte stream must be writable.",
 "MFCreateAggregateSource": "A pointer to the IMFCollection interface of the collection object that contains a list of media sources.",
 "MFCreateAlignedMemoryBuffer": "Size of the buffer, in bytes.",
 "MFCreateAMMediaTypeFromMFMediaType": "Pointer to the IMFMediaType interface of the media type to convert.",
 "MFCreateASFContentInfo": "Receives a pointer to the IMFASFContentInfo interface. The caller must release the interface.",
 "MFCreateASFIndexer": "Receives a pointer to the IMFASFIndexer interface. The caller must release the interface.",
 "MFCreateASFIndexerByteStream": "Pointer to the IMFByteStream interface of a byte stream that contains the ASF stream.",
 "MFCreateASFMediaSink": "Pointer to a byte stream that will be used to write the ASF stream.",
 "MFCreateASFMediaSinkActivate": "Null-terminated wide-character string that contains the output file name.",
 "MFCreateASFMultiplexer": "Receives a pointer to the IMFASFMultiplexer interface. The caller must release the interface.",
 "MFCreateASFProfile": "Receives a pointer to the IMFASFProfile interface. The caller must release the interface.",
 "MFCreateASFProfileFromPresentationDescriptor": "Pointer to the IMFPresentationDescriptor interface of the presentation descriptor that contains the profile information.",
 "MFCreateASFSplitter": "Receives a pointer to the IMFASFSplitter interface. The caller must release the interface.",
 "MFCreateASFStreamingMediaSink": "A pointer to a byte stream object in which the ASF media sink writes the streamed content.",
 "MFCreateASFStreamingMediaSinkActivate": "A pointer to the IMFActivate interface of an activation object. The caller implements this interface. The IMFActivate::ActivateObject method of the activation object must create a byte-stream object. The byte stream exposes the IMFByteStream interface. The ASF streaming sink will write data to this byte stream.",
 "MFCreateASFStreamSelector": "Pointer to the IMFASFProfile interface.",
 "MFCreateAsyncResult": "Pointer to the object stored in the asynchronous result. This pointer is returned by the IMFAsyncResult::GetObject method. This parameter can be NULL.",
 "MFCreateAttributes": "Receives a pointer to the IMFAttributes interface. The caller must release the interface.",
 "MFCreateAudioMediaType": "Pointer to a WAVEFORMATEX structure that describes the audio format.",
 "MFCreateAudioRenderer": "A pointer to the IMFAttributes interface, which is used to configure the audio renderer. This parameter can be NULL. See Remarks.",
 "MFCreateAudioRendererActivate": "Receives a pointer to the IMFActivate interface. Use this interface to create the audio renderer. The caller must release the interface.",
 "MFCreateAVIMediaSink": "Pointer to the byte stream that will be used to write the AVI file.",
 "MFCreateCaptureEngine": "Receives a pointer to the IMFCaptureEngine interface. The caller must release the interface.",
 "MFCreateCollection": "Receives a pointer to the collection object's IMFCollection interface. The caller must release the interface.",
 "MFCreateContentDecryptorContext": "The identifier of the media protection system for which you want to create an IMFContentDecryptorContext interface.",
 "MFCreateContentProtectionDevice": "The idenfier of the media protection system for which you want to create the IMFContentProtectionDevice interface.",
 "MFCreateCredentialCache": "Receives a pointer to the IMFNetCredentialCache interface of the new credential cache object. The caller must release the interface.",
 "MFCreateDeviceSource": "Pointer to the IMFAttributes interface of an attribute store, which is used to select the device. See Remarks.",
 "MFCreateDeviceSourceActivate": "Pointer to the IMFAttributes interface of an attribute store, which is used to select the device. See Remarks.",
 "MFCreateDXGIDeviceManager": "Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling IMFDXGIDeviceManager::ResetDevice.",
 "MFCreateDXGISurfaceBuffer": "Identifies the type of DXGI surface. This value must be IID_ID3D11Texture2D.",
 "MFCreateDXSurfaceBuffer": "Identifies the type of Direct3D 9 surface. Currently this value must be IID_IDirect3DSurface9.",
 "MFCreateEventQueue": "Receives a pointer to the IMFMediaEventQueue interface of the event queue. The caller must release the interface.",
 "MFCreateFile": "The requested access mode, specified as a member of the MF_FILE_ACCESSMODE enumeration.",
 "MFCreateFMPEG4MediaSink": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking.",
 "MFCreateLegacyMediaBufferOnMFMediaBuffer": "Pointer to the IMFSample interface of the sample that contains the Media Foundation buffer. This parameter can be NULL.",
 "MFCreateMediaBufferFromMediaType": "A pointer to the IMFMediaType interface of the media type.",
 "MFCreateMediaBufferWrapper": "A pointer to the IMFMediaBuffer interface of the original media buffer.",
 "MFCreateMediaEvent": "The event type. See IMFMediaEvent::GetType. For a list of event types, see Media Foundation Events.",
 "MFCreateMediaExtensionActivate": "The class identifier that is associated with the activatable runtime class.",
 "MFCreateMediaSession": "Pointer to the IMFAttributes interface. This parameter can be NULL. See Remarks.",
 "MFCreateMediaType": "Receives a pointer to the IMFMediaType interface. The caller must release the interface.",
 "MFCreateMediaTypeFromProperties": "A pointer to properties.",
 "MFCreateMediaTypeFromRepresentation": "GUID that specifies which format representation to convert. The following value is defined. GUIDDescription AM_MEDIA_TYPE_REPRESENTATIONConvert a DirectShow AM_MEDIA_TYPE structure.",
 "MFCreateMemoryBuffer": "Size of the buffer, in bytes.",
 "MFCreateMFByteStreamOnStream": "A pointer to the IStream interface.",
 "MFCreateMFByteStreamOnStreamEx": "A pointer to the IRandomAccessStream interface.",
 "MFCreateMFByteStreamWrapper": "A pointer to the IMFByteStream interface of the original byte stream.",
 "MFCreateMFVideoFormatFromMFMediaType": "Pointer to the IMFMediaType interface of a video media type.",
 "MFCreateMP3ByteStreamPlugin": "The interface identifier (IID) of the requested interface. Set this parameter to IID_IMFByteStreamHandler to receive a pointer to the IMFByteStreamHandler interface.",
 "MFCreateMP3MediaSink": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the MP3 file to this byte stream. The byte stream must be writable.",
 "MFCreateMPEG4MediaSink": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking.",
 "MFCreateMuxSink": "The subtype GUID of the output type for the MFT.",
 "MFCreateNetSchemePlugin": "Interface identifier (IID) of the interface to retrieve.",
 "MFCreatePathFromURL": "A null-terminated string that contains the URL. The maximum length of the string is INTERNET_MAX_URL_LENGTH.",
 "MFCreatePMPMediaSession": "A member of the MFPMPSESSION_CREATION_FLAGS enumeration that specifies how to create the session object.",
 "MFCreatePMPServer": "A member of the MFPMPSESSION_CREATION_FLAGS enumeration that specifies how to create the PMP session.",
 "MFCreatePresentationClock": "Receives a pointer to the clock's IMFPresentationClock interface. The caller must release the interface.",
 "MFCreatePresentationDescriptor": "Number of elements in the apStreamDescriptors array.",
 "MFCreatePresentationDescriptorFromASFProfile": "Pointer to the IMFASFProfile interface of the ASF profile object.",
 "MFCreatePropertiesFromMediaType": "A pointer to the IMFMediaType interface.",
 "MFCreateProtectedEnvironmentAccess": "Receives a pointer to the IMFProtectedEnvironmentAccess interface.",
 "MFCreateProxyLocator": "The name of the protocol. Note In this release of Media Foundation, the default proxy locator does not support RTSP.",
 "MFCreateRemoteDesktopPlugin": "Receives a pointer to the IMFRemoteDesktopPlugin interface of the plug-in object. The caller must release the interface.",
 "MFCreateSample": "Receives a pointer to the IMFSample interface of the media sample. The caller must release the interface.",
 "MFCreateSampleCopierMFT": "Receives a pointer to the IMFTransform interface. The caller must release the interface.",
 "MFCreateSampleGrabberSinkActivate": "Pointer to the IMFMediaType interface, defining the media type for the sample grabber's input stream.",
 "MFCreateSensorGroup": "The symbolic link for the new IMFSensorGroup. This name can be obtained through device enumeration APIs such as This is the symbolic link name obtained through either the standard Win32 device enumeration, such as SetupDiGetClassDevs or MFEnumDeviceSources or by getting the Id property of the DeviceInformation class.",
 "MFCreateSensorStream": "The identifier for the created stream. This is the same as setting the MF_DEVICESTREAM_STREAM_ID attribute. This value is used if pAttributes is null.",
 "MFCreateSequencerSegmentOffset": "Sequencer element identifier. This value specifies the segment in which to begin playback. The element identifier is returned in the IMFSequencerSource::AppendTopology method.",
 "MFCreateSequencerSource": "Reserved. Must be NULL.",
 "MFCreateSimpleTypeHandler": "Receives a pointer to the IMFMediaTypeHandler interface of the media-type handler. The caller must release the interface.",
 "MFCreateSinkWriterFromMediaSink": "Pointer to the IMFMediaSink interface of a media sink.",
 "MFCreateSinkWriterFromURL": "A null-terminated string that contains the URL of the output file. This parameter can be NULL.",
 "MFCreateSourceReaderFromByteStream": "A pointer to the IMFByteStream interface of a byte stream. This byte stream will provide the source data for the source reader.",
 "MFCreateSourceReaderFromMediaSource": "A pointer to the IMFMediaSource interface of a media source.",
 "MFCreateSourceReaderFromURL": "The URL of a media file to open.",
 "MFCreateSourceResolver": "Receives a pointer to the source resolver's IMFSourceResolver interface. The caller must release the interface.",
 "MFCreateStandardQualityManager": "Receives a pointer to the quality manager's IMFQualityManager interface. The caller must release the interface.",
 "MFCreateStreamDescriptor": "Stream identifier.",
 "MFCreateStreamOnMFByteStream": "A pointer to the IMFByteStream interface of the Media Foundation byte stream.",
 "MFCreateStreamOnMFByteStreamEx": "A pointer to the IMFByteStream interface of the Media Foundation byte stream.",
 "MFCreateSystemTimeSource": "Receives a pointer to the object's IMFPresentationTimeSource interface. The caller must release the interface.",
 "MFCreateTempFile": "The requested access mode, specified as a member of the MF_FILE_ACCESSMODE enumeration.",
 "MFCreateTopoLoader": "Receives a pointer to the IMFTopoLoader interface of the topology loader. The caller must release the interface.",
 "MFCreateTopology": "Receives a pointer to the IMFTopology interface of the topology object. The caller must release the interface.",
 "MFCreateTopologyNode": "The type of node to create, specified as a member of the MF_TOPOLOGY_TYPE enumeration.",
 "MFCreateTrackedSample": "Receives a pointer to the IMFTrackedSample interface.",
 "MFCreateTranscodeProfile": "Receives a pointer to the IMFTranscodeProfile interface of the transcode profile object. Caller must release the interface.",
 "MFCreateTranscodeSinkActivate": "Receives a pointer to the IMFActivate interface. This interface is used to create the file sink instance from the activation object. Before doing so, query the returned pointer for the IMFTranscodeSinkInfoProvider interface and use that interface to initialize the object.",
 "MFCreateTranscodeTopology": "A pointer to a media source that encapsulates the source file to be transcoded. The media source object exposes the IMFMediaSource interface and can be created by using the source resolver. For more information, see Using the Source Resolver.",
 "MFCreateTranscodeTopologyFromByteStream": "A pointer to the IMFMediaSource interface of a media source. The media source provides that source content for transcoding.",
 "MFCreateTransformActivate": "Receives a pointer to the IMFActivate interface. The caller must release the interface.",
 "MFCreateURLFromPath": "A null-terminated string that contains the path. The maximum length of the string is INTERNET_MAX_URL_LENGTH.",
 "MFCreateVideoMediaType": "Pointer to an MFVIDEOFORMAT structure that describes the video format.",
 "MFCreateVideoMediaTypeFromBitMapInfoHeader": "Reserved.",
 "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx": "A pointer to the BITMAPINFOHEADER structure to convert.",
 "MFCreateVideoMediaTypeFromSubtype": "Pointer to a GUID that specifies the subtype. See Video Subtype GUIDs.",
 "MFCreateVideoMediaTypeFromVideoInfoHeader": "Pointer to the KS_VIDEOINFOHEADER structure to convert. (This structure is identical to the DirectShow VIDEOINFOHEADER structure.)",
 "MFCreateVideoMediaTypeFromVideoInfoHeader2": "Pointer to the KS_VIDEOINFOHEADER2 structure to convert. (This structure is identical to the DirectShow VIDEOINFOHEADER2 structure.)",
 "MFCreateVideoMixer": "Pointer to the owner of this object. If the object is aggregated, pass a pointer to the aggregating object's IUnknown interface. Otherwise, set this parameter to NULL.",
 "MFCreateVideoMixerAndPresenter": "Pointer to the owner of the video mixer. If the mixer is aggregated, pass a pointer to the aggregating object's IUnknown interface. Otherwise, set this parameter to NULL.",
 "MFCreateVideoPresenter": "Pointer to the owner of the object. If the object is aggregated, pass a pointer to the aggregating object's IUnknown interface. Otherwise, set this parameter to NULL.",
 "MFCreateVideoRenderer": "Interface identifier (IID) of the requested interface on the EVR.",
 "MFCreateVideoRendererActivate": "Handle to the window where the video will be displayed.",
 "MFCreateVideoSampleAllocator": "The identifier of the interface to retrieve. Specify one of the following values: ValueMeaning IID_IUnknown Retrieve an IUnknown pointer. IID_IMFVideoSampleAllocator Retrieve an IMFVideoSampleAllocator pointer. IID_IMFVideoSampleAllocatorCallback Retrieve an IMFVideoSampleAllocatorCallback pointer.",
 "MFCreateVideoSampleAllocatorEx": "The identifier of the interface to retrieve. Specify one of the following values. ValueMeaning IID_IUnknown Retrieve an IUnknown pointer. IID_IMFVideoSampleAllocator Retrieve an IMFVideoSampleAllocator pointer. IID_IMFVideoSampleAllocatorEx Retrieve an IMFVideoSampleAllocatorEx pointer. IID_IMFVideoSampleAllocatorCallback Retrieve an IMFVideoSampleAllocatorCallback pointer.",
 "MFCreateVideoSampleFromSurface": "A pointer to the IUnknown interface of the Direct3D surface. This parameter can be NULL.",
 "MFCreateWaveFormatExFromMFMediaType": "Pointer to the IMFMediaType interface of the media type.",
 "MFCreateWAVEMediaSink": "Pointer to the byte stream that will be used to write the .wav file.",
 "MFCreateWICBitmapBuffer": "Set this parameter to __uuidof(IWICBitmap).",
 "MFCreateWMAEncoderActivate": "A pointer to the IMFMediaType interface. This parameter specifies the encoded output format.",
 "MFCreateWMVEncoderActivate": "A pointer to the IMFMediaType interface. This parameter specifies the encoded output format.",
 "MFDeserializeAttributesFromStream": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFDeserializePresentationDescriptor": "Size of the pbData array, in bytes.",
 "MFEndCreateFile": "Pointer to the IMFAsyncResult interface. Pass in the same pointer that your callback object received in the Invoke method.",
 "MFEndRegisterWorkQueueWithMMCSS": "Pointer to the IMFAsyncResult interface. Pass in the same pointer that your callback object received in the IMFAsyncCallback::Invoke method.",
 "MFEndUnregisterWorkQueueWithMMCSS": "Pointer to the IMFAsyncResult interface. Pass in the same pointer that your callback object received in the IMFAsyncCallback::Invoke method.",
 "MFEnumDeviceSources": "Pointer to an attribute store that contains search criteria. To create the attribute store, call MFCreateAttributes. Set one or more of the following attributes on the attribute store: ValueMeaning MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE Specifies whether to enumerate audio or video devices. (Required.) MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE For audio capture devices, specifies the device role. (Optional.) MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY For video capture devices, specifies the device category. (Optional.)",
 "MFFrameRateToAverageTimePerFrame": "The numerator of the frame rate.",
 "MFGetAttribute2UINT32asUINT64": "A pointer to the IMFAttributes interface of the attribute store.",
 "MFGetAttributeDouble": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFGetAttributeRatio": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFGetAttributesAsBlob": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFGetAttributesAsBlobSize": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFGetAttributeSize": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFGetAttributeString": "A pointer to the IMFAttributes interface.",
 "MFGetAttributeUINT32": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFGetAttributeUINT64": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFGetContentProtectionSystemCLSID": "The GUID that identifies the content protection system.",
 "MFGetLocalId": "Application-specific verifier value.",
 "MFGetMFTMerit": "A pointer to the IUnknown interface of the Media Foundation transform (MFT) that represents the codec.",
 "MFGetPlaneSize": "FOURCC code or D3DFORMAT value that specifies the video format.",
 "MFGetPluginControl": "Receives a pointer to the IMFPluginControl interface. The caller must release the interface.",
 "MFGetService": "A pointer to the IUnknown interface of the object to query.",
 "MFGetStrideForBitmapInfoHeader": "FOURCC code or D3DFORMAT value that specifies the video format. If you have a video subtype GUID, you can use the first DWORD of the subtype.",
 "MFGetSupportedMimeTypes": "Pointer to a PROPVARIANT that receives the MIME types. Before calling this method, call PropVariantInit to initialize the PROPVARIANT. If the method succeeds, the PROPVARIANT contains an array of wide-character strings. The PROPVARIANT data type is VT_VECTOR | VT_LPWSTR. The caller must release the PROPVARIANT by calling PropVariantClear.",
 "MFGetSupportedSchemes": "Pointer to a PROPVARIANT that receives the URL schemes. Before calling this method, call PropVariantInit to initialize the PROPVARIANT. If the method succeeds, the PROPVARIANT contains an array of wide-character strings. The PROPVARIANT data type is VT_VECTOR | VT_LPWSTR. The caller must release the PROPVARIANT by calling PropVariantClear.",
 "MFGetSystemId": "Receives a pointer to the IMFSystemId interface.",
 "MFGetSystemTime": null,
 "MFGetTimerPeriodicity": "Receives the timer interval, in milliseconds.",
 "MFGetTopoNodeCurrentType": "A pointer to the IMFTopologyNode interface.",
 "MFGetUncompressedVideoFormat": "Pointer to an MFVIDEOFORMAT structure.",
 "MFGetWorkQueueMMCSSClass": "Identifier for the work queue. The identifier is retrieved by the MFAllocateWorkQueue function.",
 "MFGetWorkQueueMMCSSPriority": "The identifier of the work queue. For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers.",
 "MFGetWorkQueueMMCSSTaskId": "Identifier for the work queue. The identifier is retrieved by the MFAllocateWorkQueue function.",
 "MFHeapAlloc": "Number of bytes to allocate.",
 "MFHeapFree": "Pointer to the memory to free.",
 "MFInitAMMediaTypeFromMFMediaType": "Pointer to the IMFMediaType interface of the media type to convert.",
 "MFInitAttributesFromBlob": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFInitMediaTypeFromAMMediaType": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType.",
 "MFInitMediaTypeFromMFVideoFormat": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType.",
 "MFInitMediaTypeFromMPEG1VideoInfo": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType.",
 "MFInitMediaTypeFromMPEG2VideoInfo": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType.",
 "MFInitMediaTypeFromVideoInfoHeader": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType.",
 "MFInitMediaTypeFromVideoInfoHeader2": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType.",
 "MFInitMediaTypeFromWaveFormatEx": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType.",
 "MFInitVideoFormat": "A pointer to an MFVIDEOFORMAT structure. The function fills in the structure members based on the video format specified in the type parameter.",
 "MFInitVideoFormat_RGB": "A pointer to an MFVIDEOFORMAT structure. The functions fills in the structure members with the format information.",
 "MFInvokeCallback": "Pointer to the IMFAsyncResult interface. To create this object, call MFCreateAsyncResult.",
 "MFIsContentProtectionDeviceSupported": "The identifier of the protection system that you want to check.",
 "MFIsFormatYUV": "FOURCC code or D3DFORMAT value.",
 "MFllMulDiv": "A multiplier.",
 "MFLoadSignedLibrary": "The name of the dynamic link library to load. This dynamic link library must be signed for the protected environment.",
 "MFLockDXGIDeviceManager": "Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling IMFDXGIDeviceManager::ResetDevice. This parameter can be NULL.",
 "MFLockPlatform": null,
 "MFShutdown": null,
 "MFLockSharedWorkQueue": "The name of the MMCSS task.",
 "MFLockWorkQueue": "The identifier for the work queue. The identifier is returned by the MFAllocateWorkQueue function.",
 "MFMapDX9FormatToDXGIFormat": "The D3DFORMAT value or FOURCC code to convert.",
 "MFMapDXGIFormatToDX9Format": "The DXGI_FORMAT value to convert.",
 "MFPCreateMediaPlayer": "Null-terminated string that contains the URL of a media file to open. This parameter can be NULL. If the parameter is NULL, fStartPlayback must be FALSE. If this parameter is NULL, you can open a URL later by calling IMFPMediaPlayer::CreateMediaItemFromURL.",
 "MFPERIODICCALLBACK pointer": "Pointer to the IUnknown interface, or NULL. This pointer is specified by the caller in the MFAddPeriodicCallback function.",
 "MFPutWaitingWorkItem": "A handle to an event object. To create an event object, call CreateEvent or CreateEventEx.",
 "MFPutWorkItem": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or MFAllocateWorkQueueEx.",
 "MFPutWorkItem2": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or MFAllocateWorkQueueEx.",
 "MFPutWorkItemEx": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or MFAllocateWorkQueueEx.",
 "MFPutWorkItemEx2": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or MFAllocateWorkQueueEx.",
 "MFRegisterLocalByteStreamHandler": "A string that contains the file name extension for this handler.",
 "MFRegisterLocalSchemeHandler": "A string that contains the scheme. The scheme includes the trailing ':' character; for example, \"http:\".",
 "MFRegisterPlatformWithMMCSS": "The name of the MMCSS task.",
 "MFRemovePeriodicCallback": "Key that identifies the callback. This value is retrieved by the MFAddPeriodicCallback function.",
 "MFRequireProtectedEnvironment": "Pointer to the IMFPresentationDescriptor interface of a presentation descriptor. The presentation descriptor is created by the media source, and describes the presentation.",
 "MFSerializeAttributesToStream": "Pointer to the IMFAttributes interface of the attribute store.",
 "MFSerializePresentationDescriptor": "Pointer to the IMFPresentationDescriptor interface of the presentation descriptor to serialize.",
 "MFSetAttribute2UINT32asUINT64": "A pointer to the IMFAttributes interface of the attribute store.",
 "MFSetAttributeRatio": "A pointer to the IMFAttributes interface of the attribute store.",
 "MFSetAttributeSize": "A pointer to the IMFAttributes interface of the attribute store.",
 "MFShutdownObject": "Pointer to the IUnknown interface of the object.",
 "MFStartup": "Version number. Use the value MF_VERSION, defined in mfapi.h.",
 "MFTEnum": "GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see MFT_CATEGORY.",
 "MFTEnum2": "A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see MFT_CATEGORY.",
 "MFTEnumEx": "A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see MFT_CATEGORY.",
 "MFTGetInfo": "The CLSID of the MFT.",
 "MFTranscodeGetAudioOutputAvailableTypes": "Specifies the subtype of the output media. The encoder uses this value as a filter when it is enumerating the available output types. For information about the audio subtypes, see Audio Subtype GUIDs.",
 "MFTRegister": "The CLSID of the MFT. The MFT must also be registered as a COM object using the same CLSID.",
 "MFTRegisterLocal": "A pointer to the IClassFactory interface of a class factory object. The class factory creates the MFT.",
 "MFTRegisterLocalByCLSID": "The class identifier (CLSID) of the MFT.",
 "MFTUnregister": "The CLSID of the MFT.",
 "MFTUnregisterLocal": "A pointer to the IClassFactory interface of a class factory object. This parameter can be NULL.",
 "MFTUnregisterLocalByCLSID": "The class identifier (CLSID) of the MFT.",
 "MFUnlockDXGIDeviceManager": null,
 "MFUnlockPlatform": null,
 "MFUnlockWorkQueue": "Identifier for the work queue to be unlocked. The identifier is returned by the MFAllocateWorkQueue function.",
 "MFUnregisterPlatformFromMMCSS": null,
 "MFUnwrapMediaType": "Pointer to the IMFMediaType interface of the media type that was retrieved by MFWrapMediaType.",
 "MFWrapMediaType": "A pointer to the IMFMediaType interface of the media type to wrap in a new media type.",
 "MFValidateMediaTypeSize": "GUID that specifies the type of format block. It must be one of the following values: FORMAT_DvInfoFORMAT_MFVideoFormatFORMAT_MPEG2VideoFORMAT_MPEGStreamsFORMAT_MPEGVideoFORMAT_VideoInfoFORMAT_VideoInfo2FORMAT_WaveFormatEx",
 "Pack2UINT32AsUINT64": "Value to store in the high-order 32 bits of the UINT64 value.",
 "PDXVAHDSW_CreateDevice pointer": "A pointer to the IDirect3DDevice9Ex interface of the Direct3D device.",
 "PDXVAHDSW_CreateVideoProcessor pointer": "A handle to the plug-in DXVA-HD device that creates the video processor.",
 "PDXVAHDSW_DestroyDevice pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_DestroyVideoProcessor pointer": "A handle to the software DXVA-HD video processor.",
 "PDXVAHDSW_GetVideoProcessBltStatePrivate pointer": "A handle to the software DXVA-HD video processor.",
 "PDXVAHDSW_GetVideoProcessorCaps pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_GetVideoProcessorCustomRates pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_GetVideoProcessorDeviceCaps pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_GetVideoProcessorFilterRange pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_GetVideoProcessorInputFormats pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_GetVideoProcessorOutputFormats pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_GetVideoProcessStreamStatePrivate pointer": "A handle to the software DXVA-HD video processor.",
 "PDXVAHDSW_Plugin pointer": "The size of the structure pointed to by the pCallbacks parameter, in bytes.",
 "PDXVAHDSW_ProposeVideoPrivateFormat pointer": "A handle to the plug-in DXVA-HD device.",
 "PDXVAHDSW_SetVideoProcessBltState pointer": "A handle to the software DXVA-HD video processor.",
 "PDXVAHDSW_SetVideoProcessStreamState pointer": "A handle to the software DXVA-HD video processor.",
 "PDXVAHDSW_VideoProcessBltHD pointer": "A handle to the software DXVA-HD video processor.",
 "DegaussMonitor": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorBrightness": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorCapabilities": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorColorTemperature": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorContrast": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorDisplayAreaPosition": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorDisplayAreaSize": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorRedGreenOrBlueDrive": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorRedGreenOrBlueGain": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetMonitorTechnologyType": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "RestoreMonitorFactoryColorDefaults": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "RestoreMonitorFactoryDefaults": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SaveCurrentMonitorSettings": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetMonitorBrightness": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetMonitorColorTemperature": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetMonitorContrast": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetMonitorDisplayAreaPosition": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetMonitorDisplayAreaSize": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetMonitorRedGreenOrBlueDrive": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetMonitorRedGreenOrBlueGain": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "CapabilitiesRequestAndCapabilitiesReply": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetCapabilitiesStringLength": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetTimingReport": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "GetVCPFeatureAndVCPFeatureReply": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SaveCurrentSettings": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "SetVCPFeature": "Handle to a physical monitor. To get the monitor handle, call GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9.",
 "DestroyPhysicalMonitor": "Handle to a physical monitor.",
 "DestroyPhysicalMonitors": "Number of elements in the pPhysicalMonitorArray array.",
 "GetNumberOfPhysicalMonitorsFromHMONITOR": "A monitor handle. Monitor handles are returned by several Multiple Display Monitor functions, including EnumDisplayMonitors and MonitorFromWindow, which are part of the graphics device interface (GDI).",
 "GetNumberOfPhysicalMonitorsFromIDirect3DDevice9": "Pointer to the IDirect3DDevice9 interface of the Direct3D device.",
 "GetPhysicalMonitorsFromHMONITOR": "A monitor handle. Monitor handles are returned by several Multiple Display Monitor functions, including EnumDisplayMonitors and MonitorFromWindow, which are part of the graphics device interface (GDI).",
 "GetPhysicalMonitorsFromIDirect3DDevice9": "Pointer to the IDirect3DDevice9 interface of the Direct3D device.",
 "DDCCIGetCapabilitiesString": "A handle to a physical monitor.",
 "DDCCIGetCapabilitiesStringLength": "A handle to a physical monitor.",
 "DDCCIGetTimingReport": "A handle to a physical monitor.",
 "DDCCIGetVCPFeature": "A handle to a physical monitor.",
 "DDCCISaveCurrentSettings": "A handle to a physical monitor.",
 "DDCCISetVCPFeature": "A handle to a physical monitor.",
 "DestroyPhysicalMonitorInternal": "A handle to a physical monitor.",
 "GetNumberOfPhysicalMonitors": "A pointer to a UNICODE_STRING structure that contains the name of the display device, as returned by the GetMonitorInfo function.",
 "GetPhysicalMonitorDescription": "A handle to a physical monitor.",
 "GetPhysicalMonitors": "A pointer to a UNICODE_STRING structure that contains the name of the display device, as returned by the GetMonitorInfo function.",
 "CopyHelperAttribute": "Type: HELPER_ATTRIBUTE* The structure to be updated.",
 "CopyRepairInfo": "Type: RepairInfo* The structure to be updated.",
 "CopyRootCauseInfo": "Type: RootCauseInfo* The structure to be updated.",
 "FreeRepairInfoExs": "Type: RepairInfoEx* The array of structures. The allocated memory pointed to by these structures will be freed.",
 "FreeRepairInfos": "Type: RepairInfo* The array of structures. The allocated memory pointed to by these structures will be freed.",
 "FreeRootCauseInfos": "Type: RootCauseInfo* The array of structures. The allocated memory pointed to by these structures will be freed.",
 "FreeHelperAttributes": "Type: HELPER_ATTRIBUTE* The array of structures. The allocated memory pointed to by these structures will be freed.",
 "FreeUiInfo": "Type: UiInfo* The structure. The allocated memory pointed to by this structure will be freed.",
 "NdfCancelIncident": "Type: NDFHANDLE Handle to the Network Diagnostics Framework incident. This handle should match the handle of an existing incident.",
 "NdfCloseIncident": "Type: NDFHANDLE Handle to the NDF incident that is being closed.",
 "NdfCreateConnectivityIncident": "Type: NDFHANDLE* Handle to the Network Diagnostics Framework incident.",
 "NdfCreateDNSIncident": "Type: LPCWSTR The host name with which there is a name resolution issue.",
 "NdfCreateGroupingIncident": "Type: LPCWSTR The name of the Peer Name Resolution Protocol (PNRP) cloud where the group is created. If NULL, the session will not attempt to diagnose issues related to PNRP.",
 "NdfCreateInboundIncident": "Type: LPCWSTR The fully qualified path to the application receiving the inbound traffic.",
 "NdfCreateIncident": "Type: LPCWSTR The name of the helper class to be used in the diagnoses of the incident.",
 "NdfCreateNetConnectionIncident": "Type: NDFHANDLE* Handle to the Network Diagnostics Framework incident.",
 "NdfCreatePnrpIncident": "Type: LPCWSTR The name of the cloud to be diagnosed.",
 "NdfCreateSharingIncident": "Type: LPCWSTR The full UNC string (for example, \"\\\\server\\folder\\file.ext\") for the shared asset with which there is a connectivity issue.",
 "NdfCreateWebIncident": "Type: LPCWSTR The URL with which there is a connectivity issue.",
 "NdfCreateWebIncidentEx": "Type: LPCWSTR The URL with which there is a connectivity issue.",
 "NdfCreateWinSockIncident": "Type: SOCKET A descriptor identifying a connected socket.",
 "NdfDiagnoseIncident": "Type: NDFHANDLE A handle to the Network Diagnostics Framework incident.",
 "NdfExecuteDiagnosis": "Type: NDFHANDLE Handle to the Network Diagnostics Framework incident.",
 "NdfGetTraceFile": "Type: NDFHANDLE Handle to a Network Diagnostics Framework incident. This handle should match the handle of an existing incident.",
 "NdfRepairIncident": "Type: NDFHANDLE Handle to the Network Diagnostics Framework incident. This handle should match the handle passed to NdfDiagnoseIncident.",
 "UtilAssembleStringsWithAlloc": "Type: LPWSTR* The location where the newly allocated string will be placed. When the string is no longer needed, it must be released with CoTaskMemFree.",
 "UtilLoadStringWithAlloc": "Type: UINT Identifier of of the string to be loaded.",
 "UtilStringCopyWithAlloc": "Type: LPWSTR* The location where the pointer to the allocated memory is stored. When no longer needed, it must be released with CoTaskMemFree. This buffer is always null-terminated.",
 "TokenBindingDeleteBinding": "The target string for which TokenBindingDeleteBinding should delete the associated token binding key.",
 "TokenBindingGenerateBinding": "The negotiated key type to use. Use a value from the list of key types that you retrieved by calling the TokenBindingGetKeyTypesClient function.",
 "SslChangeNotify": "This parameter is reserved for future use.",
 "SslComputeClientAuthHash": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslComputeEapKeyBlock": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslComputeFinishedHash": "The handle of the SSL protocol provider instance.",
 "SslCreateClientAuthHash": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslCreateEphemeralKey": "The handle of the SSL protocol provider instance.",
 "SslCreateHandshakeHash": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslDecrementProviderReferenceCount": "The handle of the SSL protocol provider instance.",
 "SslDecryptPacket": "The handle of the SSL protocol provider instance.",
 "SslEncryptPacket": "The handle of the SSL protocol provider instance.",
 "SslEnumCipherSuites": "The handle of the SSL protocol provider instance.",
 "SslEnumProtocolProviders": "A pointer to a DWORD value to receive the number of protocol providers returned.",
 "SslExportKey": "The handle of the SSL protocol provider instance.",
 "SslFreeBuffer": "A pointer to the memory buffer to be freed.",
 "SslFreeObject": "The handle of the object to free.",
 "SslGenerateMasterKey": "The handle to the SSL protocol provider instance.",
 "SslGenerateSessionKeys": "The handle to the SSL protocol provider instance.",
 "SslGetCipherSuitePRFHashAlgorithm": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslGetKeyProperty": "The handle of the SSL provider.",
 "SslGetProviderProperty": "The handle of the Secure Sockets Layer protocol (SSL) provider for which to retrieve the property.",
 "SslHashHandshake": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslImportKey": "The handle to the SSL protocol provider instance.",
 "SslImportMasterKey": "The handle to the SSL protocol provider instance.",
 "SslIncrementProviderReferenceCount": "The handle to the SSL protocol provider instance.",
 "SslLookupCipherLengths": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslLookupCipherSuiteInfo": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslOpenPrivateKey": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslOpenProvider": "The address of an NCRYPT_PROV_HANDLE in which to write the provider handle. When you have finished using the handle, you should free it by calling the SslFreeObject function.",
 "SslSignHash": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "SslVerifySignature": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.",
 "NCryptCreatePersistedKey": "The handle of the key storage provider to create the key in. This handle is obtained by using the NCryptOpenStorageProvider function.",
 "NCryptDecrypt": "The handle of the key to use to decrypt the data.",
 "NCryptDeleteKey": "The handle of the key to delete. This handle is obtained by using the NCryptOpenKey function. Note The NCryptDeleteKey function frees the handle. Applications must not use the handle or attempt to call the NCryptFreeObject function on it after calling the NCryptDeleteKey function.",
 "NCryptDeriveKey": "The secret agreement handle to create the key from. This handle is obtained from the NCryptSecretAgreement function.",
 "NCryptEncrypt": "The handle of the key to use to encrypt the data.",
 "NCryptEnumAlgorithms": "The handle of the key storage provider to enumerate the algorithms for. This handle is obtained with the NCryptOpenStorageProvider function.",
 "NCryptEnumKeys": "The handle of the key storage provider to enumerate the keys for. This handle is obtained with the NCryptOpenStorageProvider function.",
 "NCryptEnumStorageProviders": "The address of a DWORD to receive the number of elements in the ppProviderList array.",
 "NCryptExportKey": "A handle of the key to export.",
 "NCryptFinalizeKey": "The handle of the key to complete. This handle is obtained by calling the NCryptCreatePersistedKey function.",
 "NCryptFreeBuffer": "The address of the memory to be released.",
 "NCryptFreeObject": "The handle of the object to free. This can be either a provider handle (NCRYPT_PROV_HANDLE) or a key handle (NCRYPT_KEY_HANDLE).",
 "NCryptGetProperty": "The handle of the object to get the property for. This can be a provider handle (NCRYPT_PROV_HANDLE) or a key handle (NCRYPT_KEY_HANDLE).",
 "NCryptImportKey": "The handle of the key storage provider.",
 "NCryptIsAlgSupported": "The handle of the key storage provider. This handle is obtained with the NCryptOpenStorageProvider function.",
 "NCryptIsKeyHandle": "The handle of the key to test.",
 "NCryptNotifyChangeKey": "The handle of the key storage provider. This handle is obtained by using the NCryptOpenStorageProvider function.",
 "NCryptOpenKey": "The handle of the key storage provider to open the key from.",
 "NCryptOpenStorageProvider": "A pointer to a NCRYPT_PROV_HANDLE variable that receives the provider handle. When you have finished using this handle, release it by passing it to the NCryptFreeObject function.",
 "NCryptSecretAgreement": "The handle of the private key to use to create the secret agreement value. This key and the hPubKey key must come from the same key storage provider.",
 "NCryptSetProperty": "The handle of the key storage object to set the property for.",
 "NCryptSignHash": "The handle of the key to use to sign the hash.",
 "NCryptTranslateHandle": "A pointer to an NCRYPT_PROV_HANDLE variable that receives the handle of the CNG key storage provider that owns the CNG key placed in the phKey parameter. This parameter can be NULL if this handle is not needed.",
 "NCryptVerifySignature": "The handle of the key to use to decrypt the signature. This must be an identical key or the public key portion of the key pair used to sign the data with the NCryptSignHash function.",
 "BCryptDeriveKeyCapi": "The handle of the hash object. The handle is obtained by calling the BCryptCreateHash function. When you have finished using the handle, you must free it by calling the BCryptDestroyHash function.",
 "BCryptDeriveKeyPBKDF2": "The handle of an algorithm provider that provides the pseudo-random function. This should be an algorithm provider that performs a Message Authentication Code computation. When you use the default Microsoft algorithm provider, any hashing algorithm opened by using the BCRYPT_ALG_HANDLE_HMAC_FLAG flag can be used. Note Only algorithms that implement the BCRYPT_IS_KEYED_HASH property can be used to populate this parameter.",
 "SystemPrng": "A pointer to a buffer that receives the retrieved bytes.",
 "NCryptCreateProtectionDescriptor": "Null-terminated Unicode string that contains a protection descriptor rule string or a registered display name for the rule. If you specify the display name and you want this function to look in the registry for the associated protection descriptor rule string, you must set the dwFlags parameter to NCRYPT_NAMED_DESCRIPTOR_FLAG.",
 "NCryptCloseProtectionDescriptor": "Handle of a protection descriptor created by calling NCryptCreateProtectionDescriptor.",
 "NCryptGetProtectionDescriptorInfo": "Protection descriptor handle created by calling NCryptCreateProtectionDescriptor.",
 "NCryptProtectSecret": "Handle of the protection descriptor object. Create the handle by calling NCryptCreateProtectionDescriptor.",
 "NCryptQueryProtectionDescriptorName": "The registered display name for the protection descriptor. Register a name by calling the NCryptRegisterProtectionDescriptorName function.",
 "NCryptRegisterProtectionDescriptorName": "Pointer to a null-terminated Unicode string that contains the display name of the descriptor to be registered.",
 "NCryptStreamClose": "Data stream handle returned by NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect.",
 "NCryptStreamOpenToProtect": "Handle of the protection descriptor. Create the handle by calling NCryptCreateProtectionDescriptor.",
 "NCryptStreamOpenToUnprotect": "Pointer to an NCRYPT_PROTECT_STREAM_INFO structure that contains the address of a user defined callback function to receive the decrypted data and a pointer to user-defined context data.",
 "NCryptStreamUpdate": "Handle to the stream object created by calling NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect.",
 "NCryptUnprotectSecret": "Pointer to the protection descriptor handle.",
 "PFNCryptStreamOutputCallback pointer": "Pointer to data that you can use to keep track of your application. The data is not modified by the data protection API. Note You can set a pointer to your context data in the pvCallbackCtxt member of the NCRYPT_PROTECT_STREAM_INFO structure before passing a pointer to that structure in the pStreamInfo parameter of the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.",
 "BCryptCloseAlgorithmProvider": "A handle that represents the algorithm provider to close. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.",
 "BCryptCreateHash": "The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified when the provider was created must support the hash interface.",
 "BCryptDecrypt": "The handle of the key to use to decrypt the data. This handle is obtained from one of the key creation functions, such as BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey.",
 "BCryptDeriveKey": "The secret agreement handle to create the key from. This handle is obtained from the BCryptSecretAgreement function.",
 "BCryptDestroyHash": "The handle of the hash or MAC object to destroy. This handle is obtained by using the BCryptCreateHash function.",
 "BCryptDestroyKey": "The handle of the key to destroy.",
 "BCryptDestroySecret": "The BCRYPT_SECRET_HANDLE to be destroyed.",
 "BCryptDuplicateHash": "The handle of the hash or MAC object to duplicate.",
 "BCryptDuplicateKey": "The handle of the key to duplicate. This must be a handle to a symmetric key.",
 "BCryptEncrypt": "The handle of the key to use to encrypt the data. This handle is obtained from one of the key creation functions, such as BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey.",
 "BCryptExportKey": "The handle of the key to export.",
 "BCryptFinalizeKeyPair": "The handle of the key to complete. This handle is obtained by calling the BCryptGenerateKeyPair function.",
 "BCryptFinishHash": "The handle of the hash or MAC object to use to compute the hash or MAC. This handle is obtained by calling the BCryptCreateHash function. After this function has been called, the hash handle passed to this function cannot be used again except in a call to BCryptDestroyHash.",
 "BCryptFreeBuffer": "A pointer to the memory buffer to be freed.",
 "BCryptGenerateKeyPair": "Handle of an algorithm provider that supports signing, asymmetric encryption, or key agreement. This handle must have been created by using the BCryptOpenAlgorithmProvider function.",
 "BCryptGenerateSymmetricKey": "The handle of an algorithm provider created with the BCryptOpenAlgorithmProvider function. The algorithm specified when the provider was created must support symmetric key encryption.",
 "BCryptGenRandom": "The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified when the provider was created must support the random number generator interface.",
 "BCryptGetProperty": "A handle that represents the CNG object to obtain the property value for.",
 "BCryptHashData": "The handle of the hash or MAC object to use to perform the operation. This handle is obtained by calling the BCryptCreateHash function.",
 "BCryptImportKey": "The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.",
 "BCryptImportKeyPair": "The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.",
 "BCryptKeyDerivation": "Handle of the input key.",
 "BCryptOpenAlgorithmProvider": "A pointer to a BCRYPT_ALG_HANDLE variable that receives the CNG provider handle. When you have finished using this handle, release it by passing it to the BCryptCloseAlgorithmProvider function.",
 "BCryptSecretAgreement": "The handle of the private key to use to create the secret agreement value. This key and the hPubKey key must come from the same CNG cryptographic algorithm provider.",
 "BCryptSetProperty": "A handle that represents the CNG object to set the property value for.",
 "BCryptSignHash": "The handle of the key to use to sign the hash.",
 "BCryptVerifySignature": "The handle of the key to use to decrypt the signature. This must be an identical key or the public key portion of the key pair used to sign the data with the BCryptSignHash function.",
 "CreateMappedBitmap": "Type: HINSTANCE Handle to the module instance with the executable file that contains the bitmap resource.",
 "CreateToolbarEx": "Type: HWND Handle to the parent window for the toolbar.",
 "CCHookProc": "A handle to the Color dialog box for which the message is intended.",
 "CFHookProc": "A handle to the Font dialog box for which the message is intended.",
 "ChooseColor": "Type: LPCHOOSECOLOR A pointer to a CHOOSECOLOR structure that contains information used to initialize the dialog box. When ChooseColor returns, this structure contains information about the user's color selection.",
 "ChooseFont": "Type: LPCHOOSEFONT A pointer to a CHOOSEFONT structure that contains information used to initialize the dialog box. When ChooseFont returns, this structure contains information about the user's font selection.",
 "CommDlgExtendedError": null,
 "FindText": "Type: LPFINDREPLACE A pointer to a FINDREPLACE structure that contains information used to initialize the dialog box. The dialog box uses this structure to send information about the user's input to your application. For more information, see the following Remarks section.",
 "FRHookProc": "A handle to the Find or Replace dialog box for which the message is intended.",
 "GetFileTitle": "Type: LPCTSTR The name and location of a file.",
 "GetOpenFileName": "Type: LPOPENFILENAME A pointer to an OPENFILENAME structure that contains information used to initialize the dialog box. When GetOpenFileName returns, this structure contains information about the user's file selection.",
 "GetSaveFileName": "Type: LPOPENFILENAME A pointer to an OPENFILENAME structure that contains information used to initialize the dialog box. When GetSaveFileName returns, this structure contains information about the user's file selection.",
 "OFNHookProc": "A handle to the child dialog box of the Open or Save As dialog box. Use the GetParent function to get the handle to the Open or Save As dialog box.",
 "OFNHookProcOldStyle": "A handle to the Open or Save As dialog box for which the message is intended.",
 "PagePaintHook": "A handle to the Page Setup dialog box.",
 "PageSetupDlg": "Type: LPPAGESETUPDLG A pointer to a PAGESETUPDLG structure that contains information used to initialize the dialog box. The structure receives information about the user's selections when the function returns.",
 "PageSetupHook": "A handle to the Page Setup dialog box for which the message is intended.",
 "PrintDlg": "Type: LPPRINTDLG A pointer to a PRINTDLG structure that contains information used to initialize the dialog box. When PrintDlg returns, this structure contains information about the user's selections.",
 "PrintDlgEx": "Type: LPPRINTDLGEX A pointer to a PRINTDLGEX structure that contains information used to initialize the property sheet. When PrintDlgEx returns, this structure contains information about the user's selections. This structure must be declared dynamically using a memory allocation function.",
 "PrintHookProc": "A handle to the Print dialog box for which the message is intended.",
 "ReplaceText": "Type: LPFINDREPLACE A pointer to a FINDREPLACE structure that contains information used to initialize the dialog box. The dialog box uses this structure to send information about the user's input to your application. For more information, see the following Remarks section.",
 "SetupHookProc": "A handle to the Print Setup dialog box for which the message is intended.",
 "DefineDosDevice": "The controllable aspects of the DefineDosDevice function. This parameter can be one or more of the following values. ValueMeaning DDD_EXACT_MATCH_ON_REMOVE 0x00000004 If this value is specified along with DDD_REMOVE_DEFINITION, the function will use an exact match to determine which mapping to remove. Use this value to ensure that you do not delete something that you did not define. DDD_NO_BROADCAST_SYSTEM 0x00000008 Do not broadcast the WM_SETTINGCHANGE message. By default, this message is broadcast to notify the shell and applications of the change. DDD_RAW_TARGET_PATH 0x00000001 Uses the lpTargetPath string as is. Otherwise, it is converted from an MS-DOS path to a path. DDD_REMOVE_DEFINITION 0x00000002 Removes the specified definition for the specified device. To determine which definition to remove, the function walks the list of mappings for the device, looking for a match of lpTargetPath against a prefix of each mapping associated with this device. The first mapping that matches is the one removed, and then the function returns. If lpTargetPath is NULL or a pointer to a NULL string, the function will remove the first mapping associated with the device and pop the most recent one pushed. If there is nothing left to pop, the device name will be removed. If this value is not specified, the string pointed to by the lpTargetPath parameter will become the new mapping for this device.",
 "DeleteVolumeMountPoint": "The drive letter or mounted folder to be deleted. A trailing backslash is required, for example, \"X:\\\" or \"Y:\\MountX\\\".",
 "FindFirstVolume": "A pointer to a buffer that receives a null-terminated string that specifies a volume GUID path for the first volume that is found.",
 "FindFirstVolumeMountPoint": "A volume GUID path for the volume to scan for mounted folders. A trailing backslash is required.",
 "FindNextVolume": "The volume search handle returned by a previous call to the FindFirstVolume function.",
 "FindNextVolumeMountPoint": "A mounted folder search handle returned by a previous call to the FindFirstVolumeMountPoint function.",
 "FindVolumeClose": "The volume search handle to be closed. This handle must have been previously opened by the FindFirstVolume function.",
 "FindVolumeMountPointClose": "The mounted folder search handle to be closed. This handle must have been previously opened by the FindFirstVolumeMountPoint function.",
 "GetDriveType": "The root directory for the drive. A trailing backslash is required. If this parameter is NULL, the function uses the root of the current directory.",
 "GetLogicalDrives": null,
 "GetLogicalDriveStrings": "The maximum size of the buffer pointed to by lpBuffer, in TCHARs. This size does not include the terminating null character. If this parameter is zero, lpBuffer is not used.",
 "GetVolumeInformation": "A pointer to a string that contains the root directory of the volume to be described. If this parameter is NULL, the root of the current directory is used. A trailing backslash is required. For example, you specify \\\\MyServer\\MyShare as \"\\\\MyServer\\MyShare\\\", or the C drive as \"C:\\\".",
 "GetVolumeInformationByHandleW": "A handle to the file.",
 "GetVolumeNameForVolumeMountPoint": "A pointer to a string that contains the path of a mounted folder (for example, \"Y:\\MountX\\\") or a drive letter (for example, \"X:\\\"). The string must end with a trailing backslash ('\\').",
 "GetVolumePathName": "A pointer to the input path string. Both absolute and relative file and directory names, for example \"..\", are acceptable in this path. If you specify a relative directory or file name without a volume qualifier, GetVolumePathName returns the drive letter of the boot volume. If this parameter is an empty string, \"\", the function fails but the last error is set to ERROR_SUCCESS.",
 "GetVolumePathNamesForVolumeName": "A volume GUID path for the volume. A volume GUID path is of the form \"\\\\?\\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\\\".",
 "QueryDosDevice": "An MS-DOS device name string specifying the target of the query. The device name cannot have a trailing backslash; for example, use \"C:\", not \"C:\\\". This parameter can be NULL. In that case, the QueryDosDevice function will store a list of all existing MS-DOS device names into the buffer pointed to by lpTargetPath.",
 "SetVolumeLabel": "A pointer to a string that contains the volume's drive letter (for example, X:\\) or the path of a mounted folder that is associated with the volume (for example, Y:\\MountX\\). The string must end with a trailing backslash ('\\'). If this parameter is NULL, the root of the current directory is used.",
 "SetVolumeMountPoint": "The user-mode path to be associated with the volume. This may be a drive letter (for example, \"X:\\\") or a directory on another volume (for example, \"Y:\\MountX\\\"). The string must end with a trailing backslash ('\\').",
 "AddVectoredContinueHandler": "The order in which the handler should be called. If the parameter is nonzero, the handler is the first handler to be called. If the parameter is zero, the handler is the last handler to be called.",
 "AddVectoredExceptionHandler": "The order in which the handler should be called. If the parameter is nonzero, the handler is the first handler to be called. If the parameter is zero, the handler is the last handler to be called.",
 "RaiseException": "An application-defined exception code of the exception being raised. The filter expression and exception-handler block of an exception handler can use the GetExceptionCode function to retrieve this value. Note that the system will clear bit 28 of dwExceptionCode before displaying a message This bit is a reserved exception bit, used by the system for its own purposes.",
 "RemoveVectoredContinueHandler": "A pointer to a vectored exception handler previously registered using the AddVectoredContinueHandler function.",
 "RemoveVectoredExceptionHandler": "A handle to the vectored exception handler previously registered using the AddVectoredExceptionHandler function.",
 "RtlAddGrowableFunctionTable": "A pointer to a variable that receives an opaque reference to the newly-added table on success.",
 "RtlDeleteGrowableFunctionTable": "An opaque reference returned by RtlAddGrowableFunctionTable.",
 "RtlGrowFunctionTable": "An opaque reference returned by RtlAddGrowableFunctionTable..",
 "SetUnhandledExceptionFilter": "A pointer to a top-level exception filter function that will be called whenever the UnhandledExceptionFilter function gets control, and the process is not being debugged. A value of NULL for this parameter specifies default handling within UnhandledExceptionFilter. The filter function has syntax similar to that of UnhandledExceptionFilter: It takes a single parameter of type LPEXCEPTION_POINTERS, has a WINAPI calling convention, and returns a value of type LONG. The filter function should return one of the following values. ValueMeaning EXCEPTION_EXECUTE_HANDLER 0x1 Return from UnhandledExceptionFilter and execute the associated exception handler. This usually results in process termination. EXCEPTION_CONTINUE_EXECUTION 0xffffffff Return from UnhandledExceptionFilter and continue execution from the point of the exception. Note that the filter function is free to modify the continuation state by modifying the exception information supplied through its LPEXCEPTION_POINTERS parameter. EXCEPTION_CONTINUE_SEARCH 0x0 Proceed with normal execution of UnhandledExceptionFilter. That means obeying the SetErrorMode flags, or invoking the Application Error pop-up message box.",
 "UnhandledExceptionFilter": "A pointer to an EXCEPTION_POINTERS structure that specifies a description of the exception and the processor context at the time of the exception. This pointer is the return value of a call to the GetExceptionInformation function.",
 "VectoredHandler": "A pointer to an EXCEPTION_POINTERS structure that receives the exception record.",
 "RtlAddFunctionTable": "A pointer to an array of function entries. For a definition of the PRUNTIME_FUNCTION type, see WinNT.h. For more information on runtime function entries, see the calling convention documentation for the processor.",
 "RtlCaptureContext": "A pointer to a CONTEXT structure.",
 "RtlDeleteFunctionTable": "A pointer to an array of function entries that were previously passed to RtlAddFunctionTable or an identifier previously passed to RtlInstallFunctionTableCallback. For a definition of the PRUNTIME_FUNCTION type, see WinNT.h.",
 "RtlInstallFunctionTableCallback": "The identifier for the dynamic function table callback. The two low-order bits must be set. For example, BaseAddress|0x3.",
 "RtlRestoreContext": "A pointer to a CONTEXT structure.",
 "CreateDeviceAccessInstance": null,
 "ActivateKeyboardLayout": "Type: HKL Input locale identifier to be activated. \t\t\t\t\t\t The input locale identifier must have been loaded by a previous call to the LoadKeyboardLayout function. This parameter must be either the handle to a keyboard layout or one of the following values. ValueMeaning HKL_NEXT 1 Selects the next locale identifier in the circular list of loaded locale identifiers maintained by the system. HKL_PREV 0 Selects the previous locale identifier in the circular list of loaded locale identifiers maintained by the system.",
 "BlockInput": "Type: BOOL The function's purpose. If this parameter is TRUE, keyboard and mouse input events are blocked. If this parameter is FALSE, keyboard and mouse events are unblocked. Note that only the thread that blocked input can successfully unblock input.",
 "EnableWindow": "Type: HWND A handle to the window to be enabled or disabled.",
 "GetActiveWindow": null,
 "GetAsyncKeyState": "Type: int The virtual-key code. For more information, see Virtual Key Codes. \t\t\t\t\t You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.",
 "GetFocus": null,
 "GetKeyboardLayout": "Type: DWORD The identifier of the thread to query, or 0 for the current thread.",
 "GetKeyboardLayoutList": "Type: int The maximum number of handles that the buffer can hold.",
 "GetKeyboardLayoutName": "Type: LPTSTR The buffer (of at least KL_NAMELENGTH characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the LoadKeyboardLayout function, unless layout substitution took place.",
 "GetKeyboardState": "Type: PBYTE The 256-byte array that receives the status data for each virtual key.",
 "GetKeyNameText": "Type: LONG The second parameter of the keyboard message (such as \t\t\t\t\tWM_KEYDOWN) to be processed. The function interprets the following bit positions in the lParam. BitsMeaning 16-23Scan code. 24Extended-key flag. Distinguishes some keys on an enhanced keyboard. 25\"Do not care\" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right CTRL and SHIFT keys, for example.",
 "GetKeyState": "Type: int A virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), \t\t\t\t\tnVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the \"o\" key, whereas VK_OEM_1 refers to the \"o with umlaut\" key.",
 "GetLastInputInfo": "Type: PLASTINPUTINFO A pointer to a LASTINPUTINFO structure that receives the time of the last input event.",
 "IsWindowEnabled": "Type: HWND A handle to the window to be tested.",
 "LoadKeyboardLayout": "Type: LPCTSTR The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the Language Identifier (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named \"00000409\". Variants of U.S. English layout (such as the Dvorak layout) are named \"00010409\", \"00020409\", and so on.",
 "MapVirtualKey": "Type: UINT The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.",
 "MapVirtualKeyEx": "Type: UINT The virtual-key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter. Starting with Windows Vista, the high byte of the uCode value can contain either 0xe0 or 0xe1 to specify the extended scan code.",
 "OemKeyScan": "Type: WORD The ASCII value of the OEM character.",
 "RegisterHotKey": "Type: HWND A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.",
 "SendInput": "Type: UINT The number of structures in the pInputs array.",
 "SetActiveWindow": "Type: HWND A handle to the top-level window to be activated.",
 "SetFocus": "Type: HWND A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored.",
 "SetKeyboardState": "Type: LPBYTE A pointer to a 256-byte array that contains keyboard key states.",
 "ToAscii": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
 "ToAsciiEx": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
 "ToUnicode": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
 "ToUnicodeEx": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
 "UnloadKeyboardLayout": "Type: HKL The input locale identifier to be unloaded.",
 "UnregisterHotKey": "Type: HWND A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.",
 "VkKeyScanEx": "Type: TCHAR The character to be translated into a virtual-key code.",
 "GetKBCodePage": null,
 "keybd_event": "Type: BYTE A virtual-key code. The code must be a value in the range 1 to 254. For a complete list, see Virtual Key Codes.",
 "VkKeyScan": "Type: TCHAR The character to be translated into a virtual-key code.",
 "TranslateMessage": "Type: const MSG* A pointer to an MSG structure that contains message information retrieved from the calling thread's message queue by using the GetMessage or PeekMessage function.",
 "ApplicationRecoveryFinished": "Specify TRUE to indicate that the data was successfully recovered; otherwise, FALSE.",
 "ApplicationRecoveryInProgress": "Indicates whether the user has canceled the recovery process. Set by WER if the user clicks the Cancel button.",
 "GetApplicationRecoveryCallback": "A handle to the process. This handle must have the PROCESS_VM_READ access right.",
 "GetApplicationRestartSettings": "A handle to the process. This handle must have the PROCESS_VM_READ access right.",
 "RegisterApplicationRecoveryCallback": "A pointer to the recovery callback function. For more information, see ApplicationRecoveryCallback.",
 "RegisterApplicationRestart": "A pointer to a Unicode string that specifies the command-line arguments for the application when it is restarted. The maximum size of the command line that you can specify is RESTART_MAX_CMD_LINE characters. Do not include the name of the executable in the command line; this function adds it for you. If this parameter is NULL or an empty string, the previously registered command line is removed. If the argument contains spaces, use quotes around the argument.",
 "UnregisterApplicationRecoveryCallback": null,
 "UnregisterApplicationRestart": null,
 "AutoCorrectProc": "Type: LANGID Language ID that identifies the autocorrect file to use for automatic correcting.",
 "EditStreamCallback": "Type: DWORD_PTR Value of the \t\t\t\t\tdwCookie member of the EDITSTREAM structure. The application specifies this value when it sends the EM_STREAMIN or EM_STREAMOUT message.",
 "EditWordBreakProcEx": "Type: char* Pointer to the text at the current position. ...",
 "GetMathAlphanumeric": "Type: LONG A BMP character.",
 "GetMathAlphanumericCode": "Type: DWORD The trailing byte of the math surrogate pair. ...",
 "HyphenateProc": "Type: WCHAR* Pointer to the word to hyphenate.",
 "MathBuildDown": "Type: ITextRange2* On input, a text range object that contains the built-up math objects to convert to linear form. On output, the object contains the linear form.",
 "MathBuildUp": "Type: ITextRange2* On input, a text range object that contains the linearly formatted math expressions to be converted into built-up math. On output, the object contains the built-up math.",
 "MathTranslate": "Type: ITextRange2* On entry, this parameter specifies the text range that contains the math characters to translate. On successful exit, the characters in the range have been translated as specified",
 "REExtendedRegisterClass": null,
 "NcFreeNetconProperties": "Pointer to a NETCON_PROPERTIES structure to be freed.",
 "NcIsValidConnectionName": "Connection name to check.",
 "AccNotifyTouchInteraction": "A window that belongs to the AT process that is calling AccNotifyTouchInteraction.",
 "AccSetRunningUtilityState": "Type: HWND The handle of the AT application window. This parameter must not be NULL.",
 "CreateStdAccessibleObject": "Type: HWND Window handle of the system-provided user interface element (a control) for which an accessible object is created.",
 "CreateStdAccessibleProxy": "Type: HWND Window handle of the system-provided user interface element (a control) for which an accessible object is created.",
 "LresultFromObject": "Type: REFIID Reference identifier of the interface provided to the client. This parameter is IID_IAccessible.",
 "ObjectFromLresult": "Type: LRESULT A 32-bit value returned by a previous successful call to the LresultFromObject function.",
 "IsWinEventHookInstalled": "Type: DWORD The event constant that hooks might be notified of. The function checks whether there is an installed hook for this event constant.",
 "NotifyWinEvent": "Type: DWORD Specifies the event that occurred. This value must be one of the event constants.",
 "DlgDirList": "Type: HWND A handle to the dialog box that contains the list box.",
 "DlgDirSelectEx": "Type: HWND A handle to the dialog box that contains the list box.",
 "DrawInsert": "Type: HWND A handle to the parent window of the drag list box.",
 "GetListBoxInfo": "Type: HWND A handle to the list box whose number of items per column is to be retrieved.",
 "LBItemFromPt": "Type: HWND A handle to the list box to check.",
 "MakeDragList": "Type: HWND A handle to the single-selection list box.",
 "IoGetDeviceProperty": "Pointer to the physical device object (PDO) for the device being queried.",
 "IoReportDetectedDevice": "Pointer to the driver object of the driver that detected the device.",
 "IoReportResourceForDetection": "Pointer to the driver object that was input to the driver's DriverEntry routine.",
 "IoGetDmaAdapter": "Pointer to the physical device object for the device requesting the DMA adapter structure.",
 "IoGetConfigurationInformation": null,
 "HalExamineMBR": "A pointer to the device object for the device being examined.",
 "IoReadPartitionTable": "Pointer to the device object for the disk whose partitions are to be read.",
 "IoInvalidateDeviceRelations": "Pointer to the PDO for the device.",
 "IoInvalidateDeviceState": "Pointer to the PDO for the device.",
 "IoRegisterPlugPlayNotification": "The category of PnP event for which the callback routine is being registered. EventCategory must be one of the following: EventCategoryDeviceInterfaceChange PnP events in this category include the arrival (enabling) of a new instance of a device interface class (GUID_DEVICE_INTERFACE_ARRIVAL), or the removal (disabling) of an existing device interface instance (GUID_DEVICE_INTERFACE_REMOVAL). EventCategoryHardwareProfileChange PnP events in this category include query-change (GUID_HWPROFILE_QUERY_CHANGE), change-complete (GUID_HWPROFILE_CHANGE_COMPLETE), and change-cancel (GUID_HWPROFILE_CHANGE_CANCELLED) of a hardware profile. EventCategoryTargetDeviceChange PnP events in this category include events related to removing a device: the device's drivers received a query-remove IRP (GUID_TARGET_DEVICE_QUERY_REMOVE), the drivers completed a remove IRP (GUID_TARGET_DEVICE_REMOVE_COMPLETE), or the drivers received a cancel-remove IRP (GUID_TARGET_DEVICE_REMOVE_CANCELLED). This category is also used for custom notification events.",
 "IoUnregisterPlugPlayNotification": "Pointer to an opaque value representing the registration to be removed. The value was returned by a previous call to IoRegisterPlugPlayNotification.",
 "IoRequestDeviceEject": "Pointer to the PDO for the device.",
 "IoReportTargetDeviceChange": "Pointer to the PDO of the device being reported.",
 "IoOpenDeviceInterfaceRegistryKey": "Pointer to a string identifying the device interface instance. This string was obtained from a previous call to IoGetDeviceInterfaces, IoGetDeviceInterfaceAlias, or IoRegisterDeviceInterface.",
 "IoOpenDeviceRegistryKey": "Pointer to the PDO of the device instance for which the registry key is to be opened.",
 "IoRegisterDeviceInterface": "A pointer to the PDO for the device.",
 "IoSetDeviceInterfaceState": "Pointer to a string that identifies the device interface instance that is being enabled or disabled. This string was obtained from a previous call to IoRegisterDeviceInterface or IoGetDeviceInterfaces.",
 "RtlCheckRegistryKey": "Specifies whether Path is an absolute registry path or is relative to a predefined key path as one of the following. ValueMeaning RTL_REGISTRY_ABSOLUTE Path is an absolute registry path. RTL_REGISTRY_CONTROL Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Control. RTL_REGISTRY_DEVICEMAP Path is relative to \\Registry\\Machine\\Hardware\\DeviceMap. RTL_REGISTRY_SERVICES Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Services. RTL_REGISTRY_USER Path is relative to the registry settings for the current user. (For a system process, this is \\Users\\.Default.) This is equivalent to HKEY_CURRENT_USER in user mode. RTL_REGISTRY_WINDOWS_NT Path is relative to \\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion. RTL_REGISTRY_HANDLE This value should not be passed into this routine. Despite the redundancy of a check for the existence of an already-opened key, it has the side effect of closing the passed handle.",
 "RtlCreateRegistryKey": "Specifies whether Path is an absolute registry path or is relative to a predefined key path as one of the following. ValueMeaning RTL_REGISTRY_ABSOLUTE Path is an absolute registry path. RTL_REGISTRY_SERVICES Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Services. RTL_REGISTRY_CONTROL Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Control. RTL_REGISTRY_WINDOWS_NT Path is relative to \\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion. RTL_REGISTRY_DEVICEMAP Path is relative to \\Registry\\Machine\\Hardware\\DeviceMap. RTL_REGISTRY_USER Path is relative to \\Registry\\User\\CurrentUser. (For a system process, this is \\Users\\.Default.)",
 "RtlQueryRegistryValues": "Specifies whether Path is an absolute registry path or is relative to a predefined path as one of the following. ValueMeaning RTL_REGISTRY_ABSOLUTE Path is an absolute registry path. RTL_REGISTRY_CONTROL Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Control. RTL_REGISTRY_DEVICEMAP Path is relative to \\Registry\\Machine\\Hardware\\DeviceMap. RTL_REGISTRY_SERVICES Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Services. RTL_REGISTRY_USER Path is relative to \\Registry\\User\\CurrentUser. (For a system process, this is \\User\\.Default.) RTL_REGISTRY_WINDOWS_NT Path is relative to \\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion. The RelativeTo value can be modified by bitwise-ORing it with one of the following flags. RTL_REGISTRY_OPTIONAL Specifies that the key referenced by this parameter and the Path parameter are optional. RTL_REGISTRY_HANDLE Specifies that the Path parameter is actually a registry handle to use.",
 "RtlWriteRegistryValue": "Specifies whether Path is an absolute registry path or is relative to a predefined path as one of the following. ValueMeaning RTL_REGISTRY_ABSOLUTE Path is an absolute registry path. RTL_REGISTRY_SERVICES Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Services. RTL_REGISTRY_CONTROL Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Control. RTL_REGISTRY_WINDOWS_NT Path is relative to \\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion. RTL_REGISTRY_DEVICEMAP Path is relative to \\Registry\\Machine\\Hardware\\DeviceMap. RTL_REGISTRY_USER Path is relative to \\Registry\\User\\CurrentUser. (For a system process, this is \\Users\\.Default.) RTL_REGISTRY_OPTIONAL Specifies that the key referenced by this parameter and the Path parameter are optional. RTL_REGISTRY_HANDLE Specifies that the Path parameter is actually a registry handle to use. This value is optional.",
 "RtlDeleteRegistryValue": "Specifies whether Path is an absolute registry path or is relative to a predefined key path as one of the following. ValueMeaning RTL_REGISTRY_ABSOLUTE Path is an absolute registry path. RTL_REGISTRY_SERVICES Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Services. RTL_REGISTRY_CONTROL Path is relative to \\Registry\\Machine\\System\\CurrentControlSet\\Control. RTL_REGISTRY_WINDOWS_NT Path is relative to \\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion. RTL_REGISTRY_DEVICEMAP Path is relative to \\Registry\\Machine\\Hardware\\DeviceMap. RTL_REGISTRY_USER Path is relative to \\Registry\\User\\CurrentUser. (For a system process, this is \\Users\\.Default.) RTL_REGISTRY_HANDLE Specifies that the Path parameter is actually a registry handle to use. This value is optional.",
 "ZwCreateKey": "Pointer to a HANDLE variable that receives a handle to the key.",
 "ZwOpenKey": "Pointer to the HANDLE variable that receives the handle to the key.",
 "ZwQueryKey": "Handle to the registry key to obtain information about. This handle is created by a successful call to ZwCreateKey or ZwOpenKey.",
 "ZwEnumerateKey": "Handle to the registry key that contains the subkeys to be enumerated. The handle is created by a successful call to ZwCreateKey or ZwOpenKey.",
 "ZwEnumerateValueKey": "Handle to the registry key that you want to enumerate value entries for. A successful call to ZwCreateKey or ZwOpenKey creates this handle.",
 "ZwQueryValueKey": "Handle to the key to read value entries from. This handle is created by a successful call to ZwCreateKey or ZwOpenKey.",
 "ZwSetValueKey": "Handle to the registry key to write a value entry for. This handle is created by a successful call to ZwCreateKey or ZwOpenKey.",
 "ZwFlushKey": "Handle to the registry key to be flushed to disk. This handle is created by a successful call to ZwCreateKey or ZwOpenKey.",
 "ZwDeleteKey": "Handle to the registry key to be deleted. The handle is created by a successful call to ZwCreateKey or ZwOpenKey.",
 "ZwClose": "Handle to an object of any type.",
 "IoCreateDevice": "Pointer to the driver object for the caller. Each driver receives a pointer to its driver object in a parameter to its DriverEntry routine. WDM function and filter drivers also receive a driver object pointer in their AddDevice routines.",
 "IoDeleteDevice": "Pointer to the device object to be deleted.",
 "IoGetDeviceObjectPointer": "Pointer to a buffer that contains a Unicode string that is the name of the device object.",
 "IoAttachDeviceToDeviceStack": "Pointer to the caller-created device object.",
 "IoGetAttachedDeviceReference": "Pointer to the device object for which the topmost attached device object is retrieved.",
 "IoDetachDevice": "Pointer to the lower driver's device object. The caller previously called IoAttachDevice or IoAttachDeviceToDeviceStack successfully to get this pointer.",
 "IoAllocateDriverObjectExtension": "Pointer to a driver object to which the context area will be associated.",
 "IoGetDriverObjectExtension": "Specifies the driver object with which the context area is associated.",
 "IoIsWdmVersionAvailable": "Specifies the major version number of WDM that is requested.",
 "IoDeleteSymbolicLink": "Pointer to a buffered Unicode string that is the user-visible name for the symbolic link.",
 "IoAssignArcName": "Pointer to a buffer containing the ARC name of the device. The ARC name must be a Unicode string.",
 "IoDeassignArcName": "Pointer to a buffered Unicode string that is the ARC name.",
 "IoSetShareAccess": "Specifies an ACCESS_MASK value that represents the type of access requested for the FileObject. See IoCreateFile for a complete list of system-defined DesiredAccess flags.",
 "IoConnectInterrupt": "Pointer to the address of driver-supplied storage for a pointer to a set of interrupt objects. This pointer must be passed in subsequent calls to KeSynchronizeExecution.",
 "IoConnectInterruptEx": "For more information, see the WdmlibIoConnectInterruptEx function.",
 "IoDisconnectInterrupt": "A pointer to a KINTERRUPT structure. The caller obtained this pointer from the IoConnectInterrupt call that previously connected the interrupt or interrupts.",
 "KeInitializeSpinLock": "Pointer to a spin lock, for which the caller must provide the storage.",
 "InitializeListHead": "Pointer to a LIST_ENTRY structure that serves as the list header.",
 "ExInitializeSListHead": "A pointer to the SLIST_HEADER structure to initialize. The structure must be 16-byte aligned on 64-bit platforms.",
 "KeInitializeDeviceQueue": "Pointer to a device queue object for which the caller provides the storage.",
 "IoCsqInitialize": "Pointer to the IO_CSQ structure to be initialized by IoCsqInitialize.",
 "ZwCreateFile": "A pointer to a HANDLE variable that receives a handle to the file.",
 "ZwQueryInformationFile": "Handle to a file object. The handle is created by a successful call to ZwCreateFile or ZwOpenFile.",
 "IoGetFileObjectGenericMapping": null,
 "ZwReadFile": "Handle to the file object. This handle is created by a successful call to ZwCreateFile or ZwOpenFile.",
 "ZwSetInformationFile": "Handle to the file object. This handle is created by a successful call to ZwCreateFile or ZwOpenFile.",
 "ZwWriteFile": "Handle to the file object. This handle is created by a successful call to ZwCreateFile or ZwOpenFile.",
 "IoBuildAsynchronousFsdRequest": "The major function code to be set in the IRP. This code can be IRP_MJ_PNP, IRP_MJ_READ, IRP_MJ_WRITE, IRP_MJ_FLUSH_BUFFERS, or IRP_MJ_SHUTDOWN.",
 "IoGetCurrentIrpStackLocation": "A pointer to the IRP.",
 "IoGetNextIrpStackLocation": "A pointer to the IRP.",
 "IoCopyCurrentIrpStackLocationToNext": "A pointer to the IRP.",
 "IoGetRelatedDeviceObject": "Pointer to the file object.",
 "IoGetFunctionCodeFromCtlCode": "The IOCTL_XXX (or FSCTL_XXX) value, which can be obtained from the driver's I/O stack location of the IRP at Parameters.DeviceIoControl.IoControlCode.",
 "IoValidateDeviceIoControlAccess": "For more information, see the WdmlibIoValidateDeviceIoControlAccess function.",
 "IoSetCompletionRoutine": "Pointer to the IRP that the driver is processing.",
 "KeSynchronizeExecution": "A pointer to a set of interrupt objects. The caller obtained this pointer from the IoConnectInterrupt or IoConnectInterruptEx routine.",
 "KeDelayExecutionThread": "Specifies the processor mode in which the caller is waiting, which can be either KernelMode or UserMode. Lower-level drivers should specify KernelMode.",
 "ExInitializeResourceLite": "A pointer to the caller-supplied storage, which must be at least sizeof(ERESOURCE), for the resource variable being initialized. The storage must be 4-byte aligned on 32-bit platforms, and 8-byte aligned on 64-bit platforms.",
 "ExReinitializeResourceLite": "A pointer to the caller-supplied resource variable to be reinitialized.",
 "ExAcquireResourceExclusiveLite": "A pointer to the resource to acquire.",
 "ExAcquireResourceSharedLite": "A pointer to the resource to acquire.",
 "ExAcquireSharedStarveExclusive": "A pointer to the resource to be acquired for shared access.",
 "ExAcquireSharedWaitForExclusive": "A pointer to the resource to be acquired for shared access.",
 "ExIsResourceAcquiredExclusiveLite": "A pointer to the resource to be queried.",
 "ExIsResourceAcquiredSharedLite": "A pointer to the resource to be queried.",
 "ExGetExclusiveWaiterCount": "A pointer to the resource to be tested.",
 "ExGetSharedWaiterCount": "A pointer to the resource to be tested.",
 "ExConvertExclusiveToSharedLite": "A pointer to the resource for which the access should be converted.",
 "ExGetCurrentResourceThread": null,
 "ExReleaseResourceForThreadLite": "A pointer to the resource to release.",
 "ExDeleteResourceLite": "A pointer to the caller-supplied storage for the initialized resource variable to be deleted.",
 "IoQueueWorkItem": "Pointer to an IO_WORKITEM structure that was allocated by IoAllocateWorkItem or initialized by IoInitializeWorkItem.",
 "KeSetTimer": "Pointer to a timer object that was initialized with KeInitializeTimer or KeInitializeTimerEx.",
 "KeSetTimerEx": "Pointer to a timer object that was initialized with KeInitializeTimer or KeInitializeTimerEx.",
 "KeCancelTimer": "Pointer to an initialized timer object, for which the caller provides the storage.",
 "KeReadStateTimer": "A pointer to an initialized timer object, for which the caller provides the storage.",
 "KeSetEvent": "A pointer to an initialized event object for which the caller provides the storage.",
 "KeClearEvent": "Pointer to an initialized dispatcher object of type event for which the caller supplies the storage.",
 "KeResetEvent": "A pointer to an initialized dispatcher object of type event for which the caller provides the storage.",
 "KeReadStateEvent": "A pointer to an initialized event object for which the caller provides the storage.",
 "ExAcquireFastMutex": "A pointer to an initialized fast mutex for which the caller provides the storage.",
 "ExTryToAcquireFastMutex": "A pointer to the fast mutex to be acquired if it is not currently owned by another thread.",
 "ExReleaseFastMutex": "A pointer to the fast mutex to be released.",
 "ExAcquireFastMutexUnsafe": "A pointer to a FAST_MUTEX structure that the caller provides the storage for. The caller previously initialized this structure by a call to the ExInitializeFastMutex routine.",
 "ExReleaseFastMutexUnsafe": "A pointer to the fast mutex to be released.",
 "KeReleaseMutex": "A pointer to an initialized mutex object for which the caller provides the storage.",
 "KeReadStateMutex": "Pointer to an initialized mutex object for which the caller provides the storage.",
 "KeReleaseSemaphore": "A pointer to an initialized semaphore object for which the caller provides the storage.",
 "KeReadStateSemaphore": "Pointer to an initialized semaphore object for which the caller provides the storage.",
 "KeWaitForSingleObject": "Pointer to an initialized dispatcher object (event, mutex, semaphore, thread, or timer) for which the caller supplies the storage.",
 "KeWaitForMutexObject": "Pointer to an initialized mutex object for which the caller supplies the storage.",
 "KeWaitForMultipleObjects": "The number of objects to be waited on. This parameter specifies the number of elements in the array pointed to by the Object parameter.",
 "PsGetCurrentThread": null,
 "KeGetCurrentThread": null,
 "IoGetCurrentProcess": null,
 "PsGetCurrentProcess": null,
 "KeEnterCriticalRegion": null,
 "KeLeaveCriticalRegion": null,
 "KeAreApcsDisabled": null,
 "KeSaveFloatingPointState": "Pointer to a caller-allocated resident buffer, which must be at least sizeof(KFLOATING_SAVE).",
 "KeRestoreFloatingPointState": "A pointer to the KFLOATING_SAVE structure that was passed in the preceding call to KeSaveFloatingPointState.",
 "ZwSetInformationThread": "Handle to the thread object. To create a new thread and get a handle to it, call PsCreateSystemThread. To specify the current thread, use the ZwCurrentThread macro.",
 "PsGetCurrentProcessId": null,
 "PsGetCurrentThreadId": null,
 "PsSetCreateProcessNotifyRoutine": "Specifies the entry point of a caller-supplied process-creation callback routine. See PCREATE_PROCESS_NOTIFY_ROUTINE.",
 "PsSetCreateThreadNotifyRoutine": "A pointer to the driver's implementation of PCREATE_THREAD_NOTIFY_ROUTINE routine.",
 "PsSetLoadImageNotifyRoutine": "A pointer to the caller-implemented PLOAD_IMAGE_NOTIFY_ROUTINE callback routine for load-image notifications.",
 "IoInitializeTimer": "Pointer to a device object representing a device on which I/O operations can time out.",
 "IoAcquireCancelSpinLock": "Pointer to a variable in which to save the current IRQL for a subsequent call to IoReleaseCancelSpinLock. Usually, the Irql is saved on the stack as a local variable.",
 "IoSetCancelRoutine": "Pointer to the IRP being put into or removed from a cancelable state.",
 "KeRaiseIrql": "Specifies the new IRQL to which the hardware priority is to be raised.",
 "KeRaiseIrqlToDpcLevel": null,
 "KeLowerIrql": "Specifies the IRQL that was returned from KeRaiseIrql.",
 "KeGetCurrentIrql": null,
 "ExAllocatePoolWithTag": "The type of pool memory to allocate. For a description of the available pool memory types, see POOL_TYPE. You can modify the PoolType value by bitwise-ORing this value with the POOL_RAISE_IF_ALLOCATION_FAILURE flag. This flag causes an exception to be raised if the request cannot be satisfied. Use of the POOL_RAISE_IF_ALLOCATION_FAILURE flag is not recommended because it is costly. Similarly, you can modify the PoolType value by bitwise-ORing this value with the POOL_COLD_ALLOCATION flag as a hint to the kernel to allocate the memory from pages that are likely to be paged out quickly. To reduce the amount of resident pool memory as much as possible, you should not reference these allocations frequently. The POOL_COLD_ALLOCATION flag is only advisory and is supported starting with Windows XP.",
 "ExAllocatePoolWithQuotaTag": "Specifies the type of pool memory to allocate. For a description of the available pool memory types, see POOL_TYPE. You can modify the PoolType value by bitwise-ORing this value with the POOL_QUOTA_FAIL_INSTEAD_OF_RAISE flag. This flag causes the routine to return a NULL value if the request cannot be satisfied. Similarly, you can modify the PoolType value by bitwise-ORing this value with the POOL_COLD_ALLOCATION flag as a hint to the kernel to allocate the memory from pages that are likely to be paged out quickly. To reduce the amount of resident pool memory as much as possible, you should not reference these allocations frequently. The POOL_COLD_ALLOCATION flag is only advisory and is supported in Windows XP and later versions of the Windows operating system.",
 "ExFreePool": "Specifies the address of the block of pool memory being deallocated.",
 "ExFreePoolWithTag": "Specifies the beginning address of a block of pool memory allocated by either ExAllocatePoolWithTag or ExAllocatePoolWithQuotaTag.",
 "ExInitializeNPagedLookasideList": "A pointer to the NPAGED_LOOKASIDE_LIST structure to initialize. The caller must use nonpaged system space for the structure. On 64-bit platforms, this structure must be 16-byte aligned.",
 "ExAllocateFromNPagedLookasideList": "A pointer to the NPAGED_LOOKASIDE_LIST structure for the lookaside list, which the caller already initialized with ExInitializeNPagedLookasideList.",
 "ExFreeToNPagedLookasideList": "A pointer to the NPAGED_LOOKASIDE_LIST structure for the lookaside list, which the caller already initialized with ExInitializeNPagedLookasideList.",
 "ExDeleteNPagedLookasideList": "A pointer to the NPAGED_LOOKASIDE_LIST structure for the lookaside list, which the caller originally set up with ExInitializeNPagedLookasideList.",
 "ExInitializePagedLookasideList": "A pointer to the PAGED_LOOKASIDE_LIST structure to initialize. The caller must use nonpaged system space for the structure, even though the entries in this lookaside list will be allocated from pageable memory. On 64-bit platforms, this structure must be 16-byte aligned.",
 "ExAllocateFromPagedLookasideList": "A pointer to the PAGED_LOOKASIDE_LIST structure for the lookaside list, which the caller already initialized with ExInitializePagedLookasideList.",
 "ExFreeToPagedLookasideList": "A pointer to the PAGED_LOOKASIDE_LIST structure for the lookaside list, which the caller already initialized with ExInitializePagedLookasideList, which the caller already initialized with ExInitializePagedLookasideList.",
 "ExDeletePagedLookasideList": "A pointer to the PAGED_LOOKASIDE_LIST structure for the lookaside list, which the caller already initialized with ExInitializePagedLookasideList, which the caller originally set up with ExInitializePagedLookasideList.",
 "MmQuerySystemSize": null,
 "MmIsThisAnNtAsSystem": null,
 "ZwOpenSection": "Pointer to a HANDLE variable that receives a handle to the section object.",
 "ZwMapViewOfSection": "Handle to a section object. This handle is created by a successful call to ZwCreateSection or ZwOpenSection.",
 "ZwUnmapViewOfSection": "Handle to a process object that was previously passed to ZwMapViewOfSection.",
 "MmLockPagableCodeSection": "Specifies a symbolic address. This address is typically the name of a driver function within a section of driver code that has been marked with something like #pragma alloc_text (PAGExxxx, driverfunction). All functions in the PAGExxxx section are then guaranteed to be locked down when this function returns.",
 "MmLockPagableDataSection": "Specifies the symbolic address of one item of data within the pageable section.",
 "MmLockPagableSectionByHandle": "The handle to a pageable code or data section. The caller obtained this handle from a previous call to the MmLockPagableCodeSection or MmLockPagableDataSection routine.",
 "MmUnlockPagableImageSection": "Specifies the handle returned by a call to MmLockPagableCodeSection or MmLockPagableDataSection.",
 "MmPageEntireDriver": "Pointer to a virtual address within the driver (for example, the address of the DriverEntry routine).",
 "MmResetDriverPaging": "A pointer to a virtual address in the driver (for example, the address of the DriverEntry routine).",
 "READ_PORT_UCHAR": "Specifies the port address, which must be a mapped memory range in I/O space.",
 "READ_PORT_USHORT": "Specifies the port address, which must be a mapped range in I/O space.",
 "READ_PORT_ULONG": "Specifies the port address, which must be a mapped range in I/O space.",
 "READ_PORT_BUFFER_UCHAR": "Specifies the port address, which must be a mapped memory range in I/O space.",
 "READ_PORT_BUFFER_USHORT": "Specifies the port address, which must be a mapped memory range in I/O space.",
 "READ_PORT_BUFFER_ULONG": "Specifies the port address, which must be a mapped memory range in I/O space.",
 "WRITE_PORT_UCHAR": "Pointer to the port, which must be a mapped memory range in I/O space.",
 "WRITE_PORT_USHORT": "Pointer to the port, which must be a mapped memory range in I/O space.",
 "WRITE_PORT_ULONG": "Pointer to the port, which must be a mapped memory range in I/O space.",
 "WRITE_PORT_BUFFER_UCHAR": "Pointer to the port, which must be a mapped memory range in I/O space.",
 "WRITE_PORT_BUFFER_USHORT": "Pointer to the port, which must be a mapped memory range in I/O space.",
 "WRITE_PORT_BUFFER_ULONG": "Pointer to the port, which must be a mapped memory range in I/O space.",
 "READ_REGISTER_UCHAR": "Pointer to the register address, which must be a mapped range in memory space.",
 "READ_REGISTER_USHORT": "Pointer to the register address, which must be a mapped range in memory space.",
 "READ_REGISTER_ULONG": "Pointer to the register address, which must be a mapped range in memory space.",
 "READ_REGISTER_BUFFER_UCHAR": "Pointer to the register, which must be a mapped range in memory space.",
 "READ_REGISTER_BUFFER_USHORT": "Pointer to the register, which must be a mapped range in memory space.",
 "READ_REGISTER_BUFFER_ULONG": "Pointer to the register, which must be a mapped range in memory space.",
 "WRITE_REGISTER_UCHAR": "Pointer to the register, which must be a mapped range in memory space.",
 "WRITE_REGISTER_USHORT": "Pointer to the register, which must be a mapped range in memory space.",
 "WRITE_REGISTER_ULONG": "Pointer to the register which must be a mapped range in memory space.",
 "WRITE_REGISTER_BUFFER_UCHAR": "Pointer to the register, which must be a mapped range in memory space.",
 "WRITE_REGISTER_BUFFER_USHORT": "Pointer to the register, which must be a mapped range in memory space.",
 "WRITE_REGISTER_BUFFER_ULONG": "Pointer to the register, which must be a mapped range in memory space.",
 "IoAllocateMdl": "Pointer to the base virtual address of the buffer the MDL is to describe.",
 "IoBuildPartialMdl": "A pointer to an MDL that describes the original buffer, of which a subrange is to be mapped.",
 "IoFreeMdl": "Pointer to the MDL to be released.",
 "MmAllocatePagesForMdlEx": "Specifies the physical address of the start of the first address range from which the allocated pages can come. If MmAllocatePagesForMdlEx cannot allocate the requested number of bytes in the first address range, it iterates through additional address ranges to get more pages. At each iteration, MmAllocatePagesForMdlEx adds the value of SkipBytes to the previous start address to obtain the start of the next address range.",
 "MmBuildMdlForNonPagedPool": "A pointer to an MDL that specifies a virtual memory buffer in nonpaged memory. The caller used the IoAllocateMdl routine to create the MDL for this buffer.",
 "MapTransfer": "Pointer to the DMA adapter object returned by IoGetDmaAdapter and previously passed to AllocateAdapterChannel for the current IRP's transfer request.",
 "MmGetPhysicalAddress": "Pointer to the virtual address for which to return the physical address.",
 "MmIsAddressValid": "A pointer to the nonpaged virtual address to check. The caller must ensure that this address cannot be paged out or deleted for the duration of this call. Even after the return from the call, you must not page out or delete this address. If you do page out or delete this address, the return value might be unreliable. Paging out or deleting this address might cause the computer to stop responding (that is, crash).",
 "MmMapIoSpace": "Specifies the starting physical address of the I/O range to be mapped.",
 "MmMapLockedPages": "Pointer to an MDL that was updated by MmProbeAndLockPages.",
 "MmMapLockedPagesWithReservedMapping": "Pointer to the beginning of the reserved virtual memory range. This must be an address previously returned by MmAllocateMappingAddress.",
 "MmAllocateMappingAddress": "Specifies the number of bytes to reserve.",
 "MmProbeAndLockPages": "A pointer to an MDL that specifies a virtual memory buffer. If the routine successfully locks the pages in memory, the MDL is updated to describe the underlying physical pages.",
 "MmProtectMdlSystemAddress": "Specifies the memory address range to set the protection type for.",
 "MmSecureVirtualMemory": "The beginning of the user virtual address range to secure.",
 "MmSizeOfMdl": "Pointer to the base virtual address for the range.",
 "MmUnlockPages": "A pointer to an MDL.",
 "MmUnmapIoSpace": "Pointer to the base virtual address to which the physical pages were mapped.",
 "MmUnmapLockedPages": "Pointer to the base virtual address to which the physical pages were mapped.",
 "MmUnmapReservedMapping": "Pointer to the beginning of the reserved virtual memory range. This must be an address returned by MmMapLockedPagesWithReservedMapping.",
 "MmUnsecureVirtualMemory": "Specifies the value returned by MmSecureVirtualMemory for the memory address range.",
 "RtlCompareMemory": "A pointer to the first block of memory.",
 "RtlCopyMemory": "A pointer to the destination memory block to copy the bytes to.",
 "RtlMoveMemory": "A pointer to the destination memory block to copy the bytes to.",
 "RtlFillMemory": "A pointer to the block of memory to be filled.",
 "RtlZeroMemory": "A pointer to the memory block to be filled with zeros.",
 "MmAllocateContiguousMemory": "The size, in bytes, of the block of contiguous memory to allocate. For more information, see Remarks.",
 "MmFreeContiguousMemory": "Pointer to the virtual address of the memory to be freed.",
 "MmAllocateNonCachedMemory": "Specifies the size in bytes of the range to be allocated.",
 "MmFreeNonCachedMemory": "Pointer to the virtual address of the memory to be freed.",
 "MmFreeMappingAddress": "Pointer to the beginning of the reserved memory buffer to free. This must be an address previously returned by MmAllocateMappingAddress.",
 "AllocateCommonBuffer": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "FreeCommonBuffer": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "IoAdjustPagingPathCount": "Pointer to a caller-supplied variable that contains a counter. A driver typically stores a page-file counter in the device extension for the device.",
 "IoInitializeRemoveLock": "Pointer to a caller-supplied IO_REMOVE_LOCK structure that this routine initializes with information about the lock, including a counter and a synchronization event. A driver writer must allocate this structure as part of the device object's device extension.",
 "IoAcquireRemoveLock": "Pointer to an IO_REMOVE_LOCK structure that the caller initialized with a previous call to IoInitializeRemoveLock.",
 "IoReleaseRemoveLock": "Pointer to an IO_REMOVE_LOCK structure that the caller passed to a previous call to IoAcquireRemoveLock.",
 "IoReleaseRemoveLockAndWait": "Pointer to an IO_REMOVE_LOCK structure that the caller passed in a previous call to IoAcquireRemoveLock.",
 "IoReportTargetDeviceChangeAsynchronous": "Pointer to the PDO of the device being reported.",
 "IoGetDeviceInterfaces": "Pointer to a class GUID specifying the device interface class. The GUIDs for a class should be in a device-specific header file.",
 "IoGetDeviceInterfaceAlias": "Pointer to the name of the device interface instance for which to retrieve an alias. The caller typically received this string from a call to IoGetDeviceInterfaces or in a PnP notification structure.",
 "IoWMIAllocateInstanceIds": "Pointer to the GUID for which to generate instance identifiers.",
 "IoWMIDeviceObjectToInstanceName": "Pointer to a WMI data block object. The caller opens the data block object for the WMI class with IoWMIOpenBlock.",
 "IoWMIExecuteMethod": "Pointer to a WMI data block object. The caller opens the data block object for the WMI class with IoWMIOpenBlock. The object must be opened with the WMIGUID_EXECUTE access right.",
 "IoWMIHandleToInstanceName": "Pointer to a WMI data block object. The caller opens the data block object for the WMI class with the IoWMIOpenBlock routine.",
 "IoWMIOpenBlock": "Specifies the GUID for WMI class.",
 "IoWMIQueryAllData": "Pointer to a WMI data block object. The caller opens the data block object for the WMI class with the IoWMIOpenBlock routine. The object must be opened with the WMIGUID_QUERY access right.",
 "IoWMIQueryAllDataMultiple": "Pointer to an array of pointers to WMI data block objects. The caller opens a data block object for each WMI class with the IoWMIOpenBlock routine. Each object must be opened with the WMIGUID_QUERY access right.",
 "IoWMIQuerySingleInstance": "Pointer to a WMI data block object. The caller opens the data block object for the WMI class with the IoWMIOpenBlock routine. The object must be opened with the WMIGUID_QUERY access right.",
 "IoWMIQuerySingleInstanceMultiple": "Pointer to an array of pointers of WMI data block objects. The caller opens a data block object for each WMI class with the IoWMIOpenBlock routine. Each object must be opened with the WMIGUID_QUERY access right.",
 "IoWMISetNotificationCallback": "Pointer to a WMI data block object. The caller opens the data block object for the WMI event with the IoWMIOpenBlock routine. The object must be opened with the WMIGUID_NOTIFICATION access right.",
 "IoWMISetSingleInstance": "Pointer to a WMI data block object. The caller opens the data block object for the WMI class with the IoWMIOpenBlock routine. The object must be opened with the WMIGUID_SET access right.",
 "IoWMISetSingleItem": "Pointer to a WMI data block object. The caller opens the data block object for the WMI class with the IoWMIOpenBlock routine. The object must be opened with the WMIGUID_SET access right.",
 "WmiCompleteRequest": "A pointer to the driver's DEVICE_OBJECT.",
 "WmiSystemControl": "A pointer to a WMILIB_CONTEXT structure that contains registration information for a driver's data blocks and event blocks and defines entry points for the driver's WMI library callback routines.",
 "AllocateAdapterChannel": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "KeFlushIoBuffers": "A pointer to an MDL that describes the range for the I/O buffer.",
 "ExInterlockedInsertTailList": "A pointer to the LIST_ENTRY structure that serves as the list header.",
 "ExInterlockedInsertHeadList": "A pointer to the LIST_ENTRY structure that serves as the list header.",
 "ExInterlockedRemoveHeadList": "A pointer to the LIST_ENTRY structure that serves as the list header.",
 "ExInterlockedPopEntryList": "A pointer to the SINGLE_LIST_ENTRY structure that serves as the list header.",
 "ExInterlockedPushEntryList": "A pointer to the SINGLE_LIST_ENTRY structure that serves as the list header.",
 "IsListEmpty": "Pointer to a LIST_ENTRY structure that represents the head of the list.",
 "InsertTailList": "Pointer to the LIST_ENTRY structure that represents the head of the list.",
 "InsertHeadList": "Pointer to the LIST_ENTRY structure that represents the head of the list.",
 "RemoveHeadList": "Pointer to the LIST_ENTRY structure that serves as the list header.",
 "RemoveTailList": "Pointer to the LIST_ENTRY structure that serves as the list header.",
 "RemoveEntryList": "Pointer to the LIST_ENTRY structure that represents the entry to be removed.",
 "PushEntryList": "Pointer to the SINGLE_LIST_ENTRY structure that serves as the list header.",
 "PopEntryList": "Pointer to the SINGLE_LIST_ENTRY structure that represents the head of the list. On return, ListHead->Next points to the beginning of the list with the first entry removed.",
 "ExInterlockedPopEntrySList": "A pointer to the SLIST_HEADER structure that serves as the header for the sequenced singly linked list. ListHead must have been initialized by calling ExInitializeSListHead.",
 "ExInterlockedPushEntrySList": "A pointer to the SLIST_HEADER structure that serves as the header for the sequenced singly linked list. ListHead must have been initialized by calling ExInitializeSListHead.",
 "ExQueryDepthSList": "A pointer to the SLIST_HEADER structure that serves as the header for the sequenced singly linked list. SListHead must have been initialized by calling ExInitializeSListHead.",
 "KeInsertDeviceQueue": "Pointer to a control object of type device queue for which the caller provides the storage.",
 "KeInsertByKeyDeviceQueue": "Pointer to a control object of the device queue type for which the caller provides the storage.",
 "KeRemoveDeviceQueue": "Pointer to an initialized device queue object for which the caller provides the storage.",
 "KeRemoveByKeyDeviceQueue": "Pointer to an initialized device queue object for which the caller provides the storage.",
 "KeRemoveEntryDeviceQueue": "Pointer to an initialized device queue object for which the caller provides the storage.",
 "PsCreateSystemThread": "Points to a variable that will receive the handle. The driver must close the handle with ZwClose once the handle is no longer in use. This handle is a kernel handle for Windows Vista and later versions of Windows. In earlier versions of Windows, the handle might not be a kernel handle.",
 "PsTerminateSystemThread": "Specifies the status of the terminating system thread.",
 "KeQueryPriorityThread": "Pointer to a dispatcher object of type KTHREAD.",
 "KeSetBasePriorityThread": "Pointer to a dispatcher object of type KTHREAD.",
 "KeSetPriorityThread": "Pointer to the driver-created thread.",
 "RtlInitString": "A pointer to the STRING structure to be initialized. The Ntdef.h header file defines this structure to be identical to the ANSI_STRING structure.",
 "RtlInitAnsiString": "A pointer to the ANSI_STRING structure to be initialized.",
 "RtlInitUnicodeString": "For more information, see the WdmlibRtlInitUnicodeStringEx function.",
 "RtlAnsiStringToUnicodeSize": "Pointer to a buffer containing the ANSI string.",
 "RtlAnsiStringToUnicodeString": "Pointer to a UNICODE_STRING structure to hold the converted Unicode string. If AllocateDestinationString is TRUE, the routine allocates a new buffer to hold the string data, and updates the Buffer member of DestinationString to point to the new buffer. Otherwise, the routine uses the currently-specified buffer to hold the string.",
 "RtlFreeUnicodeString": "Pointer to the Unicode string buffer previously allocated by RtlAnsiStringToUnicodeString or RtlUpcaseUnicodeString.",
 "RtlUnicodeStringToAnsiString": "Pointer to an ANSI_STRING structure to hold the converted ANSI string. If AllocateDestinationString is TRUE, the routine allocates a new buffer to hold the string data, and updates the Buffer member of DestinationString to point to the new buffer. Otherwise, the routine uses the currently specified buffer to hold the string.",
 "RtlFreeAnsiString": "Pointer to the ANSI string buffer previously allocated by RtlUnicodeStringToAnsiString.",
 "RtlAppendUnicodeStringToString": "Pointer to a buffered Unicode string.",
 "RtlAppendUnicodeToString": "A pointer to the buffered string.",
 "RtlCopyString": "A pointer to the destination string buffer.",
 "RtlCopyUnicodeString": "A pointer to the destination string buffer. This parameter points to a UNICODE_STRING structure.",
 "RtlEqualString": "Pointer to the first string.",
 "RtlEqualUnicodeString": "Pointer to the first Unicode string.",
 "RtlCompareString": "Pointer to the first string.",
 "RtlCompareUnicodeString": "Pointer to the first string.",
 "RtlUpperString": "Pointer to the buffer for the converted destination string.",
 "RtlUpcaseUnicodeString": "Pointer to a caller-allocated buffer for the converted Unicode string.",
 "RtlIntegerToUnicodeString": "Specifies the ULONG value to convert.",
 "RtlUnicodeStringToInteger": "A pointer to a UNICODE_STRING structure that contains the number representation to convert to the equivalent integer value.",
 "RtlConvertLongToLargeInteger": "Specifies an integer of type LONG.",
 "RtlConvertUlongToLargeInteger": "Specifies a value of type ULONG.",
 "RtlTimeFieldsToTime": "Pointer to the following structure, containing the time information to be converted: Copy typedef struct TIME_FIELDS { CSHORT Year; CSHORT Month; CSHORT Day; CSHORT Hour; CSHORT Minute; CSHORT Second; CSHORT Milliseconds; CSHORT Weekday; } TIME_FIELDS; Year Specifies a value from 1601 on. Month Specifies a value from 1 to 12. Day Specifies a value from 1 to 31. Hour Specifies a value from 0 to 23. Minute Specifies a value from 0 to 59. Second Specifies a value from 0 to 59. Milliseconds Specifies a value from 0 to 999. Weekday Specifies a value from 0 to 6 (Sunday to Saturday).",
 "RtlTimeToTimeFields": "Pointer to a buffer containing the absolute system time as a large integer, accurate to 100-nanosecond resolution.",
 "ExSystemTimeToLocalTime": "A pointer to a variable set to the unbiased, GMT system time.",
 "ExLocalTimeToSystemTime": "A pointer to a variable set to the locale-specific time.",
 "RtlCharToInteger": "Pointer to a null-terminated, single-byte character string.",
 "ExCreateCallback": "A pointer to a location that receives a pointer to a callback object, which is an opaque, system structure. If the ExCreateCallback call succeeds, the routine writes the address of the newly created or opened callback object to this location. The callback object pointer obtained from this routine can be supplied as a parameter to the ExRegisterCallback or ExNotifyCallback routine.",
 "ExNotifyCallback": "A pointer to the callback object for which all registered callback routines will be called.",
 "ExRegisterCallback": "A pointer to a callback object obtained from the ExCreateCallback routine.",
 "ExUnregisterCallback": "Specifies the callback routine to unregister. This must be the value returned by ExRegisterCallback when the callback was registered.",
 "IoCheckShareAccess": "Specifies an ACCESS_MASK value that indicates the desired type of access to the given FileObject for the current open request. Drivers compute the value of this parameter by taking the requested access in the IRP_MJ_CREATE request and then applying SeAccessCheck for each security descriptor to determine the actual access granted. If the granted access is more restrictive than the desired access, then that is an error, and the driver should complete the current IRP with a status of STATUS_ACCESS_DENIED. (Note that SeAccessCheck clears the MAXIMUM_ALLOWED bit in the granted access; be sure to not use that bit when comparing desired access to granted access.) The driver then passes the granted access as the value of DesiredAccess.",
 "IoUpdateShareAccess": "Pointer to a referenced file object representing the file or associated device object for which to update the share access.",
 "IoRemoveShareAccess": "Pointer to the file object, which usually is being closed by the current thread.",
 "RtlLengthSecurityDescriptor": "Pointer to a SECURITY_DESCRIPTOR.",
 "RtlValidSecurityDescriptor": "Pointer to the SECURITY_DESCRIPTOR to be checked.",
 "RtlCreateSecurityDescriptor": "Pointer to the buffer for the SECURITY_DESCRIPTOR to be initialized.",
 "RtlSetDaclSecurityDescriptor": "A pointer to a SECURITY_DESCRIPTOR structure. This structure is the security descriptor to which the DACL is to be applied.",
 "SeAssignSecurity": "Pointer to a buffer containing the SECURITY_DESCRIPTOR for the parent directory, if any, containing the new object being created. ParentDescriptor can be NULL, or have a NULL system access control list (SACL) or a NULL discretionary access control list (DACL).",
 "SeDeassignSecurity": "Pointer to the buffered SECURITY_DESCRIPTOR being released.",
 "SeValidSecurityDescriptor": "Specifies the size in bytes of the given security descriptor.",
 "SeAccessCheck": "Pointer to the SECURITY_DESCRIPTOR structure that describes the security descriptor protecting the object being accessed.",
 "SeSinglePrivilegeCheck": "Specifies the LUID value of the privilege being checked.",
 "IoAllocateErrorLogEntry": "Pointer to a device object representing the device on which an I/O error occurred, or to a driver object representing the driver that found an error.",
 "IoFreeErrorLogEntry": "Pointer to an error log packet allocated by IoAllocateErrorLogEntry.",
 "IoWriteErrorLogEntry": "Pointer to the error log packet the driver has allocated with IoAllocateErrorLogEntry and filled in by the caller.",
 "IoIsErrorUserInduced": "Specifies the current NTSTATUS value, usually within the driver's DpcForIsr routine.",
 "IoSetHardErrorOrVerifyDevice": "Pointer to the IRP for which the driver encountered a user-induced error.",
 "IoSetThreadHardErrorMode": "Specifies whether hard error reporting to the user should be enabled or disabled for this thread. A value of TRUE enables hard error reporting. FALSE disables it.",
 "IoRaiseHardError": "Pointer to the IRP that failed because of a device I/O error.",
 "IoRaiseInformationalHardError": "The error status code (IO_ERR_XXX).",
 "ExRaiseStatus": "Specifies one of the system-defined STATUS_XXX values.",
 "KeBugCheckEx": "Specifies a value that indicates the reason for the bug check.",
 "KeBugCheck": "Specifies a value that indicates the reason for the bug check.",
 "KeRegisterBugCheckCallback": "Pointer to a callback record that was previously initialized by KeInitializeCallbackRecord, for which the caller provides nonpaged storage.",
 "KeDeregisterBugCheckCallback": "Pointer to a KBUGCHECK_CALLBACK_RECORD structure. CallbackRecord must be the same value that was passed to KeRegisterBugCheckCallback when the callback was registered.",
 "ZwAllocateVirtualMemory": "A handle for the process for which the mapping should be done. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process.",
 "ZwCommitComplete": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object.",
 "ZwCommitEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The object must represent a superior enlistment and the handle must have ENLISTMENT_SUPERIOR_RIGHTS access to the object.",
 "ZwCommitTransaction": "A handle to a transaction object. Your component receives this handle from ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_COMMIT access to the object.",
 "ZwCreateDirectoryObject": "Pointer to a HANDLE variable that receives a handle to the object directory.",
 "ZwCreateEnlistment": "A pointer to a caller-allocated variable that receives a handle to the new enlistment object if the call to ZwCreateEnlistment succeeds.",
 "ZwCreateEvent": "A pointer to a variable that will receive the event object handle. The handle includes bookkeeping information, such as a reference count and security context.",
 "ZwCreateResourceManager": "A pointer to a caller-allocated variable that receives a handle to the new resource manager object if the call to ZwCreateResourceManager is successful.",
 "ZwCreateSection": "Pointer to a HANDLE variable that receives a handle to the section object.",
 "ZwCreateTransaction": "A pointer to a caller-allocated variable that receives a handle to the new transaction object, if the call to ZwCreateTransaction succeeds.",
 "ZwCreateTransactionManager": "A pointer to a caller-allocated variable that receives a handle to the new transaction manager object.",
 "ZwDeleteFile": "A pointer to an OBJECT_ATTRIBUTES structure that contains the attributes supplied by the caller to be used for the file object. These attributes would include the ObjectName and the SECURITY_DESCRIPTOR, for example. This parameter is initialized by calling the InitializeObjectAttributes macro.",
 "ZwDeleteValueKey": "The handle to the registry key containing the value entry of interest. This key must have been opened with KEY_SET_VALUE set for the desired access. This handle is created by a successful call to ZwCreateKey or ZwOpenKey.",
 "ZwDeviceIoControlFile": "Handle returned by ZwCreateFile or ZwOpenFile for the file object representing the device to which the control information should be given or from which information should be returned. The file object must have been opened for asynchronous I/O if the caller specifies an Event, ApcRoutine, and an APC context (in ApcContext), or a completion context (in ApcContext). For I/O to an underlying mass-storage device, the file object must have been opened for Direct Access to Storage Device (DASD) access.",
 "ZwDuplicateObject": "A handle to the source process for the handle being duplicated.",
 "ZwDuplicateToken": "A handle to an existing access token that was opened with the TOKEN_DUPLICATE access right. This parameter is required and cannot be NULL.",
 "ZwEnumerateTransactionObject": "A handle to a KTM object. The routine enumerates the child objects of the specified object. This parameter is optional and can be NULL. For more information about valid values for this parameter, see the table in the following Remarks section.",
 "ZwFlushBuffersFile": "Handle returned by ZwCreateFile or ZwOpenFile for the file whose buffers will be flushed. This parameter is required and cannot be NULL.",
 "ZwFlushBuffersFileEx": "Handle returned by ZwCreateFile or ZwOpenFile for the file whose buffers will be flushed. This parameter is required and cannot be NULL.",
 "ZwFlushVirtualMemory": "An open handle for the process in whose context the pages to be flushed reside. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process.",
 "ZwFreeVirtualMemory": "A handle for the process in whose context the pages to be freed reside. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process.",
 "ZwFsControlFile": "Handle returned by ZwCreateFile or ZwOpenFile for the file object representing the file or directory on which the specified action is to be performed. The file object must have been opened for asynchronous I/O if the caller specifies an Event, ApcRoutine, and an APC context (in ApcContext), or a completion context (in ApcContext).",
 "ZwGetNotificationResourceManager": "A handle to a resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager. The handle must have RESOURCEMANAGER_GET_NOTIFICATION access to the object.",
 "ZwLoadDriver": "Pointer to a counted Unicode string that specifies a path to the driver's registry key, \\Registry\\Machine\\System\\CurrentControlSet\\Services\\DriverName, where DriverName is the name of the driver.",
 "ZwLockFile": "A handle for the file on which a byte-range lock is requested.",
 "ZwMakeTemporaryObject": "Handle to an object of any type.",
 "ZwNotifyChangeKey": "Handle to the key to register a notification routine for. This handle is created by a successful call to ZwCreateKey or ZwOpenKey. The caller must have specified KEY_NOTIFY access.",
 "ZwOpenDirectoryObject": "Handle for the newly opened directory object.",
 "ZwOpenEnlistment": "A pointer to a caller-allocated variable that receives a handle to an enlistment object if the call to ZwOpenEnlistment succeeds.",
 "ZwOpenEvent": "A pointer to a variable that will receive the event object handle. The handle includes bookkeeping information, such as a reference count and security context.",
 "ZwOpenFile": "Pointer to a HANDLE variable that receives a handle to the file.",
 "ZwOpenProcess": "A pointer to a variable of type HANDLE. The ZwOpenProcess routine writes the process handle to the variable that this parameter points to.",
 "ZwOpenProcessTokenEx": "Handle to the process whose access token is to be opened. The handle must have PROCESS_QUERY_INFORMATION access. Use the NtCurrentProcess macro, defined in Ntddk.h, to specify the current process.",
 "ZwOpenResourceManager": "A pointer to a caller-allocated variable that receives the resource manager handle if the call to ZwOpenResourceManager succeeds.",
 "ZwOpenSymbolicLinkObject": "Pointer to a HANDLE variable that receives a handle to the symbolic link object.",
 "ZwOpenThreadTokenEx": "Handle to the thread whose access token is to be opened. The handle must have THREAD_QUERY_INFORMATION access. Use the NtCurrentThread macro to specify the current thread.",
 "ZwOpenTransaction": "A pointer to a caller-allocated variable that receives a handle to the transaction object if ZwOpenTransaction returns STATUS_SUCCESS.",
 "ZwOpenTransactionManager": "A pointer to a caller-allocated variable that receives a handle to the transaction manager object if ZwOpenTransactionManager returns STATUS_SUCCESS.",
 "ZwPowerInformation": "Specifies the requested information level, which indicates the specific power information to be set or retrieved. Currently, the only supported POWER_INFORMATION_LEVEL value is PlatformInformation. ValueMeaning PlatformInformation Information represents the currently supported power capabilities of the system. Information may change as drivers are installed. For example, the installation of legacy device drivers that do not support power management might modify the capabilities of the system.",
 "ZwPrepareComplete": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object.",
 "ZwPrepareEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The object must represent a superior enlistment and the handle must have ENLISTMENT_SUPERIOR_RIGHTS access to the object.",
 "ZwPrePrepareComplete": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object.",
 "ZwPrePrepareEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The object must represent a superior enlistment and the handle must have ENLISTMENT_SUPERIOR_RIGHTS access to the object.",
 "ZwQueryDirectoryFile": "A handle returned by ZwCreateFile or ZwOpenFile for the file object that represents the directory for which information is being requested. The file object must have been opened for asynchronous I/O if the caller specifies a non-NULL value for Event or ApcRoutine.",
 "ZwQueryFullAttributesFile": "A pointer to an OBJECT_ATTRIBUTES structure that supplies the attributes to be used for the file object.",
 "ZwQueryInformationEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_QUERY_INFORMATION access to the object.",
 "ZwQueryInformationResourceManager": "A handle to a resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager. The handle must have RESOURCEMANAGER_QUERY_INFORMATION access to the object.",
 "ZwQueryInformationToken": "Handle for an access token from which information is to be retrieved. If TokenInformationClass is set to TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values, the handle must have TOKEN_QUERY access. For more information about access rights for access-token objects, see the Security section of the Windows SDK documentation.",
 "ZwQueryInformationTransaction": "A handle to a transaction object that was obtained by a previous call to ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_QUERY_INFORMATION access to the object.",
 "ZwQueryInformationTransactionManager": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager. The handle must have TRANSACTIONMANAGER_QUERY_INFORMATION access to the object.",
 "ZwQueryObject": "A handle to the object to obtain information about.",
 "ZwQueryQuotaInformationFile": "A handle for the file object that represents the file or volume for which the quota information is requested.",
 "ZwQuerySecurityObject": "Handle for the object whose security descriptor is to be queried. This handle must have the access specified in the Meaning column of the table shown in the description of the SecurityInformation parameter.",
 "ZwQuerySymbolicLinkObject": "Handle to the symbolic-link object that you want to query. This handle is created by a successful call to ZwOpenSymbolicLinkObject.",
 "ZwQueryVirtualMemory": "A handle for the process in whose context the pages to be queried reside. Use the ZwCurrentProcess macro to specify the current process.",
 "ZwQueryVolumeInformationFile": "A handle to a file object returned by ZwCreateFile or ZwOpenFile for an open file, directory, storage device, or volume for which volume information is being requested.",
 "ZwReadOnlyEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object.",
 "ZwRecoverEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_RECOVER access to the object.",
 "ZwRecoverResourceManager": "A handle to a resource manager object that was obtained by a previous call to ZwCreateResourceManager or ZwOpenResourceManager. The handle must have RESOURCEMANAGER_RECOVER access to the object.",
 "ZwRecoverTransactionManager": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager. The handle must have TRANSACTIONMANAGER_RECOVER access to the object.",
 "ZwRollbackComplete": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object.",
 "ZwRollbackEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object.",
 "ZwRollbackTransaction": "A handle to a transaction object that was obtained by a previous call to ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_ROLLBACK access to the object.",
 "ZwRollforwardTransactionManager": "A handle to a transaction manager object that was obtained by a previous call to ZwCreateTransactionManager or ZwOpenTransactionManager. The handle must have TRANSACTIONMANAGER_RECOVER access to the object.",
 "ZwSetEvent": "A handle to an event object.",
 "ZwSetInformationEnlistment": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SET_INFORMATION access to the object.",
 "ZwSetInformationResourceManager": null,
 "ZwSetInformationToken": "Handle for an access token in which information is to be modified.",
 "ZwSetInformationTransaction": "A handle to a transaction object that was obtained by a previous call to ZwCreateTransaction or ZwOpenTransaction. The handle must have TRANSACTION_SET_INFORMATION access to the object.",
 "ZwSetQuotaInformationFile": "A handle for the file object that represents the file or volume for which the quota information is to be modified.",
 "ZwSetSecurityObject": "Handle for the object whose security state is to be set. This handle must have the access specified in the Meaning column of the table shown in the description of the SecurityInformation parameter.",
 "ZwSetVolumeInformationFile": "Handle to a file object for an open file, directory, storage device, or volume whose volume information is to be modified.",
 "ZwSinglePhaseReject": "A handle to an enlistment object that was obtained by a previous call to ZwCreateEnlistment or ZwOpenEnlistment. The handle must have ENLISTMENT_SUBORDINATE_RIGHTS access to the object.",
 "ZwTerminateProcess": "A handle to the process object that represents the process to be terminated.",
 "ZwUnloadDriver": "Pointer to a counted Unicode string that specifies a path to the driver's registry key, \\Registry\\Machine\\System\\CurrentControlSet\\Services\\DriverName, where DriverName is the name of the driver.",
 "ZwUnlockFile": "A handle for the file object that represents the file whose byte range is to be unlocked.",
 "ZwWaitForSingleObject": "A handle to the object.",
 "ASSERTMSG": "Specifies the null-delimited string to be displayed by the debugger.",
 "DbgBreakPoint": null,
 "DbgBreakPointWithStatus": "Specifies a ULONG value that is sent to the debugger (for example, a status code or an address).",
 "DbgPrint": "Specifies a pointer to the format string to print. The Format string supports most of the printf-style format specification fields. However, the Unicode format codes (%C, %S, %lc, %ls, %wc, %ws, and %wZ) can only be used with IRQL = PASSIVE_LEVEL. The DbgPrint routine does not support any of the floating point types (%f, %e, %E, %g, %G, %a, or %A).",
 "DbgPrintEx": "Specifies the component calling this routine. This must be one of the component name filter IDs defined in the Dpfilter.h header file. To avoid mixing your driver's output with the output of Windows components, you should use only the following values for ComponentId: DPFLTR_IHVVIDEO_ID DPFLTR_IHVAUDIO_ID DPFLTR_IHVNETWORK_ID DPFLTR_IHVSTREAMING_ID DPFLTR_IHVBUS_ID DPFLTR_IHVDRIVER_ID",
 "DbgPrompt": "A pointer to a NULL-terminated constant character string that the debugger will display as a user prompt. The maximum size of this string is 512 characters.",
 "KdBreakPoint": null,
 "IoCompletion": "Caller-supplied pointer to a DEVICE_OBJECT structure. This is the device object for the target device, previously created by the driver's AddDevice routine.",
 "IoBuildSynchronousFsdRequest": "The major function code for the IRP. This code can be IRP_MJ_PNP, IRP_MJ_READ, IRP_MJ_WRITE, IRP_MJ_FLUSH_BUFFERS, or IRP_MJ_SHUTDOWN.",
 "IoBuildDeviceIoControlRequest": "Supplies the I/O control code (IOCTL) to be used in the request. For information about device type-specific I/O control codes, see device type-specific sections in the Windows Driver Kit (WDK).",
 "PoRequestPowerIrp": "A pointer to the target DEVICE_OBJECT for the IRP. In Windows 2000 and later versions of Windows, this parameter can point to a physical device object (PDO) or a functional device object (FDO). In Windows 98/Me, this parameter must point to the PDO of the underlying device.",
 "IoSizeOfIrp": "Specifies the number of stack locations for the IRP.",
 "IoAllocateIrp": "Specifies the number of I/O stack locations to be allocated for the IRP. This value must be at least equal to the StackSize of the next-lower driver's device object, but can be one greater than this value. The calling driver need not allocate a stack location in the IRP for itself.",
 "IoInitializeIrp": "Pointer to the IRP to be initialized.",
 "IoSetNextIrpStackLocation": "Pointer to the IRP whose stack location is to be set.",
 "IoMakeAssociatedIrp": "Pointer to the master IRP that was input to a highest-level driver's Dispatch routine.",
 "IoSetCompletionRoutineEx": "Pointer to the driver's device object.",
 "IoCallDriver": "Pointer to a device object, representing the target device for the requested I/O operation.",
 "IoFreeIrp": "Pointer to the IRP that is to be released.",
 "IoReuseIrp": "Pointer to the IRP to be reinitialized for reuse.",
 "PoCallDriver": "A pointer to the driver-created DEVICE_OBJECT to which the IRP is to be routed.",
 "IoForwardIrpSynchronously": "Specifies the device object of the driver to which the IRP is sent.",
 "IoMarkIrpPending": "Pointer to the IRP to be marked as pending.",
 "IoStartPacket": "Pointer to the target device object for the IRP.",
 "StartIo": "Caller-supplied pointer to a DEVICE_OBJECT structure. This is the device object for the target device, previously created by the driver's AddDevice routine.",
 "IoSetStartIoAttributes": "Pointer to the device object for the driver's device.",
 "Cancel": "Caller-supplied pointer to a DEVICE_OBJECT structure. This is the device object for the target device, previously created by the driver's AddDevice routine.",
 "IoReleaseCancelSpinLock": "The IRQL to be restored. The caller obtained this IRQL in the previous call to the IoAcquireCancelSpinLock routine.",
 "IoCancelIrp": "A pointer to the IRP to be canceled.",
 "IoSetPartitionInformation": "Pointer to the device object representing the device on which the partition type is to be set.",
 "IoWritePartitionTable": "Pointer to the device object representing the disk whose partition tables are to be written.",
 "IoStartNextPacket": "Pointer to the device object for which the IRP is to be dequeued.",
 "IoStartNextPacketByKey": "Pointer to the device object for which the IRP is to be dequeued.",
 "IoCompleteRequest": "Pointer to the IRP to be completed.",
 "SynchCritSection": "Caller-supplied context information, specified by the driver's call to KeSynchronizeExecution.",
 "IoRequestDpc": "Pointer to the device object for which the request that caused the interrupt is being processed.",
 "DpcForIsr": "Caller-supplied pointer to a KDPC structure, which represents the DPC object that is associated with this DpcForIsr routine.",
 "KeInsertQueueDpc": "Pointer to the KDPC structure for the DPC object. This structure must have been initialized by either KeInitializeDpc or KeInitializeThreadedDpc.",
 "KeRemoveQueueDpc": "A pointer to an initialized DPC object that was queued by a previous call to the KeInsertQueueDpc routine.",
 "KeSetImportanceDpc": "Pointer to the caller's DPC object, which KeInitializeDpc already initialized.",
 "KeSetTargetProcessorDpc": "Pointer to the caller's DPC object, which KeInitializeDpc already initialized.",
 "IoTimer": "Caller-supplied pointer to a DEVICE_OBJECT structure. This is the device object for the target device, previously created by the driver's AddDevice routine.",
 "IoStartTimer": "Pointer to a device object whose timer routine is to be called.",
 "IoStopTimer": "Pointer to the device object with which the IoTimer routine is associated.",
 "KeInitializeDpc": "Pointer to a KDPC structure that represents the DPC object to initialize. The caller must allocate storage for the structure from resident memory.",
 "CustomTimerDpc": "Caller-supplied pointer to a KDPC structure, which represents the DPC object associated with this CustomTimerDpc routine.",
 "KeInitializeTimer": "Pointer to a timer object, for which the caller provides the storage.",
 "KeInitializeTimerEx": "Pointer to a timer object, for which the caller provides the storage.",
 "KeQuerySystemTime": "Pointer to the current time on return from KeQuerySystemTime.",
 "KeQueryRuntimeThread": "Pointer to a dispatcher object of type KTHREAD.",
 "KeQueryTickCount": "Pointer to the tick count value on return from KeQueryTickCount.",
 "KeAcquireSpinLock": "Pointer to an initialized spin lock for which the caller provides the storage.",
 "KeAcquireSpinLockRaiseToDpc": "Specifies the spin lock to acquire. The spin lock must already have been initialized by KeInitializeSpinLock.",
 "KeReleaseSpinLock": "Pointer to a spin lock for which the caller provides the storage.",
 "KeAcquireSpinLockAtDpcLevel": "Pointer to an initialized spin lock for which the caller must provide the storage.",
 "KeTryToAcquireSpinLockAtDpcLevel": "Specifies the spin lock to acquire. The spin lock must have already been initialized by KeInitializeSpinLock.",
 "KeReleaseSpinLockFromDpcLevel": "Pointer to an executive spin lock for which the caller provides the storage.",
 "KeAcquireInStackQueuedSpinLock": "Specifies the spin lock to acquire. This parameter must have been initialized with KeInitializeSpinLock.",
 "KeReleaseInStackQueuedSpinLock": "Specifies the queued spin lock handle initialized by the call to KeAcquireInStackQueuedSpinLock that acquired the lock.",
 "KeAcquireInStackQueuedSpinLockAtDpcLevel": "Specifies the spin lock to acquire. This parameter must have been initialized by a call to the KeInitializeSpinLock routine.",
 "KeReleaseInStackQueuedSpinLockFromDpcLevel": "Specifies the queued spin lock handle initialized by the call to KeAcquireInStackQueuedSpinLockAtDpcLevel that acquired the lock.",
 "KeAcquireInterruptSpinLock": "Specifies a pointer to an interrupt object. This value must be supplied by IoConnectInterrupt or IoConnectInterruptEx.",
 "KeReleaseInterruptSpinLock": "Specifies the value of the Interrupt parameter passed to KeAcquireInterruptSpinLock.",
 "ExInterlockedAddUlong": "A pointer to an unsigned long integer whose value is to be adjusted by the Increment value.",
 "ExInterlockedAddLargeInteger": "A pointer to the variable to be adjusted by the Increment value.",
 "ExInterlockedCompareExchange64": "A pointer to an integer that will be compared and possibly replaced.",
 "AdapterControl": "Caller-supplied pointer to a DEVICE_OBJECT structure. This is the device object for the target device, previously created by the driver's AddDevice routine.",
 "BuildMdlFromScatterGatherList": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "BuildScatterGatherList": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "CalculateScatterGatherList": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "FlushAdapterBuffers": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "FreeAdapterChannel": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "FreeMapRegisters": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "GetDmaAlignment": "A pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "GetScatterGatherList": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "PutDmaAdapter": "Pointer to the DMA_ADAPTER structure to be released.",
 "PutScatterGatherList": "Pointer to the DMA_ADAPTER structure returned by IoGetDmaAdapter that represents the bus-master adapter or DMA controller.",
 "ReadDmaCounter": "Pointer to the adapter object previously returned by IoGetDmaAdapter representing the system DMA controller channel currently in use.",
 "InterruptService": "Caller-supplied pointer to the KINTERRUPT structure for the interrupt.",
 "InterruptMessageService": "A pointer to the KINTERRUPT structure for the interrupt. The driver received this pointer in the call to the IoConnectInterruptEx routine that registered the driver's InterruptMessageService routine.",
 "IoDisconnectInterruptEx": "For more information, see the WdmlibIoDisconnectInterruptEx function.",
 "IoInitializeDpcRequest": "Supplies a pointer to the DEVICE_OBJECT structure representing the physical device that generates interrupts.",
 "IoCreateController": "Specifies the number of bytes to be allocated for the controller extension.",
 "IoDeleteController": "Pointer to the controller object to be released.",
 "CustomDpc": "Caller-supplied pointer to a KDPC structure, which represents the DPC object that is associated with this CustomDpc routine.",
 "KeInitializeEvent": "Pointer to an event object, for which the caller provides the storage.",
 "ExInitializeFastMutex": "A pointer to a caller-allocated FAST_MUTEX structure, which represents the fast mutex, in the nonpaged memory pool. The allocation must be 4-byte aligned on 32-bit platforms, and 8-byte aligned on 64-bit platforms.",
 "KeInitializeMutex": "Pointer to a mutex object, for which the caller provides the storage. The storage must be 4-byte aligned on 32-bit platforms, and 8-byte aligned on 64-bit platforms.",
 "KeInitializeSemaphore": "Pointer to a dispatcher object of type semaphore, for which the caller provides the storage.",
 "IoCreateNotificationEvent": "Pointer to a buffer containing a null-terminated Unicode string that names the event.",
 "IoCreateSynchronizationEvent": "Pointer to a buffer containing a null-terminated Unicode string that names the event.",
 "ObReferenceObjectByHandle": "Specifies an open handle for an object.",
 "ObReferenceObjectByPointer": "Pointer to the object's body.",
 "ObReferenceObject": "Pointer to the object. The caller obtained this parameter either when it created the object or from a preceding call to ObReferenceObjectByHandle after it opened the object.",
 "ObDereferenceObject": "Pointer to the object's body.",
 "PsGetVersion": "Points to a caller-supplied variable that this routine sets to the major version of the operating system. This optional parameter can be NULL.",
 "ObGetObjectSecurity": "Pointer to the object.",
 "ObReleaseObjectSecurity": "Pointer to the buffered SECURITY_DESCRIPTOR to be released. The caller obtained this parameter from ObGetObjectSecurity",
 "IoGetInitialStack": null,
 "IoGetRemainingStackSize": null,
 "IoGetStackLimits": "Pointer to a caller-supplied variable in which this routine returns the lower offset of the current thread's stack frame.",
 "IoCsqInsertIrp": "Pointer to the IO_CSQ structure for the driver's cancel-safe IRP queue. This structure must have been initialized by IoCsqInitialize or IoCsqInitializeEx.",
 "IoCsqRemoveIrp": "Pointer to the IO_CSQ structure for the driver's cancel-safe IRP queue. This structure must have been initialized by IoCsqInitialize or IoCsqInitializeEx.",
 "IoCsqRemoveNextIrp": "Pointer to the driver's dispatch table for cancel-safe IRP queues. The dispatch table must be initialized by IoCsqInitialize.",
 "KeFlushQueuedDpcs": null,
 "IoAllocateController": "Pointer to a driver-created controller object, usually representing a physical controller to be allocated for an I/O operation on an attached device.",
 "ControllerControl": "Caller-supplied pointer to a DEVICE_OBJECT structure. This is the device object for the target device, previously created by the driver's AddDevice routine.",
 "IoFreeController": "Pointer to the driver's controller object, which was allocated for the current I/O operation on a particular device by calling IoAllocateController.",
 "KeStallExecutionProcessor": "Specifies the number of microseconds to stall.",
 "KeQueryTimeIncrement": null,
 "KeQueryInterruptTime": null,
 "KeQueryInterruptTimePrecise": "A pointer to a ULONG64 variable into which the routine writes the performance counter value used to interpolate the return value.",
 "KeQueryPerformanceCounter": "A pointer to a variable to which KeQueryPerformanceCounter writes the performance counter frequency, in ticks per second. This parameter is optional and can be NULL if the caller does not need the counter frequency value.",
 "KeGetCurrentProcessorNumber": null,
 "KdBreakPointWithStatus": "Specifies a ULONG value to be sent to the debugger (for example, a status code or an address).",
 "KdChangeOption": "A value from the KD_OPTION enumeration that indicates the kernel state to access and change. The value of this parameter determines the format and required length of the InBuffer and OutBuffer. Currently, the only valid value is KD_OPTION_SET_BLOCK_ENABLE.",
 "KdDisableDebugger": null,
 "KdEnableDebugger": null,
 "KdPrint": "Specifies a pointer to the format string to print. The Format string supports most of the printf-style format specification fields. However, the Unicode format codes (%C, %S, %lc, %ls, %wc, %ws, and %wZ) can only be used with IRQL = PASSIVE_LEVEL. The KdPrint routine does not support any of the floating point types (%f, %e, %E, %g, %G, %a, or %A).",
 "KdPrintEx": "Specifies the component calling this routine. This must be one of the component name filter IDs defined in the dpfilter.h header file. To avoid mixing your driver's output with the output of Windows components, you should use only the following values for ComponentId: DPFLTR_IHVVIDEO_ID DPFLTR_IHVAUDIO_ID DPFLTR_IHVNETWORK_ID DPFLTR_IHVSTREAMING_ID DPFLTR_IHVBUS_ID DPFLTR_IHVDRIVER_ID",
 "KdRefreshDebuggerNotPresent": null,
 "vDbgPrintEx": "The component that is calling this routine. This parameter must be one of the component name filter IDs that are defined in Dpfilter.h. To avoid mixing your driver's output with the output of Windows components, you should use only the following values for ComponentId: DPFLTR_IHVVIDEO_ID DPFLTR_IHVAUDIO_ID DPFLTR_IHVNETWORK_ID DPFLTR_IHVSTREAMING_ID DPFLTR_IHVBUS_ID DPFLTR_IHVDRIVER_ID",
 "DCompositionAttachMouseDragToHwnd": "Type: IDCompositionVisual* The visual to route messages from.",
 "DCompositionAttachMouseWheelToHwnd": "Type: IDCompositionVisual* The visual to route messages from.",
 "DCompositionCreateDevice": "Type: IDXGIDevice* The DXGI device to use to create DirectComposition surface objects.",
 "DCompositionCreateDevice2": "An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the IDXGIDevice or ID2D1Device interfaces.",
 "DCompositionCreateDevice3": "Type: IUnknown* An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the IDXGIDevice or ID2D1Device interfaces.",
 "DCompositionCreateSurfaceHandle": "Type: DWORD The requested access to the composition surface object. It can be one of the following values: ValueMeaning 0x0000L No access. COMPOSITIONSURFACE_READ 0x0001L Read access. For internal use only. COMPOSITIONSURFACE_WRITE 0x0002L Write access. For internal use only. COMPOSITIONSURFACE_ALL_ACCESS 0x0003L Read/write access. Always specify this flag except when duplicating a surface in another process, in which case set desiredAccess to 0.",
 "DCompositionGetFrameStatistics": "Type: DCOMPOSITION_FRAME_STATISTICS* On return, contains the collected composition statistics.",
 "CloseHandle": "A valid handle to an open object.",
 "CompareObjectHandles": "The first object handle to compare.",
 "DuplicateHandle": "A handle to the process with the handle to be duplicated. The handle must have the PROCESS_DUP_HANDLE access right. For more information, see Process Security and Access Rights.",
 "GetHandleInformation": "A handle to an object whose information is to be retrieved. You can specify a handle to one of the following types of objects: access token, console input buffer, console screen buffer, event, file, file mapping, job, mailslot, mutex, pipe, printer, process, registry key, semaphore, serial communication device, socket, thread, or waitable timer.",
 "SetHandleInformation": "A handle to an object whose information is to be set. You can specify a handle to one of the following types of objects: access token, console input buffer, console screen buffer, event, file, file mapping, job, mailslot, mutex, pipe, printer, process, registry key, semaphore, serial communication device, socket, thread, or waitable timer.",
 "CheckDeveloperLicense": "Indicates when the developer license expires.",
 "AcquireDeveloperLicense": "The handler to the parent window.",
 "RemoveDeveloperLicense": "The handler to the parent window.",
 "Tbsi_Context_Create": "A parameter to a TBS_CONTEXT_PARAMS structure that contains the parameters associated with the context.",
 "Tbsi_Create_Attestation_From_Log": "A pointer to a buffer containing a TCG log.",
 "Tbsi_GetDeviceInfo": "Size of the memory location.",
 "Tbsi_Get_OwnerAuth": "TBS handle obtained from a previous call to the Tbsi_Context_Create function.",
 "Tbsi_Get_TCG_Log": "The TBS handle of the context that is getting the TCG log. You get this parameter from a previous call to the Tbsi_Context_Create function.",
 "Tbsi_Get_TCG_Logs": "Specifies the starting log to retrieve. 0 for the most recent full boot, 1 for the first resume from hibernation after the most recent full boot, and so on.",
 "Tbsi_Physical_Presence_Command": "The context of the ACPI command.",
 "Tbsi_Revoke_Attestation": null,
 "Tbsip_Cancel_Commands": "A TBS handle to the context whose commands are to be canceled and that was obtained from previous call to the Tbsi_Context_Create function.",
 "Tbsip_Context_Close": "A handle of the context to be closed.",
 "Tbsip_Submit_Command": "The handle of the context that is submitting the command.",
 "AdjustCalendarDate": "Pointer to a CALDATETIME structure that contains the date and calendar information to adjust.",
 "CompareString": "Locale identifier of the locale used for the comparison. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "CompareStringEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "CompareStringOrdinal": "Pointer to the first string to compare.",
 "ConvertCalDateTimeToSystemTime": "Pointer to the CALDATETIME structure to convert.",
 "ConvertDefaultLocale": "Default locale identifier value to convert. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista and later: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "ConvertSystemTimeToCalDateTime": "Pointer to the SYSTEMTIME structure to convert.",
 "DownlevelGetLocaleScripts": "Pointer to a null-terminated locale name.",
 "DownlevelGetParentLocaleLCID": "Locale identifier of the locale for which to retrieve the parent locale identifier. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista and later: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "DownlevelGetParentLocaleName": "Locale identifier of the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista and later: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "DownlevelGetStringScripts": "Flags specifying options for script retrieval. ValueMeaning GSS_ALLOW_INHERITED_COMMON Retrieve \"Qaii\" (INHERITED) and \"Zyyy\" (COMMON) script information. This value does not affect the processing of unassigned characters. These characters in the input string always cause a \"Zzzz\" (UNASSIGNED script) to appear in the script string. Note By default, this function ignores any inherited or common characters in the input Unicode string. If GSS_ALLOW_INHERITED_COMMON is not set, neither \"Qaii\" nor \"Zyyy\" will appear in the script string, even if the input string contains such characters. If GSS_ALLOW_INHERITED_COMMON is set, and if the input string contains inherited and/or common characters, \"Qaii\" and/or \"Zyyy\" appear in the script string. See the Remarks section.",
 "DownlevelLCIDToLocaleName": "The locale identifier to translate. You can use the MAKELCID macro to create a locale identifier. This function does not support neutral locales or the following specific locale identifier values. LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "DownlevelLocaleNameToLCID": "Pointer to a null-terminated string representing a locale name.",
 "DownlevelVerifyScripts": "Flags specifying script verification options. ValueMeaning VS_ALLOW_LATIN Allow \"Latn\" (Latin script) in the test list, even if it is not in the locale list.",
 "EnumCalendarInfo": "Pointer to an application-defined callback function. For more information, see EnumCalendarInfoProc.",
 "EnumCalendarInfoEx": "Pointer to an application-defined callback function. For more information, see EnumCalendarInfoProcEx.",
 "EnumCalendarInfoExEx": "Pointer to an application-defined callback function. For more information, see EnumCalendarInfoProcExEx.",
 "EnumCalendarInfoProc": "Pointer to a buffer containing a null-terminated calendar information string. This string is formatted according to the calendar type passed to EnumCalendarInfo.",
 "EnumCalendarInfoProcEx": "Pointer to a buffer containing a null-terminated calendar information string. This string is formatted according to the calendar type passed to EnumCalendarInfoEx.",
 "EnumCalendarInfoProcExEx": "Pointer to a buffer containing a null-terminated calendar information string. This string is formatted according to the calendar type passed to EnumCalendarInfoExEx.",
 "EnumCodePagesProc": "Pointer to a buffer containing a null-terminated code page identifier string.",
 "EnumSystemCodePages": "Pointer to an application-defined callback function. The EnumSystemCodePages function enumerates code pages by making repeated calls to this callback function. For more information, see EnumCodePagesProc.",
 "EnumDateFormats": "Pointer to an application-defined callback function. For more information, see EnumDateFormatsProc.",
 "EnumDateFormatsEx": "Pointer to an application-defined callback function. For more information, see EnumDateFormatsProcEx.",
 "EnumDateFormatsExEx": "Pointer to an application-defined callback function. For more information, see EnumDateFormatsProcExEx.",
 "EnumDateFormatsProc": "Pointer to a buffer containing a null-terminated date format string. This string is a long or short date format, depending on the value of the dwFlags parameter of EnumDateFormats.",
 "EnumDateFormatsProcEx": "Pointer to a buffer containing a null-terminated date format string. This string is a long or short date format, depending on the value of the dwFlags parameter of EnumDateFormatsEx.",
 "EnumDateFormatsProcExEx": "Pointer to a buffer containing a null-terminated date format string. This string is a long or short date format, depending on the value of the dwFlags parameter passed to EnumDateFormatsExEx.",
 "EnumGeoInfoProc": "Identifier of the geographical location to check.",
 "EnumSystemGeoID": "Geographical location class for which to enumerate the identifiers. At present, only GEOCLASS_NATION is supported. This type causes the function to enumerate all geographical identifiers for nations on the operating system.",
 "EnumLanguageGroupLocales": "Pointer to an application-defined callback function. For more information, see EnumLanguageGroupLocalesProc.",
 "EnumLanguageGroupLocalesProc": "Identifier of the language group. This parameter can have one of the following values: LGRPID_ARABIC LGRPID_ARMENIAN LGRPID_BALTIC LGRPID_CENTRAL_EUROPE LGRPID_CYRILLIC LGRPID_GEORGIAN LGRPID_GREEK LGRPID_HEBREW LGRPID_INDIC LGRPID_JAPANESE LGRPID_KOREAN LGRPID_SIMPLIFIED_CHINESE LGRPID_TRADITIONAL_CHINESE LGRPID_THAI LGRPID_TURKIC LGRPID_TURKISH LGRPID_VIETNAMESE LGRPID_WESTERN_EUROPE",
 "EnumLanguageGroupsProc": "Language group identifier. This parameter can have one of the following values: LGRPID_ARABIC LGRPID_ARMENIAN LGRPID_BALTIC LGRPID_CENTRAL_EUROPE LGRPID_CYRILLIC LGRPID_GEORGIAN LGRPID_GREEK LGRPID_HEBREW LGRPID_INDIC LGRPID_JAPANESE LGRPID_KOREAN LGRPID_SIMPLIFIED_CHINESE LGRPID_TRADITIONAL_CHINESE LGRPID_THAI LGRPID_TURKIC LGRPID_TURKISH LGRPID_VIETNAMESE LGRPID_WESTERN_EUROPE",
 "EnumSystemLanguageGroups": "Pointer to an application-defined callback function. For more information, see EnumLanguageGroupsProc.",
 "EnumLocalesProc": "Pointer to a buffer containing a null-terminated locale identifier string.",
 "EnumSystemLocales": "Pointer to an application-defined callback function. For more information, see EnumLocalesProc.",
 "EnumLocalesProcEx": "Pointer to a buffer containing a null-terminated locale name string.",
 "EnumSystemLocalesEx": "Pointer to an application-defined callback function. The EnumSystemLocalesEx function enumerates locales by making repeated calls to this callback function. For more information, see EnumLocalesProcEx.",
 "EnumTimeFormats": "Pointer to an application-defined callback function. For more information, see EnumTimeFormatsProc.",
 "EnumTimeFormatsEx": "Pointer to an application-defined callback function. For more information, see EnumTimeFormatsProcEx.",
 "EnumTimeFormatsProc": "Pointer to a buffer containing a null-terminated time format string.",
 "EnumTimeFormatsProcEx": "Pointer to a buffer containing a null-terminated time format string.",
 "FindNLSString": "Locale identifier that specifies the locale. You can use the MAKELCID macro to create an identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista and later: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "FindNLSStringEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "FindStringOrdinal": "Flags specifying details of the find operation. These flags are mutually exclusive, with FIND_FROMSTART being the default. The application can specify just one of the find flags. ValueMeaning FIND_FROMSTART Search the string, starting with the first character of the string. FIND_FROMEND Search the string in the reverse direction, starting with the last character of the string. FIND_STARTSWITH Test to find out if the value specified by lpStringValue is the first value in the source string indicated by lpStringSource. FIND_ENDSWITH Test to find out if the value specified by lpStringValue is the last value in the source string indicated by lpStringSource.",
 "FoldString": "Flags specifying the type of transformation to use during string mapping. ...",
 "GetACP": null,
 "GetCalendarDateFormatEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetCalendarInfo": "Locale identifier that specifies the locale for which to retrieve calendar information. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "GetCalendarInfoEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetCalendarSupportedDateRange": "Calendar identifier for which to get the supported date range.",
 "GetCPInfo": "Identifier for the code page for which to retrieve information. For details, see the CodePage parameter of GetCPInfoEx.",
 "GetCPInfoEx": "Identifier for the code page for which to retrieve information. The application can specify the code page identifier for any installed or available code page, or one of the following predefined values. See Code Page Identifiers for a list of identifiers for ANSI and other code pages. ValueMeaning CP_ACP Use the system default Windows ANSI code page. CP_MACCP Use the system default Macintosh code page. CP_OEMCP Use the system default OEM code page. CP_THREAD_ACP Use the current thread's ANSI code page.",
 "GetCurrencyFormat": "Locale identifier that specifies the locale for which this function formats the currency string. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "GetCurrencyFormatEx": "Pointer to a locale name or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetDateFormat": "Locale identifier that specifies the locale this function formats the date string for. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "GetDateFormatEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetDurationFormat": "Locale identifier that specifies the locale for which this function formats the duration. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista and later: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "GetDurationFormatEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetGeoInfo": "Identifier for the geographical location for which to get information. For more information, see Table of Geographical Locations. You can obtain the available values by calling EnumSystemGeoID.",
 "GetLocaleInfo": "Locale identifier for which to retrieve information. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "GetLocaleInfoEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetNLSVersion": "The NLS capability to query. This value must be COMPARE_STRING. See the SYSNLS_FUNCTION enumeration.",
 "GetNLSVersionEx": "The NLS capability to query. This value must be COMPARE_STRING. See the SYSNLS_FUNCTION enumeration.",
 "GetNumberFormat": "Locale identifier that specifies the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "GetNumberFormatEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetOEMCP": null,
 "GetStringScripts": "Flags specifying options for script retrieval. ValueMeaning GSS_ALLOW_INHERITED_COMMON Retrieve \"Qaii\" (INHERITED) and \"Zyyy\" (COMMON) script information. This flag does not affect the processing of unassigned characters. These characters in the input string always cause a \"Zzzz\" (UNASSIGNED script) to appear in the script string. Note By default, GetStringScripts ignores any inherited or common characters in the input string indicated by lpString. If GSS_ALLOW_INHERITED_COMMON is not set, neither \"Qaii\" nor \"Zyyy\" appears in the script string, even if the input string contains such characters. If GSS_ALLOW_INHERITED_COMMON is set, and if the input string contains inherited and/or common characters, \"Qaii\" and/or \"Zyyy\", respectively, appear in the script string. See the Remarks section.",
 "GetStringTypeA": "Locale identifier that specifies the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista and later: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "GetStringTypeEx": "Locale identifier that specifies the locale. This value uniquely defines the ANSI code page. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista and later: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "GetStringTypeW": "Flags specifying the character type information to retrieve. This parameter can have the following values. The character types are divided into different levels as described in the Remarks section. FlagMeaning CT_CTYPE1 Retrieve character type information. CT_CTYPE2 Retrieve bidirectional layout information. CT_CTYPE3 Retrieve text processing information.",
 "GetSystemDefaultLangID": null,
 "GetSystemDefaultLCID": null,
 "GetSystemDefaultLocaleName": "Pointer to a buffer in which this function retrieves the locale name.",
 "GetThreadLocale": null,
 "GetTimeFormat": "Locale identifier that specifies the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "GetTimeFormatEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "GetUserDefaultLangID": null,
 "GetUserDefaultLCID": null,
 "GetUserDefaultLocaleName": "Pointer to a buffer in which this function retrieves the locale name.",
 "GetUserGeoID": "Geographical location class to return. Possible values are defined by the SYSGEOCLASS enumeration.",
 "IdnToAscii": "Flags specifying conversion options. The following table lists the possible values. ValueMeaning IDN_ALLOW_UNASSIGNED Note An application can set this value if it is just using a query string for normal lookup, as in a compare operation. However, the application should not set this value for a stored string, which is a string being prepared for storage. Allow unassigned code points to be included in the input string. The default is to not allow unassigned code points, and fail with an extended error code of ERROR_INVALID_NAME. This flag allows the function to process characters that are not currently legal in IDNs, but might be legal in later versions of the IDNA standard. If your application encodes unassigned code points as Punycode, the resulting domain names should be illegal. Security can be compromised if a later version of IDNA makes these names legal or if an application filters out the illegal characters to try to create a legal domain name. For more information, see Handling Internationalized Domain Names (IDNs). IDN_USE_STD3_ASCII_RULES Filter out ASCII characters that are not allowed in STD3 names. The only ASCII characters allowed in the input Unicode string are letters, digits, and the hyphen-minus. The string cannot begin or end with the hyphen-minus. The function fails if the input Unicode string contains ASCII characters, such as \"[\", \"]\", or \"/\", that cannot occur in domain names.Note Some local networks can allow some of these characters in computer names. The function fails if the input Unicode string contains control characters (U+0001 through U+0020) or the \"delete\" character (U+007F). In either case, this flag has no effect on the non-ASCII characters that are allowed in the Unicode string. IDN_EMAIL_ADDRESS Starting with Windows 8: Enable EAI algorithmic fallback for the local parts of email addresses (such as <local>@microsoft.com). The default is for this function to fail when an email address has an invalid address or syntax. An application can set this flag to enable Email Address Internationalization (EAI) to return a discoverable fallback address, if possible. For more information, see the IETF Email Address Internationalization (eai) Charter. IDN_RAW_PUNYCODE Starting with Windows 8: Disable the validation and mapping of Punycode.",
 "IdnToNameprepUnicode": "Flags specifying conversion options. For detailed definitions, see the dwFlags parameter of IdnToAscii.",
 "IdnToUnicode": "Flags specifying conversion options. For detailed definitions, see the dwFlags parameter of IdnToAscii.",
 "IsCalendarLeapYear": "The calendar identifier to use for checking leap year.",
 "IsNLSDefinedString": "NLS capability to query. This value must be COMPARE_STRING. See the SYSNLS_FUNCTION enumeration.",
 "IsNormalizedString": "Normalization form to use. NORM_FORM specifies the standard Unicode normalization forms.",
 "IsValidCodePage": "Code page identifier for the code page to check.",
 "IsValidLanguageGroup": "Identifier of language group to validate. This parameter can have one of the following values: LGRPID_ARABIC LGRPID_ARMENIAN LGRPID_BALTIC LGRPID_CENTRAL_EUROPE LGRPID_CYRILLIC LGRPID_GEORGIAN LGRPID_GREEK LGRPID_HEBREW LGRPID_INDIC LGRPID_JAPANESE LGRPID_KOREAN LGRPID_SIMPLIFIED_CHINESE LGRPID_TRADITIONAL_CHINESE LGRPID_THAI LGRPID_TURKIC LGRPID_TURKISH LGRPID_VIETNAMESE LGRPID_WESTERN_EUROPE",
 "IsValidLocale": "Locale identifier of the locale to validate. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT Windows Server 2003, Windows XP and Windows 2000: This locale identifier is not supported. LOCALE_CUSTOM_UI_DEFAULT Windows Server 2003, Windows XP and Windows 2000: This locale identifier is not supported. LOCALE_CUSTOM_UNSPECIFIED Windows Server 2003, Windows XP and Windows 2000: This locale identifier is not supported. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "IsValidLocaleName": "Pointer to the locale name to validate.",
 "IsValidNLSVersion": "The NLS capability to query. This value must be COMPARE_STRING. See the SYSNLS_FUNCTION enumeration.",
 "LCIDToLocaleName": "Locale identifier to translate. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT Windows Vista: The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "LCMapString": "Locale identifier that specifies the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "LCMapStringEx": "Pointer to a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "LoadStringByReference": "Reserved.",
 "SHLoadIndirectString": "Type: PCWSTR A pointer to a buffer that contains the indirect string from which the resource will be retrieved. This string should begin with the '@' symbol and use one of the forms discussed in the Remarks section. This function will successfully accept a string that does not begin with an '@' symbol, but the string will be simply passed unchanged to pszOutBuf.",
 "LocaleNameToLCID": "Pointer to a null-terminated string representing a locale name, or one of the following predefined values. LOCALE_NAME_INVARIANT LOCALE_NAME_SYSTEM_DEFAULT LOCALE_NAME_USER_DEFAULT",
 "NormalizeString": "Normalization form to use. NORM_FORM specifies the standard Unicode normalization forms.",
 "NotifyUILanguageChange": "Reserved.",
 "ResolveLocaleName": "Pointer to a name to resolve, for example, \"en-FJ\" for English (Fiji).",
 "RtlIsValidLocaleName": "Locale name to validate. This parameter can specify the name of a custom locale.",
 "SetCalendarInfo": "Locale identifier that specifies the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "SetLocaleInfo": "For the ANSI version of the function, the locale identifier of the locale with the code page used when interpreting the lpLCData information. For the Unicode version, this parameter is ignored. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT The following custom locale identifiers are also supported. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED",
 "SetThreadLocale": "Locale identifier that specifies the locale. You can use the MAKELCID macro to create a locale identifier or use one of the following predefined values. LOCALE_CUSTOM_DEFAULT LOCALE_CUSTOM_UI_DEFAULT LOCALE_CUSTOM_UNSPECIFIED LOCALE_INVARIANT LOCALE_SYSTEM_DEFAULT LOCALE_USER_DEFAULT",
 "SetUserGeoID": "Identifier for the geographical location of the user.",
 "UpdateCalendarDayOfWeek": "Pointer to the CALDATETIME structure containing the date for which to set the day of the week.",
 "VerifyScripts": "Flags specifying script verification options. ValueMeaning VS_ALLOW_LATIN Allow \"Latn\" (Latin script) in the test list even if it is not in the locale list.",
 "ADsBuildEnumerator": "Type: IADsContainer* Pointer to the IADsContainer interface for the object to enumerate.",
 "ADsBuildVarArrayInt": "Type: LPDWORD Array of DWORD values.",
 "ADsBuildVarArrayStr": "Type: LPWSTR* Array of null-terminated Unicode strings.",
 "ADsEncodeBinaryData": "Type: PBYTE BLOB to be converted.",
 "ADsEnumerateNext": "Type: IEnumVARIANT* Pointer to the IEnumVARIANT interface on the enumerator object.",
 "ADsFreeEnumerator": "Type: IEnumVARIANT* Pointer to the IEnumVARIANT interface on the enumerator object to be freed.",
 "ADsGetLastError": "Type: LPDWORD Pointer to the location that receives the error code.",
 "ADsGetObject": "Type: LPCWSTR The null-terminated Unicode string that specifies the path used to bind to the object in the underlying directory service. For more information and code examples for binding strings for this parameter, see LDAP ADsPath and WinNT ADsPath.",
 "ADsOpenObject": "Type: LPCWSTR The null-terminated Unicode string that specifies the ADsPath of the ADSI object. For more information and code examples of binding strings for this parameter, see LDAP ADsPath and WinNT ADsPath.",
 "ADsSetLastError": "Type: DWORD The error code that occurred. If this is an error defined by Windows, pszError is ignored. If this is ERROR_EXTENDED_ERROR, it indicates the provider has a network-specific error to report.",
 "AllocADsMem": "Type: DWORD Contains the size, in bytes, to be allocated.",
 "AllocADsStr": "Type: LPWSTR Pointer to a null-terminated Unicode string to be copied.",
 "FreeADsMem": "Type: LPVOID Pointer to the memory to be freed. This memory must have been allocated with the AllocADsMem or ReallocADsMem function.",
 "FreeADsStr": "Type: LPWSTR Pointer to the string to be freed. This string must have been allocated with the AllocADsStr or ReallocADsStr function.",
 "ReallocADsMem": "Type: LPVOID Pointer to the memory to copy. ReallocADsMem will free this memory with FreeADsMem after it has been copied. If additional memory cannot be allocated, this memory is not freed. This memory must have been allocated with the AllocADsMem, AllocADsStr, ReallocADsMem, or ReallocADsStr function. The caller must free this memory when it is no longer required by passing this pointer to FreeADsMem.",
 "ReallocADsStr": "Type: LPWSTR* Pointer to null-terminated Unicode string pointer that receives the allocated string. ReallocADsStr will attempt to free this memory with FreeADsStr before reallocating the string, so this parameter should be initialized to NULL if the memory should not be freed or was not allocated with the AllocADsMem, AllocADsStr, ReallocADsMem or ReallocADsStr function. The caller must free this memory when it is no longer required by passing this pointer to FreeADsStr.",
 "DdeAbandonTransaction": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeAccessData": "Type: HDDEDATA A handle to the DDE object to be accessed.",
 "DdeAddData": "Type: HDDEDATA A handle to the DDE object that receives additional data.",
 "DdeCallback": "Type: UINT The type of the current transaction. This parameter consists of a combination of transaction class flags and transaction type flags. The following table describes each of the transaction classes and provides a list of the transaction types in each class. For information about a specific transaction type, see the individual description of that type. XCLASS_BOOL A DDE callback function should return TRUE or FALSE when it finishes processing a transaction that belongs to this class. The XCLASS_BOOL transaction class consists of the following types: XTYP_ADVSTART XTYP_CONNECT XCLASS_DATA A DDE callback function should return a DDE handle, the CBR_BLOCK return code, or NULL when it finishes processing a transaction that belongs to this class. The XCLASS_DATA transaction class consists of the following types: XTYP_ADVREQ XTYP_REQUEST XTYP_WILDCONNECT XCLASS_FLAGS A DDE callback function should return DDE_FACK, DDE_FBUSY, or DDE_FNOTPROCESSED when it finishes processing a transaction that belongs to this class. The XCLASS_FLAGS transaction class consists of the following types: XTYP_ADVDATA XTYP_EXECUTE XTYP_POKE XCLASS_NOTIFICATION The transaction types that belong to this class are for notification purposes only. The return value from the callback function is ignored. The XCLASS_NOTIFICATION transaction class consists of the following types: \t\t\t\t\t\t XTYP_ADVSTOP XTYP_CONNECT_CONFIRM XTYP_DISCONNECT XTYP_ERROR XTYP_MONITOR XTYP_REGISTER XTYP_XACT_COMPLETE XTYP_UNREGISTER",
 "DdeClientTransaction": "Type: LPBYTE The beginning of the data the client must pass to the server. Optionally, an application can specify the data handle (HDDEDATA) to pass to the server and in that case the \t\t\t\t\t\tcbData parameter should be set to -1. This parameter is required only if the \t\t\t\t\t\twType parameter is XTYP_EXECUTE or XTYP_POKE. Otherwise, this parameter should be NULL. For the optional usage of this parameter, XTYP_POKE transactions where \t\t\t\t\t\tpData is a data handle, the handle must have been created by a previous call to the DdeCreateDataHandle function, employing the same data format specified in the \t\t\t\t\t\twFmt parameter.",
 "DdeCmpStringHandles": "Type: HSZ A handle to the first string.",
 "DdeConnect": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeConnectList": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeCreateDataHandle": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeCreateStringHandle": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeDisconnect": "Type: HCONV A handle to the active conversation to be terminated.",
 "DdeDisconnectList": "Type: HCONVLIST A handle to the conversation list. This handle must have been created by a previous call to the DdeConnectList function.",
 "DdeEnableCallback": "Type: DWORD The application-instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeFreeDataHandle": "Type: HDDEDATA A handle to the DDE object to be freed. This handle must have been created by a previous call to the DdeCreateDataHandle function or returned by the DdeClientTransaction function.",
 "DdeFreeStringHandle": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeGetData": "Type: HDDEDATA A handle to the DDE object that contains the data to copy.",
 "DdeGetLastError": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeImpersonateClient": "Type: HCONV A handle to the DDE client conversation to be impersonated.",
 "DdeInitialize": "Type: LPDWORD The application instance identifier. At initialization, this parameter should point to 0. If the function succeeds, this parameter points to the instance identifier for the application. This value should be passed as the \t\t\t\t\tidInst parameter in all other DDEML functions that require it. If an application uses multiple instances of the DDEML dynamic-link library (DLL), the application should provide a different callback function for each instance. If \t\t\t\t\tpidInst points to a nonzero value, reinitialization of the DDEML is implied. In this case, \t\t\t\t\tpidInst must point to a valid application-instance identifier.",
 "DdeKeepStringHandle": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeNameService": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdePostAdvise": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeQueryConvInfo": "Type: HCONV A handle to the conversation.",
 "DdeQueryNextServer": "Type: HCONVLIST A handle to the conversation list. This handle must have been created by a previous call to the DdeConnectList function.",
 "DdeQueryString": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "DdeReconnect": "Type: HCONV A handle to the conversation to be reestablished. A client must have obtained the conversation handle by a previous call to the DdeConnect function or from an XTYP_DISCONNECT transaction.",
 "DdeSetUserHandle": "Type: HCONV A handle to the conversation.",
 "DdeUnaccessData": "Type: HDDEDATA A handle to the DDE object.",
 "DdeUninitialize": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function.",
 "SafeArrayAccessData": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayUnaccessData": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayAddRef": "The safe array for which the pinning reference count of the descriptor should increase. While that count remains greater than 0, the memory for the descriptor is prevented from being freed by calls to the SafeArrayDestroy or SafeArrayDestroyDescriptor functions.",
 "SafeArrayAllocData": "A safe array descriptor created by SafeArrayAllocDescriptor.",
 "SafeArrayAllocDescriptor": "The number of dimensions of the array.",
 "SafeArrayAllocDescriptorEx": "The variant type.",
 "SafeArrayCopy": "A safe array descriptor created by SafeArrayCreate.",
 "SafeArrayCopyData": "The safe array to copy.",
 "SafeArrayCreate": "The base type of the array (the VARTYPE of each element of the array). The VARTYPE is restricted to a subset of the variant types. Neither the VT_ARRAY nor the VT_BYREF flag can be set. VT_EMPTY and VT_NULL are not valid base types for the array. All other types are legal.",
 "SafeArrayCreateEx": "The base type or the VARTYPE of each element of the array. The FADF_RECORD flag can be set for a variant type VT_RECORD, The FADF_HAVEIID flag can be set for VT_DISPATCH or VT_UNKNOWN, and FADF_HAVEVARTYPE can be set for all other VARTYPEs.",
 "SafeArrayCreateVector": "The base type of the array (the VARTYPE of each element of the array). The VARTYPE is restricted to a subset of the variant types. Neither the VT_ARRAY nor the VT_BYREF flag can be set. VT_EMPTY and VT_NULL are not valid base types for the array. All other types are legal.",
 "SafeArrayCreateVectorEx": "The base type of the array (the VARTYPE of each element of the array). The FADF_RECORD flag can be set for VT_RECORD. The FADF_HAVEIID can be set for VT_DISPATCH or VT_UNKNOWN and FADF_HAVEVARTYPE can be set for all other types.",
 "SafeArrayDestroy": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayDestroyData": "A safe array descriptor.",
 "SafeArrayDestroyDescriptor": "A safe array descriptor.",
 "SafeArrayGetDim": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayGetElement": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayGetElemsize": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayGetIID": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayGetLBound": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayGetRecordInfo": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayGetUBound": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayGetVartype": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayLock": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayPtrOfIndex": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayPutElement": "An array descriptor created by SafeArrayCreate.",
 "SafeArrayRedim": "A safe array descriptor.",
 "SafeArrayReleaseData": "The safe array data for which the pinning reference count should decrease.",
 "SafeArrayReleaseDescriptor": "The safe array for which the pinning reference count of the descriptor should decrease.",
 "SafeArraySetIID": "The safe array descriptor.",
 "SafeArraySetRecordInfo": "The array descriptor.",
 "SafeArrayUnlock": "An array descriptor created by SafeArrayCreate.",
 "VariantChangeType": "The destination variant. If this is the same as pvarSrc, the variant will be converted in place.",
 "VariantChangeTypeEx": "The destination variant. If this is the same as pvarSrc, the variant will be converted in place.",
 "VariantInit": "The variant to initialize.",
 "SysAllocString": "The string to copy.",
 "SysFreeString": "The previously allocated string. If this parameter is NULL, the function simply returns.",
 "VariantClear": "The variant to clear.",
 "VariantCopy": "The destination variant.",
 "VariantCopyInd": "The destination variant.",
 "VarAbs": "The variant.",
 "VarAdd": "The first variant.",
 "VarAnd": "The first variant.",
 "VarCat": "The first variant.",
 "VarCmp": "The first variant.",
 "VarDiv": "The first variant.",
 "VarEqv": "The first variant.",
 "VarFix": "The variant.",
 "VarIdiv": "The first variant.",
 "VarImp": "The first variant.",
 "VarInt": "The variant.",
 "VarMod": "The first variant.",
 "VarMul": "The first variant.",
 "VarNeg": "The variant.",
 "VarNot": "The variant.",
 "VarOr": "The first variant.",
 "VarPow": "The first variant.",
 "VarR4CmpR8": "The first variant.",
 "VarR8Pow": "The first variant.",
 "VarR8Round": "The variant.",
 "VarRound": "The variant.",
 "VarSub": "The first variant.",
 "VarXor": "The first variant.",
 "SysAddRefString": "The string for which the pinning reference count should increase. While that count remains greater than 0, the memory for the string is prevented from being freed by calls to the SysFreeString function.",
 "SysAllocStringByteLen": "The string to copy, or NULL to keep the string uninitialized.",
 "SysAllocStringLen": "The input string.",
 "SysReAllocString": "The previously allocated string.",
 "SysReAllocStringLen": "The previously allocated string.",
 "SysReleaseString": "The string for which the pinning reference count should decrease.",
 "SysStringByteLen": "A previously allocated string.",
 "SysStringLen": "A previously allocated string.",
 "BSTR_UserFree": "The data used by RPC.",
 "BSTR_UserFree64": "The data used by RPC.",
 "BSTR_UserMarshal": "The data used by RPC.",
 "BSTR_UserMarshal64": "The data used by RPC.",
 "BSTR_UserSize": "The data used by RPC.",
 "BSTR_UserSize64": "The data used by RPC.",
 "BSTR_UserUnmarshal": "The data used by RPC.",
 "BSTR_UserUnmarshal64": "The data used by RPC.",
 "LPSAFEARRAY_Marshal": "The data used by RPC.",
 "LPSAFEARRAY_UserMarshal": "The data used by RPC.",
 "LPSAFEARRAY_Size": "The data used by RPC.",
 "LPSAFEARRAY_UserSize": "The data used by RPC.",
 "LPSAFEARRAY_Unmarshal": "The data used by RPC.",
 "LPSAFEARRAY_UserUnmarshal": "The data used by RPC.",
 "LPSAFEARRAY_UserFree": "The data used by RPC.",
 "LPSAFEARRAY_UserFree64": "The data used by RPC.",
 "LPSAFEARRAY_UserMarshal64": "The data used by RPC.",
 "LPSAFEARRAY_UserSize64": "The data used by RPC.",
 "LPSAFEARRAY_UserUnmarshal64": "The data used by RPC.",
 "VARIANT_UserFree": "The data used by RPC.",
 "VARIANT_UserFree64": "The data used by RPC.",
 "VARIANT_UserMarshal": "The data used by RPC.",
 "VARIANT_UserMarshal64": "The data used by RPC.",
 "VARIANT_UserSize": "The data used by RPC.",
 "VARIANT_UserSize64": "The data used by RPC.",
 "VARIANT_UserUnmarshal": "The data used by RPC.",
 "VARIANT_UserUnmarshal64": "The data used by RPC.",
 "VarNumFromParseNum": "The parsed results. The cDig member of this argument specifies the number of digits present in rgbDig.",
 "VarParseNumFromStr": "The input string to convert.",
 "VarDecAbs": "The first variant.",
 "VarDecAdd": "The first variant.",
 "VarDecCmp": "The first variant.",
 "VarDecCmpR8": "The first variant.",
 "VarDecDiv": "The first decimal variant.",
 "VarDecFix": "The decimal variant.",
 "VarDecInt": "The decimal variant.",
 "VarDecMul": "The first variant.",
 "VarDecNeg": "The variant to negate.",
 "VarDecRound": "The variant to round.",
 "VarDecSub": "The first variant.",
 "DosDateTimeToVariantTime": "The MS-DOS date to convert. The valid range of MS-DOS dates is January 1, 1980, to December 31, 2099, inclusive.",
 "GetAltMonthNames": "The locale identifier to be used in retrieving the alternate month names.",
 "SystemTimeToVariantTime": "The system time.",
 "VarDateFromUdate": "The unpacked date.",
 "VarDateFromUdateEx": "The unpacked date.",
 "VariantTimeToDosDateTime": "The variant time to convert.",
 "VariantTimeToSystemTime": "The variant time to convert.",
 "VarUdateFromDate": "The packed date.",
 "VarI1FromUI1": "The value to convert.",
 "VarI1FromUI2": "The value to convert.",
 "VarI1FromUI4": "The value to convert.",
 "VarI1FromUI8": "The value to convert.",
 "VarI1FromI2": "The value to convert.",
 "VarI1FromI4": "The value to convert.",
 "VarI1FromI8": "The value to convert.",
 "VarI1FromR4": "The value to convert.",
 "VarI1FromR8": "The value to convert.",
 "VarI1FromCy": "The value to convert.",
 "VarI1FromDec": "The value to convert.",
 "VarI1FromDate": "The value to convert.",
 "VarI1FromStr": "The value to convert.",
 "VarI1FromDisp": "The value to convert.",
 "VarI1FromBool": "The value to convert.",
 "VarUI1FromUI2": "The value to convert.",
 "VarUI1FromUI4": "The value to convert.",
 "VarUI1FromI1": "The value to convert.",
 "VarUI1FromI2": "The value to convert.",
 "VarUI1FromI4": "The value to convert.",
 "VarUI1FromI8": "The value to convert.",
 "VarUI1FromR4": "The value to convert.",
 "VarUI1FromR8": "The value to convert.",
 "VarUI1FromCy": "The value to convert.",
 "VarUI1FromDec": "The value to convert.",
 "VarUI1FromDate": "The value to convert.",
 "VarUI1FromStr": "The value to convert.",
 "VarUI1FromDisp": "The value to convert.",
 "VarUI1FromBool": "The value to convert.",
 "VarI2FromUI1": "The value to convert.",
 "VarI2FromUI2": "The value to convert.",
 "VarI2FromUI4": "The value to convert.",
 "VarI2FromUI8": "The value to convert.",
 "VarI2FromI1": "The value to convert.",
 "VarI2FromI4": "The value to convert.",
 "VarI2FromI8": "The value to convert.",
 "VarI2FromR4": "The value to convert.",
 "VarI2FromR8": "The value to convert.",
 "VarI2FromCy": "The value to convert.",
 "VarI2FromDec": "The value to convert.",
 "VarI2FromDate": "The value to convert.",
 "VarI2FromStr": "The value to convert.",
 "VarI2FromDisp": "The value to convert.",
 "VarI2FromBool": "The value to convert.",
 "VarUI2FromI1": "The value to convert.",
 "VarUI2FromI2": "The value to convert.",
 "VarUI2FromI4": "The value to convert.",
 "VarUI2FromI8": "The value to convert.",
 "VarUI2FromUI1": "The value to convert.",
 "VarUI2FromUI4": "The value to convert.",
 "VarUI2FromUI8": "The value to convert.",
 "VarUI2FromR4": "The value to convert.",
 "VarUI2FromR8": "The value to convert.",
 "VarUI2FromCy": "The value to convert.",
 "VarUI2FromDec": "The value to convert.",
 "VarUI2FromDate": "The value to convert.",
 "VarUI2FromStr": "The value to convert.",
 "VarUI2FromDisp": "The value to convert.",
 "VarUI2FromBool": "The value to convert.",
 "VarI4FromUI2": "The value to convert.",
 "VarI4FromUI4": "The value to convert.",
 "VarI4FromUI8": "The value to convert.",
 "VarI4FromI1": "The value to convert.",
 "VarI4FromUI1": "The value to convert.",
 "VarI4FromI2": "The value to convert.",
 "VarI4FromI8": "The value to convert.",
 "VarI4FromR4": "The value to convert.",
 "VarI4FromR8": "The value to convert.",
 "VarI4FromCy": "The value to convert.",
 "VarI4FromDec": "The value to convert.",
 "VarI4FromDate": "The value to convert.",
 "VarI4FromStr": "The value to convert.",
 "VarI4FromDisp": "The value to convert.",
 "VarI4FromBool": "The value to convert.",
 "VarI4FromInt": "The value to convert.",
 "VarUI4FromUI2": "The value to convert.",
 "VarUI4FromI1": "The value to convert.",
 "VarUI4FromI2": "The value to convert.",
 "VarUI4FromUI1": "The value to convert.",
 "VarUI4FromUI8": "The value to convert.",
 "VarUI4FromI4": "The value to convert.",
 "VarUI4FromI8": "The value to convert.",
 "VarUI4FromR4": "The value to convert.",
 "VarUI4FromR8": "The value to convert.",
 "VarUI4FromCy": "The value to convert.",
 "VarUI4FromDec": "The value to convert.",
 "VarUI4FromDate": "The value to convert.",
 "VarUI4FromStr": "The value to convert.",
 "VarUI4FromDisp": "The value to convert.",
 "VarUI4FromBool": "The value to convert.",
 "VarR4FromUI2": "The value to convert.",
 "VarR4FromUI4": "The value to convert.",
 "VarR4FromUI8": "The value to convert.",
 "VarR4FromI1": "The value to convert.",
 "VarR4FromUI1": "The value to convert.",
 "VarR4FromI2": "The value to convert.",
 "VarR4FromI4": "The value to convert.",
 "VarR4FromI8": "The value to convert.",
 "VarR4FromR8": "The value to convert.",
 "VarR4FromCy": "The value to convert.",
 "VarR4FromDec": "The value to convert.",
 "VarR4FromDate": "The value to convert.",
 "VarR4FromStr": "The value to convert.",
 "VarR4FromDisp": "The value to convert.",
 "VarR4FromBool": "The value to convert.",
 "VarR8FromUI2": "The value to convert.",
 "VarR8FromUI4": "The value to convert.",
 "VarR8FromUI8": "The value to convert.",
 "VarR8FromI1": "The value to convert.",
 "VarR8FromUI1": "The value to convert.",
 "VarR8FromI2": "The value to convert.",
 "VarR8FromI4": "The value to convert.",
 "VarR8FromI8": "The value to convert.",
 "VarR8FromR4": "The value to convert.",
 "VarR8FromCy": "The value to convert.",
 "VarR8FromDec": "The value to convert.",
 "VarR8FromDate": "The value to convert.",
 "VarR8FromStr": "The value to convert.",
 "VarR8FromDisp": "The value to convert.",
 "VarR8FromBool": "The value to convert.",
 "VarDateFromUI2": "The value to convert.",
 "VarDateFromUI4": "The value to convert.",
 "VarDateFromUI8": "The value to convert.",
 "VarDateFromI1": "The value to convert.",
 "VarDateFromUI1": "The value to convert.",
 "VarDateFromI2": "The value to convert.",
 "VarDateFromI4": "The value to convert.",
 "VarDateFromI8": "The value to convert.",
 "VarDateFromR4": "The value to convert.",
 "VarDateFromR8": "The value to convert.",
 "VarDateFromCy": "The value to convert.",
 "VarDateFromDec": "The value to convert.",
 "VarDateFromStr": "The value to convert.",
 "VarDateFromDisp": "The value to convert.",
 "VarDateFromBool": "The value to convert.",
 "VarCyFromUI2": "The value to convert.",
 "VarCyFromUI4": "The value to convert.",
 "VarCyFromUI8": "The value to convert.",
 "VarCyFromI1": "The value to convert.",
 "VarCyFromUI1": "The value to convert.",
 "VarCyFromI2": "The value to convert.",
 "VarCyFromI4": "The value to convert.",
 "VarCyFromI8": "The value to convert.",
 "VarCyFromR4": "The value to convert.",
 "VarCyFromR8": "The value to convert.",
 "VarCyFromDec": "The value to convert.",
 "VarCyFromDate": "The value to convert.",
 "VarCyFromStr": "The value to convert.",
 "VarCyFromDisp": "The value to convert.",
 "VarCyFromBool": "The value to convert.",
 "VarBstrFromUI2": "The value to convert.",
 "VarBstrFromUI4": "The value to convert.",
 "VarBstrFromUI8": "The value to convert.",
 "VarBstrFromI1": "The value to convert.",
 "VarBstrFromUI1": "The value to convert.",
 "VarBstrFromI2": "The value to convert.",
 "VarBstrFromI4": "The value to convert.",
 "VarBstrFromI8": "The value to convert.",
 "VarBstrFromR4": "The value to convert.",
 "VarBstrFromR8": "The value to convert.",
 "VarBstrFromCy": "The value to convert.",
 "VarBstrFromDec": "The value to convert.",
 "VarBstrFromDate": "The value to convert.",
 "VarBstrFromDisp": "The value to convert.",
 "VarBstrFromBool": "The value to convert.",
 "VarBoolFromUI2": "The value to convert.",
 "VarBoolFromUI4": "The value to convert.",
 "VarBoolFromUI8": "The value to convert.",
 "VarBoolFromI1": "The value to convert.",
 "VarBoolFromUI1": "The value to convert.",
 "VarBoolFromI2": "The value to convert.",
 "VarBoolFromI4": "The value to convert.",
 "VarBoolFromI8": "The value to convert.",
 "VarBoolFromR4": "The value to convert.",
 "VarBoolFromR8": "The value to convert.",
 "VarBoolFromCy": "The value to convert.",
 "VarBoolFromDec": "The value to convert.",
 "VarBoolFromDate": "The value to convert.",
 "VarBoolFromStr": "The value to convert.",
 "VarBoolFromDisp": "The value to convert.",
 "VarDecFromUI2": "The value to convert.",
 "VarDecFromUI4": "The value to convert.",
 "VarDecFromUI8": "The value to convert.",
 "VarDecFromI1": "The value to convert.",
 "VarDecFromUI1": "The value to convert.",
 "VarDecFromI2": "The value to convert.",
 "VarDecFromI4": "The value to convert.",
 "VarDecFromI8": "The value to convert.",
 "VarDecFromR4": "The value to convert.",
 "VarDecFromR8": "The value to convert.",
 "VarDecFromCy": "The value to convert.",
 "VarDecFromDate": "The value to convert.",
 "VarDecFromStr": "The value to convert.",
 "VarDecFromDisp": "The value to convert.",
 "VarDecFromBool": "The value to convert.",
 "VarCyAbs": "The currency variant.",
 "VarCyAdd": "The first variant.",
 "VarCyCmp": "The first variant.",
 "VarCyCmpR8": "The first variant.",
 "VarCyFix": "The currency variant.",
 "VarCyInt": "The currency variant.",
 "VarCyMul": "The first variant",
 "VarCyMulI4": "The first variant.",
 "VarCyMulI8": "The first variant.",
 "VarCyNeg": "The variant to negate.",
 "VarCyRound": "The variant to round.",
 "VarCySub": "The first variant.",
 "VectorFromBstr": "The BSTR to be converted to a vector.",
 "BstrFromVector": "The vector to be converted to a BSTR.",
 "DispInvoke": "An implementation of the IDispatch interface described by ptinfo.",
 "SetOaNoCache": null,
 "VarBstrCat": "The first variant.",
 "VarBstrCmp": "The first variant.",
 "DwmAttachMilContent": "",
 "DwmDefWindowProc": "A handle to the window procedure that received the message.",
 "DwmDetachMilContent": "",
 "DwmEnableBlurBehindWindow": "The handle to the window on which the blur behind data is applied.",
 "DwmEnableComposition": "DWM_EC_ENABLECOMPOSITION to enable DWM composition; DWM_EC_DISABLECOMPOSITION to disable composition. Note As of Windows 8, calling this function with DWM_EC_DISABLECOMPOSITION has no effect. However, the function will still return a success code.",
 "DwmEnableMMCSS": "TRUE to instruct DWM to participate in MMCSS scheduling; FALSE to opt out or end participation in MMCSS scheduling.",
 "DwmExtendFrameIntoClientArea": "The handle to the window in which the frame will be extended into the client area.",
 "DwmFlush": null,
 "DwmGetColorizationColor": "A pointer to a value that, when this function returns successfully, receives the current color used for glass composition. The color format of the value is 0xAARRGGBB.",
 "DwmGetCompositionTimingInfo": "The handle to the window for which the composition timing information should be retrieved. Starting with Windows 8.1, this parameter must be set to NULL. If this parameter is not set to NULL, DwmGetCompositionTimingInfo returns E_INVALIDARG.",
 "DwmGetGraphicsStreamClient": "",
 "DwmGetGraphicsStreamTransformHint": "",
 "DwmGetTransportAttributes": "A pointer to a BOOL value that indicates whether the transport supports remoting. TRUE if the transport supports remoting; otherwise, FALSE.",
 "DwmGetWindowAttribute": "The handle to the window from which the attribute data is retrieved.",
 "DwmInvalidateIconicBitmaps": "A handle to the window or tab whose bitmaps are being invalidated through this call. This window must belong to the calling process.",
 "DwmIsCompositionEnabled": "A pointer to a value that, when this function returns successfully, receives TRUE if DWM composition is enabled; otherwise, FALSE. ...",
 "DwmModifyPreviousDxFrameDuration": "The handle to the window for which the new duration is applied to the previous frame.",
 "DwmQueryThumbnailSourceSize": "A handle to the thumbnail to retrieve the source window size from.",
 "DwmRegisterThumbnail": "The handle to the window that will use the DWM thumbnail. Setting the destination window handle to anything other than a top-level window type will result in a return value of E_INVALIDARG.",
 "DwmRenderGesture": "The type of gesture, specified as one of the GESTURE_TYPE values.",
 "DwmSetDxFrameDuration": "The handle to the window that displays the presented frame.",
 "DwmSetIconicLivePreviewBitmap": "A handle to the window. This window must belong to the calling process.",
 "DwmSetIconicThumbnail": "A handle to the window or tab. This window must belong to the calling process.",
 "DwmSetPresentParameters": "The handle to the window where the present parameters are applied.",
 "DwmSetWindowAttribute": "The handle to the window that will receive the attributes.",
 "DwmShowContact": "The pointer ID of the contact. Each touch or pen contact is given a unique ID when it is detected.",
 "DwmTetherContact": "The pointer ID.",
 "DwmTransitionOwnedWindow": "Handle to the window.",
 "DwmUnregisterThumbnail": "The handle to the thumbnail relationship to be removed. Null or non-existent handles will result in a return value of E_INVALIDARG.",
 "DwmUpdateThumbnailProperties": "The handle to the DWM thumbnail to be updated. Null or invalid thumbnails, as well as thumbnails owned by other processes will result in a return value of E_INVALIDARG.",
 "CancelDC": "A handle to the DC.",
 "ChangeDisplaySettings": "A pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change. The dmSize member of DEVMODE must be initialized to the size, in bytes, of the DEVMODE structure. The dmDriverExtra member of DEVMODE must be initialized to indicate the number of bytes of private driver data following the DEVMODE structure. In addition, you can use any or all of the following members of the DEVMODE structure. MemberMeaning dmBitsPerPelBits per pixel dmPelsWidthPixel width dmPelsHeightPixel height dmDisplayFlagsMode flags dmDisplayFrequencyMode frequency dmPositionPosition of the device in a multi-monitor configuration. In addition to using one or more of the preceding DEVMODE members, you must also set one or more of the following values in the dmFields member to change the display setting. ValueMeaning DM_BITSPERPELUse the dmBitsPerPel value. DM_PELSWIDTHUse the dmPelsWidth value. DM_PELSHEIGHTUse the dmPelsHeight value. DM_DISPLAYFLAGSUse the dmDisplayFlags value. DM_DISPLAYFREQUENCYUse the dmDisplayFrequency value. DM_POSITIONUse the dmPosition value.",
 "ChangeDisplaySettingsEx": "A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by EnumDisplayDevices are valid. See EnumDisplayDevices for further information on the names associated with these display devices. The lpszDeviceName parameter can be NULL. A NULL value specifies the default display device. The default device can be determined by calling EnumDisplayDevices and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.",
 "CreateCompatibleDC": "A handle to an existing DC. If this handle is NULL, the function creates a memory DC compatible with the application's current screen.",
 "CreateDC": "A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass NULL to lpszDriver because GDI ignores lpszDriver for printer devices.",
 "CreateIC": "A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).",
 "DeleteDC": "A handle to the device context.",
 "DeleteObject": "A handle to a logical pen, brush, font, bitmap, region, or palette.",
 "DeviceCapabilities": "A pointer to a null-terminated string that contains the name of the printer. Note that this is the name of the printer, not of the printer driver.",
 "DrawEscape": "A handle to the DC for the specified video display.",
 "EnumDisplayDevices": "A pointer to the device name. If NULL, function returns information for the display adapter(s) on the machine, based on iDevNum. For more information, see Remarks.",
 "EnumDisplaySettings": "A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information. This parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer on which the calling thread is running.",
 "EnumDisplaySettingsEx": "A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information. This parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer that the calling thread is running on.",
 "EnumObjects": "A handle to the DC.",
 "EnumObjectsProc": "A pointer to a LOGPEN or LOGBRUSH structure describing the attributes of the object.",
 "GetCurrentObject": "A handle to the DC.",
 "GetDC": "A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.",
 "GetDCBrushColor": "A handle to the DC whose brush color is to be returned.",
 "GetDCEx": "A handle to the window whose DC is to be retrieved. If this value is NULL, GetDCEx retrieves the DC for the entire screen.",
 "GetDCOrgEx": "A handle to the DC whose final translation origin is to be retrieved.",
 "GetDCPenColor": "A handle to the DC whose brush color is to be returned.",
 "GetDeviceCaps": "A handle to the DC.",
 "GetLayout": "A handle to the device context.",
 "GetObject": "A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function.",
 "GetObjectType": "A handle to the graphics object.",
 "GetStockObject": "The type of stock object. This parameter can be one of the following values. ValueMeaning BLACK_BRUSH Black brush. DKGRAY_BRUSH Dark gray brush. DC_BRUSH Solid color brush. The default color is white. The color can be changed by using the SetDCBrushColor function. For more information, see the Remarks section. GRAY_BRUSH Gray brush. HOLLOW_BRUSH Hollow brush (equivalent to NULL_BRUSH). LTGRAY_BRUSH Light gray brush. NULL_BRUSH Null brush (equivalent to HOLLOW_BRUSH). WHITE_BRUSH White brush. BLACK_PEN Black pen. DC_PEN Solid pen color. The default color is white. The color can be changed by using the SetDCPenColor function. For more information, see the Remarks section. NULL_PEN Null pen. The null pen draws nothing. WHITE_PEN White pen. ANSI_FIXED_FONT Windows fixed-pitch (monospace) system font. ANSI_VAR_FONT Windows variable-pitch (proportional space) system font. DEVICE_DEFAULT_FONT Device-dependent font. DEFAULT_GUI_FONT Default font for user interface objects such as menus and dialog boxes. It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the remarks section. The default font is Tahoma. OEM_FIXED_FONT Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font. SYSTEM_FONT System font. By default, the system uses the system font to draw menus, dialog box controls, and text. It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the remarks section. The default system font is Tahoma. SYSTEM_FIXED_FONT Fixed-pitch (monospace) system font. This stock object is provided only for compatibility with 16-bit Windows versions earlier than 3.0. DEFAULT_PALETTE Default palette. This palette consists of the static colors in the system palette.",
 "ReleaseDC": "A handle to the window whose DC is to be released.",
 "ResetDC": "A handle to the DC to update.",
 "RestoreDC": "A handle to the DC.",
 "SaveDC": "A handle to the DC whose state is to be saved.",
 "SelectObject": "A handle to the DC.",
 "SetDCBrushColor": "A handle to the DC.",
 "SetDCPenColor": "A handle to the DC.",
 "SetLayout": "A handle to the DC.",
 "WindowFromDC": "Handle to the device context from which a handle to the associated window is to be retrieved.",
 "GetClassInfo": "Type: HINSTANCE A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.",
 "GetClassInfoEx": "Type: HINSTANCE A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.",
 "GetClassLong": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "GetClassLongPtr": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "GetClassName": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "GetClassWord": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "GetWindowLong": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "GetWindowLongPtr": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "RegisterClass": "Type: const WNDCLASS* A pointer to a WNDCLASS structure. You must fill the structure with the appropriate class attributes before passing it to the function.",
 "RegisterClassEx": "Type: const WNDCLASSEX* A pointer to a WNDCLASSEX structure. You must fill the structure with the appropriate class attributes before passing it to the function.",
 "SetClassLong": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "SetClassLongPtr": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "SetClassWord": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "SetWindowLong": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
 "SetWindowLongPtr": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs. The SetWindowLongPtr function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in. Windows XP/2000: The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.",
 "UnregisterClass": "Type: LPCTSTR A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. This class name must have been registered by a previous call to the RegisterClass or RegisterClassEx function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.",
 "AddClipboardFormatListener": "Type: HWND A handle to the window to be placed in the clipboard format listener list.",
 "ChangeClipboardChain": "Type: HWND A handle to the window to be removed from the chain. The handle must have been passed to the SetClipboardViewer function.",
 "CloseClipboard": null,
 "CountClipboardFormats": null,
 "EmptyClipboard": null,
 "EnumClipboardFormats": "Type: UINT A clipboard format that is known to be available. To start an enumeration of clipboard formats, set \t\t\t\t\tformat to zero. When \t\t\t\t\tformat is zero, the function retrieves the first available clipboard format. For subsequent calls during an enumeration, set \t\t\t\t\tformat to the result of the previous \t\t\t\t\tEnumClipboardFormats call.",
 "GetClipboardData": "Type: UINT A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats.",
 "GetClipboardFormatName": "Type: UINT The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.",
 "GetClipboardOwner": null,
 "GetClipboardSequenceNumber": null,
 "GetClipboardViewer": null,
 "GetOpenClipboardWindow": null,
 "GetPriorityClipboardFormat": "Type: UINT* The clipboard formats, in priority order. For a description of the standard clipboard formats, see Standard Clipboard Formats .",
 "GetUpdatedClipboardFormats": "Type: PUINT An array of clipboard formats. For a description of the standard clipboard formats, see Standard Clipboard Formats.",
 "IsClipboardFormatAvailable": "Type: UINT A standard or registered clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats .",
 "OpenClipboard": "Type: HWND A handle to the window to be associated with the open clipboard. If this parameter is NULL, the open clipboard is associated with the current task.",
 "RegisterClipboardFormat": "Type: LPCTSTR The name of the new format.",
 "RemoveClipboardFormatListener": "Type: HWND A handle to the window to remove from the clipboard format listener list.",
 "SetClipboardData": "Type: UINT The clipboard format. This parameter can be a registered format or any of the standard clipboard formats. For more information, see Standard Clipboard Formats and Registered Clipboard Formats.",
 "SetClipboardViewer": "Type: HWND A handle to the window to be added to the clipboard chain.",
 "EnableScrollBar": "Type: HWND Handle to a window or a scroll bar control, depending on the value of the \t\t\t\t\twSBflags parameter.",
 "GetScrollBarInfo": "Type: HWND Handle to a window associated with the scroll bar whose information is to be retrieved. If the \t\t\t\t\tidObject parameter is OBJID_CLIENT, \t\t\t\t\thwnd is a handle to a scroll bar control. Otherwise, \t\t\t\t\thwnd is a handle to a window created with WS_VSCROLL and/or WS_HSCROLL style.",
 "GetScrollInfo": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the \t\t\t\t\tfnBar parameter.",
 "GetScrollPos": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the \t\t\t\t\tnBar parameter.",
 "GetScrollRange": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the \t\t\t\t\tnBar parameter.",
 "ScrollDC": "Type: HDC Handle to the device context that contains the bits to be scrolled.",
 "ScrollWindow": "Type: HWND Handle to the window where the client area is to be scrolled.",
 "ScrollWindowEx": "Type: HWND Handle to the window where the client area is to be scrolled.",
 "SetScrollInfo": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the \t\t\t\t\tfnBar parameter.",
 "SetScrollPos": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the nBar parameter.",
 "SetScrollRange": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the \t\t\t\t\tnBar parameter.",
 "ShowScrollBar": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the \t\t\t\t\twBar parameter.",
 "DWriteCreateFactory": "Type: DWRITE_FACTORY_TYPE A value that specifies whether the factory object will be shared or isolated.",
 "CommitTransaction": "A handle to the transaction to be committed. This handle must have been opened with the TRANSACTION_COMMIT access right. For more information, see KTM Security and Access Rights.",
 "CommitTransactionAsync": "A handle to the transaction to be committed. This handle must have been opened with the TRANSACTION_COMMIT access right. For more information, see KTM Security and Access Rights.",
 "CreateTransaction": "A pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If this parameter is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new event. If lpTransactionAttributes is NULL, the object gets a default security descriptor. The access control lists (ACL) in the default security descriptor for a transaction come from the primary or impersonation token of the creator.",
 "GetTransactionId": "A handle to the transaction.",
 "GetTransactionInformation": "A handle to the transaction. The handle must have the TRANSACTION_QUERY_INFORMATION permission to retrieve the information.",
 "OpenTransaction": "The access to the transaction object. You must have read and write access to work with a transaction. See Transaction Access Masks for a list of valid values.",
 "RollbackComplete": "A handle the enlistment.",
 "RollbackTransaction": "A handle to the transaction.",
 "RollbackTransactionAsync": "A handle to the transaction.",
 "SetTransactionInformation": "A handle to the transaction. The handle must have the TRANSACTION_SET_INFORMATION permission to set the transaction information.",
 "CommitComplete": "A handle to the enlistment for which the commit operation is completed.",
 "CommitEnlistment": "A handle to the enlistment to commit.",
 "GetEnlistmentId": "A handle to the enlistment.",
 "CreateEnlistment": "A pointer to a SECURITY_ATTRIBUTES structure that contains the security attributes for the enlistment manager. Specify NULL to obtain the default attributes.",
 "GetEnlistmentRecoveryInformation": "A handle to the enlistment.",
 "SetEnlistmentRecoveryInformation": "A handle to the enlistment.",
 "OpenEnlistment": "The access requested for this enlistment. See Enlistment Access Masks for a list of valid values.",
 "PrepareEnlistment": "A handle to the enlistment for which the prepare operation has completed.",
 "PrePrepareEnlistment": "A handle to the enlistment for which the prepare operation has completed.",
 "RecoverEnlistment": "A handle to the enlistment.",
 "ReadOnlyEnlistment": "A handle to the enlistment.",
 "RollbackEnlistment": "A handle to the enlistment.",
 "SinglePhaseReject": "A handle to the enlistment.",
 "CreateResourceManager": "A pointer to a SECURITY_ATTRIBUTES structure that contains the security attributes for the resource manager. Specify NULL to obtain the default attributes.",
 "GetNotificationResourceManager": "A handle to the resource manager.",
 "GetNotificationResourceManagerAsync": "A handle to the resource manager.",
 "OpenResourceManager": "The access requested for the RM. See Resource Manager Access Masks for a list of valid values.",
 "PrepareComplete": "A handle to the enlistment.",
 "PrePrepareComplete": "A handle to the enlistment.",
 "RecoverResourceManager": "A handle to the resource manager.",
 "SetResourceManagerCompletionPort": "A handle to the resource manager.",
 "CreateTransactionManager": "The transaction SECURITY_ATTRIBUTES (ACLs) for the TM object.",
 "GetCurrentClockTransactionManager": "A handle to the transaction manager to obtain a virtual clock value for.",
 "GetTransactionManagerId": "A handle to the transaction manager.",
 "OpenTransactionManager": "The name of the log stream. This stream must exist within a CLFS log file.",
 "OpenTransactionManagerById": "The identifier of the transaction to open.",
 "RecoverTransactionManager": "A handle to the transaction manager.",
 "RenameTransactionManager": "The name of the log stream. This stream must exist within a CLFS log file.",
 "RollforwardTransactionManager": "A handle to the transaction manager.",
 "NtAllocateVirtualMemory": null,
 "memcpy": null,
 "NtOpenSection": null,
 "NtQueryAttributesFile": null,
 "NtOpenFile": null,
 "NtCreateSection": null,
 "NtMapViewOfSection": null,
 "NtProtectVirtualMemory": null,
 "NtClose": null,
 "NtSetInformationProcess": null,
 "LdrGetDllHandle": null,
 "RtlDosPathNameToNtPathName_U": null,
 "LdrGetProcedureAddressForCaller": null,
 "NtCreateMutant": null,
 "NtWaitForSingleObject": null,
 "NtReleaseMutant": null,
 "RtlSetCurrentTransaction": null,
 "NtOpenKeyEx": null,
 "NtQueryValueKey": null,
 "NtOpenKey": null,
 "LdrLoadDll": null,
 "NtCreateFile": null,
 "NtQueryInformationFile": null,
 "NtCreateUserProcess": null,
 "LdrGetProcedureAddress": null,
 "NtQueryLicenseValue": null,
 "NtUnmapViewOfSection": null,
 "NtWow64WriteVirtualMemory64": null,
 "NtWriteVirtualMemory": null,
 "NtResumeThread": null,
 "NtTerminateProcess": null,
 "NtUnmapViewOfSectionEx": null,
 "NtCreateKey": null,
 "NtQueryKey": null,
 "NtDeviceIoControlFile": null,
 "NtDuplicateObject": null,
 "NtOpenEvent": null,
 "NtOpenThread": null,
 "WinHttpOpen": null,
 "WinHttpSetOption": null,
 "NtEnumerateKey": null,
 "NtSetValueKey": null,
 "NtEnumerateValueKey": null,
 "NtSetInformationFile": null,
 "NtTerminateThread": null,
 "NtFreeVirtualMemory": null,
 "NtReadVirtualMemory": null,
 "NtOpenProcess": null,
 "CreateToolhelp32Snapshot": null,
 "NtWriteFile": null,
 "NtReadFile": null,
 "NtAddAtom": null,
 "NtDeleteAtom": null,
 "NtCreateEvent": null,
 "NtGetContextThread": null,
 "NtSetContextThread": null,
 "RtlAddVectoredExceptionHandler": null,
 "NtCreateNamedPipeFile": null,
 "NSPStartup": null,
 "NtOpenDirectoryObject": null,
 "NtDeleteValueKey": null,
 "NtOpenMutant": null,
 "NtDelayExecution": null,
 "WinHttpOpenRequest": null,
 "WinHttpSendRequest": null,
 "NtQueryDirectoryFile": null,
 "NtQueryFullAttributesFile": null,
 "MoveFileWithProgressTransacted": null,
 "WinHttpConnect": null,
 "NtYieldExecution": null,
 "CallWindowProc": null,
 "CheckColorsInGamut": null,
 "CreateColorSpace": null,
 "DefFrameProc": null,
 "DefMDIChildProc": null,
 "DeleteColorSpace": null,
 "GetColorSpace": null,
 "GetDeviceGammaRamp": null,
 "GetEnhMetaFilePixelFormat": null,
 "GetHGlobalFromILockBytes": null,
 "GlobalCompact": null,
 "GlobalFix": null,
 "GlobalUnfix": null,
 "GetKeyboardType": null,
 "GetWindowWord": null,
 "_hread": null,
 "_hwrite": null,
 "IsBadHugeReadPtr": null,
 "_lcreat": null,
 "_llseek": null,
 "IsBadHugeWritePtr": null,
 "_lclose": null,
 "_lopen": null,
 "ReadClassStg": null,
 "StgCreateDocfile": null,
 "StgIsStorageFile": null,
 "StgOpenAsyncDocfileOnIFillLockBytes": null,
 "StgOpenStorage": null,
 "WriteClassStm": null,
 "WriteFmtUserTypeStg": null,
 "SetICMMode": null,
 "SetWindowsHook": null,
 "SetWindowWord": null,
 "TranslateMDISysAccel": null,
 "UpdateICMRegKey": null,
 "VerLanguageName": null,
 "malloc": null,
 "Thread32First": null,
 "Thread32Next": null,
 "NtQueryInformationToken": null,
 "NtOpenProcessToken": null,
 "NtQueryInformationAtom": null,
 "NtFindAtom": null,
 "NtCreateTransaction": null,
 "NtCommitTransaction": null,
 "IsValidURL": null,
 "NtSetTimerEx": null,
 "NtCreateThreadEx": null,
 "NtSuspendThread": null,
 "WinHttpReceiveResponse": null,
 "WinHttpQueryHeaders": null,
 "HTTPSCertificateTrust": null,
 "HTTPSFinalProv": null,
 "NtQueueApcThread": null,
 "GetFileVersionInfo": null,
 "GetFileVersionInfoSize": null,
 "NtRaiseHardError": null,
 "NtResumeProcess": null,
 "SaferIdentifyLevel": null,
 "Module32First": null,
 "Module32Next": null,
 "SetupDiGetClassDevs": null,
 "URLDownloadToFile": null,
 "RtlDecompressBuffer": null,
 "DnsQuery_UTF8": null,
 "COleScript_ParseScriptText": null,
 "JsEval": null,
 "JsParseScript": null,
 "CDocument_write": null,
 "JsRunScript": null,
 "srand": null,
 "K32EnumProcesses": "A pointer to an array that receives the list of process identifiers."
}
